{"version":3,"file":"component---src-pages-index-js-35c714ad814a4abdea38.js","mappings":"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","sources":["webpack://osiris-resources/./node_modules/camelcase/index.js","webpack://osiris-resources/./node_modules/react-waypoint/node_modules/react-is/cjs/react-is.production.min.js","webpack://osiris-resources/./node_modules/react-waypoint/node_modules/react-is/index.js","webpack://osiris-resources/../src/image-utils.ts","webpack://osiris-resources/../src/components/hooks.ts","webpack://osiris-resources/../src/components/picture.tsx","webpack://osiris-resources/../src/components/layout-wrapper.tsx","webpack://osiris-resources/../src/components/placeholder.tsx","webpack://osiris-resources/../src/components/main-image.tsx","webpack://osiris-resources/../src/components/gatsby-image.browser.tsx","webpack://osiris-resources/../src/components/gatsby-image.server.tsx","webpack://osiris-resources/../src/components/static-image.server.tsx","webpack://osiris-resources/../src/components/static-image.tsx","webpack://osiris-resources/./node_modules/consolidated-events/lib/index.esm.js","webpack://osiris-resources/./node_modules/react-waypoint/es/index.js","webpack://osiris-resources/./src/components/team.js","webpack://osiris-resources/./src/images/globe.js","webpack://osiris-resources/./src/components/footprint.js","webpack://osiris-resources/./src/components/cta.js","webpack://osiris-resources/./src/components/contact.js","webpack://osiris-resources/./src/components/partners.js","webpack://osiris-resources/./src/components/hero.js","webpack://osiris-resources/./src/images/ai.js","webpack://osiris-resources/./src/images/telco.js","webpack://osiris-resources/./src/images/quantum.js","webpack://osiris-resources/./src/components/sectors.js","webpack://osiris-resources/./src/components/about.js","webpack://osiris-resources/./src/images/retain.js","webpack://osiris-resources/./src/images/casestudy.js","webpack://osiris-resources/./src/images/hiring.js","webpack://osiris-resources/./src/components/services.js","webpack://osiris-resources/./src/pages/index.js"],"sourcesContent":["'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n\n  return string;\n};\n\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n\n  var hasUpperCase = input !== input.toLowerCase();\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar b = Symbol.for(\"react.element\"),\n    c = Symbol.for(\"react.portal\"),\n    d = Symbol.for(\"react.fragment\"),\n    e = Symbol.for(\"react.strict_mode\"),\n    f = Symbol.for(\"react.profiler\"),\n    g = Symbol.for(\"react.provider\"),\n    h = Symbol.for(\"react.context\"),\n    k = Symbol.for(\"react.server_context\"),\n    l = Symbol.for(\"react.forward_ref\"),\n    m = Symbol.for(\"react.suspense\"),\n    n = Symbol.for(\"react.suspense_list\"),\n    p = Symbol.for(\"react.memo\"),\n    q = Symbol.for(\"react.lazy\"),\n    t = Symbol.for(\"react.offscreen\"),\n    u;\nu = Symbol.for(\"react.module.reference\");\n\nfunction v(a) {\n  if (\"object\" === typeof a && null !== a) {\n    var r = a.$$typeof;\n\n    switch (r) {\n      case b:\n        switch (a = a.type, a) {\n          case d:\n          case f:\n          case e:\n          case m:\n          case n:\n            return a;\n\n          default:\n            switch (a = a && a.$$typeof, a) {\n              case k:\n              case h:\n              case l:\n              case q:\n              case p:\n              case g:\n                return a;\n\n              default:\n                return r;\n            }\n\n        }\n\n      case c:\n        return r;\n    }\n  }\n}\n\nexports.ContextConsumer = h;\nexports.ContextProvider = g;\nexports.Element = b;\nexports.ForwardRef = l;\nexports.Fragment = d;\nexports.Lazy = q;\nexports.Memo = p;\nexports.Portal = c;\nexports.Profiler = f;\nexports.StrictMode = e;\nexports.Suspense = m;\nexports.SuspenseList = n;\n\nexports.isAsyncMode = function () {\n  return !1;\n};\n\nexports.isConcurrentMode = function () {\n  return !1;\n};\n\nexports.isContextConsumer = function (a) {\n  return v(a) === h;\n};\n\nexports.isContextProvider = function (a) {\n  return v(a) === g;\n};\n\nexports.isElement = function (a) {\n  return \"object\" === typeof a && null !== a && a.$$typeof === b;\n};\n\nexports.isForwardRef = function (a) {\n  return v(a) === l;\n};\n\nexports.isFragment = function (a) {\n  return v(a) === d;\n};\n\nexports.isLazy = function (a) {\n  return v(a) === q;\n};\n\nexports.isMemo = function (a) {\n  return v(a) === p;\n};\n\nexports.isPortal = function (a) {\n  return v(a) === c;\n};\n\nexports.isProfiler = function (a) {\n  return v(a) === f;\n};\n\nexports.isStrictMode = function (a) {\n  return v(a) === e;\n};\n\nexports.isSuspense = function (a) {\n  return v(a) === m;\n};\n\nexports.isSuspenseList = function (a) {\n  return v(a) === n;\n};\n\nexports.isValidElementType = function (a) {\n  return \"string\" === typeof a || \"function\" === typeof a || a === d || a === f || a === e || a === m || a === n || a === t || \"object\" === typeof a && null !== a && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l || a.$$typeof === u || void 0 !== a.getModuleId) ? !0 : !1;\n};\n\nexports.typeOf = v;","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Node & {\n  childImageSharp?: IGatsbyImageDataParent<Node>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (node: ImageDataLike): IGatsbyImageData | undefined => {\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        document.addEventListener(`load`, function onLoadListener() {\n          document.removeEventListener(`load`, onLoadListener)\n\n          onStartLoad?.({\n            wasCached: true,\n          })\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","var CAN_USE_DOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement); // Adapted from Modernizr\n// https://github.com/Modernizr/Modernizr/blob/acb3f0d9/feature-detects/dom/passiveeventlisteners.js#L26-L37\n\nfunction testPassiveEventListeners() {\n  if (!CAN_USE_DOM) {\n    return false;\n  }\n\n  if (!window.addEventListener || !window.removeEventListener || !Object.defineProperty) {\n    return false;\n  }\n\n  var supportsPassiveOption = false;\n\n  try {\n    var opts = Object.defineProperty({}, 'passive', {\n      // eslint-disable-next-line getter-return\n      get: function () {\n        function get() {\n          supportsPassiveOption = true;\n        }\n\n        return get;\n      }()\n    });\n\n    var noop = function noop() {};\n\n    window.addEventListener('testPassiveEventSupport', noop, opts);\n    window.removeEventListener('testPassiveEventSupport', noop, opts);\n  } catch (e) {// do nothing\n  }\n\n  return supportsPassiveOption;\n}\n\nvar memoized = void 0;\n\nfunction canUsePassiveEventListeners() {\n  if (memoized === undefined) {\n    memoized = testPassiveEventListeners();\n  }\n\n  return memoized;\n}\n\nfunction normalizeEventOptions(eventOptions) {\n  if (!eventOptions) {\n    return undefined;\n  }\n\n  if (!canUsePassiveEventListeners()) {\n    // If the browser does not support the passive option, then it is expecting\n    // a boolean for the options argument to specify whether it should use\n    // capture or not. In more modern browsers, this is passed via the `capture`\n    // option, so let's just hoist that value up.\n    return !!eventOptions.capture;\n  }\n\n  return eventOptions;\n}\n/* eslint-disable no-bitwise */\n\n/**\n * Generate a unique key for any set of event options\n */\n\n\nfunction eventOptionsKey(normalizedEventOptions) {\n  if (!normalizedEventOptions) {\n    return 0;\n  } // If the browser does not support passive event listeners, the normalized\n  // event options will be a boolean.\n\n\n  if (normalizedEventOptions === true) {\n    return 100;\n  } // At this point, the browser supports passive event listeners, so we expect\n  // the event options to be an object with possible properties of capture,\n  // passive, and once.\n  //\n  // We want to consistently return the same value, regardless of the order of\n  // these properties, so let's use binary maths to assign each property to a\n  // bit, and then add those together (with an offset to account for the\n  // booleans at the beginning of this function).\n\n\n  var capture = normalizedEventOptions.capture << 0;\n  var passive = normalizedEventOptions.passive << 1;\n  var once = normalizedEventOptions.once << 2;\n  return capture + passive + once;\n}\n\nfunction ensureCanMutateNextEventHandlers(eventHandlers) {\n  if (eventHandlers.handlers === eventHandlers.nextHandlers) {\n    // eslint-disable-next-line no-param-reassign\n    eventHandlers.nextHandlers = eventHandlers.handlers.slice();\n  }\n}\n\nfunction TargetEventHandlers(target) {\n  this.target = target;\n  this.events = {};\n}\n\nTargetEventHandlers.prototype.getEventHandlers = function () {\n  function getEventHandlers(eventName, options) {\n    var key = String(eventName) + ' ' + String(eventOptionsKey(options));\n\n    if (!this.events[key]) {\n      this.events[key] = {\n        handlers: [],\n        handleEvent: undefined\n      };\n      this.events[key].nextHandlers = this.events[key].handlers;\n    }\n\n    return this.events[key];\n  }\n\n  return getEventHandlers;\n}();\n\nTargetEventHandlers.prototype.handleEvent = function () {\n  function handleEvent(eventName, options, event) {\n    var eventHandlers = this.getEventHandlers(eventName, options);\n    eventHandlers.handlers = eventHandlers.nextHandlers;\n    eventHandlers.handlers.forEach(function (handler) {\n      if (handler) {\n        // We need to check for presence here because a handler function may\n        // cause later handlers to get removed. This can happen if you for\n        // instance have a waypoint that unmounts another waypoint as part of an\n        // onEnter/onLeave handler.\n        handler(event);\n      }\n    });\n  }\n\n  return handleEvent;\n}();\n\nTargetEventHandlers.prototype.add = function () {\n  function add(eventName, listener, options) {\n    var _this = this; // options has already been normalized at this point.\n\n\n    var eventHandlers = this.getEventHandlers(eventName, options);\n    ensureCanMutateNextEventHandlers(eventHandlers);\n\n    if (eventHandlers.nextHandlers.length === 0) {\n      eventHandlers.handleEvent = this.handleEvent.bind(this, eventName, options);\n      this.target.addEventListener(eventName, eventHandlers.handleEvent, options);\n    }\n\n    eventHandlers.nextHandlers.push(listener);\n    var isSubscribed = true;\n\n    var unsubscribe = function () {\n      function unsubscribe() {\n        if (!isSubscribed) {\n          return;\n        }\n\n        isSubscribed = false;\n        ensureCanMutateNextEventHandlers(eventHandlers);\n        var index = eventHandlers.nextHandlers.indexOf(listener);\n        eventHandlers.nextHandlers.splice(index, 1);\n\n        if (eventHandlers.nextHandlers.length === 0) {\n          // All event handlers have been removed, so we want to remove the event\n          // listener from the target node.\n          if (_this.target) {\n            // There can be a race condition where the target may no longer exist\n            // when this function is called, e.g. when a React component is\n            // unmounting. Guarding against this prevents the following error:\n            //\n            //   Cannot read property 'removeEventListener' of undefined\n            _this.target.removeEventListener(eventName, eventHandlers.handleEvent, options);\n          }\n\n          eventHandlers.handleEvent = undefined;\n        }\n      }\n\n      return unsubscribe;\n    }();\n\n    return unsubscribe;\n  }\n\n  return add;\n}();\n\nvar EVENT_HANDLERS_KEY = '__consolidated_events_handlers__'; // eslint-disable-next-line import/prefer-default-export\n\nfunction addEventListener(target, eventName, listener, options) {\n  if (!target[EVENT_HANDLERS_KEY]) {\n    // eslint-disable-next-line no-param-reassign\n    target[EVENT_HANDLERS_KEY] = new TargetEventHandlers(target);\n  }\n\n  var normalizedEventOptions = normalizeEventOptions(options);\n  return target[EVENT_HANDLERS_KEY].add(eventName, listener, normalizedEventOptions);\n}\n\nexport { addEventListener };","import _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport { addEventListener } from 'consolidated-events';\nimport React from 'react';\nimport { isForwardRef } from 'react-is';\n/**\n * Attempts to parse the offset provided as a prop as a percentage. For\n * instance, if the component has been provided with the string \"20%\" as\n * a value of one of the offset props. If the value matches, then it returns\n * a numeric version of the prop. For instance, \"20%\" would become `0.2`.\n * If `str` isn't a percentage, then `undefined` will be returned.\n *\n * @param {string} str The value of an offset prop to be converted to a\n *   number.\n * @return {number|undefined} The numeric version of `str`. Undefined if `str`\n *   was not a percentage.\n */\n\nfunction parseOffsetAsPercentage(str) {\n  if (str.slice(-1) === '%') {\n    return parseFloat(str.slice(0, -1)) / 100;\n  }\n\n  return undefined;\n}\n/**\n * Attempts to parse the offset provided as a prop as a pixel value. If\n * parsing fails, then `undefined` is returned. Three examples of values that\n * will be successfully parsed are:\n * `20`\n * \"20px\"\n * \"20\"\n *\n * @param {string|number} str A string of the form \"{number}\" or \"{number}px\",\n *   or just a number.\n * @return {number|undefined} The numeric version of `str`. Undefined if `str`\n *   was neither a number nor string ending in \"px\".\n */\n\n\nfunction parseOffsetAsPixels(str) {\n  if (!isNaN(parseFloat(str)) && isFinite(str)) {\n    return parseFloat(str);\n  }\n\n  if (str.slice(-2) === 'px') {\n    return parseFloat(str.slice(0, -2));\n  }\n\n  return undefined;\n}\n/**\n * @param {string|number} offset\n * @param {number} contextHeight\n * @return {number} A number representing `offset` converted into pixels.\n */\n\n\nfunction computeOffsetPixels(offset, contextHeight) {\n  var pixelOffset = parseOffsetAsPixels(offset);\n\n  if (typeof pixelOffset === 'number') {\n    return pixelOffset;\n  }\n\n  var percentOffset = parseOffsetAsPercentage(offset);\n\n  if (typeof percentOffset === 'number') {\n    return percentOffset * contextHeight;\n  }\n\n  return undefined;\n}\n\nvar ABOVE = 'above';\nvar INSIDE = 'inside';\nvar BELOW = 'below';\nvar INVISIBLE = 'invisible';\n\nfunction debugLog() {\n  if (process.env.NODE_ENV !== 'production') {\n    var _console;\n\n    (_console = console).log.apply(_console, arguments); // eslint-disable-line no-console\n\n  }\n}\n/**\n * When an element's type is a string, it represents a DOM node with that tag name\n * https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html#dom-elements\n *\n * @param {React.element} Component\n * @return {bool} Whether the component is a DOM Element\n */\n\n\nfunction isDOMElement(Component) {\n  return typeof Component.type === 'string';\n}\n\nvar errorMessage = '<Waypoint> needs a DOM element to compute boundaries. The child you passed is neither a ' + 'DOM element (e.g. <div>) nor does it use the innerRef prop.\\n\\n' + 'See https://goo.gl/LrBNgw for more info.';\n/**\n * Raise an error if \"children\" is not a DOM Element and there is no ref provided to Waypoint\n *\n * @param {?React.element} children\n * @param {?HTMLElement} ref\n * @return {undefined}\n */\n\nfunction ensureRefIsProvidedByChild(children, ref) {\n  if (children && !isDOMElement(children) && !ref) {\n    throw new Error(errorMessage);\n  }\n}\n/**\n * @param {object} bounds An object with bounds data for the waypoint and\n *   scrollable parent\n * @return {string} The current position of the waypoint in relation to the\n *   visible portion of the scrollable parent. One of the constants `ABOVE`,\n *   `BELOW`, `INSIDE` or `INVISIBLE`.\n */\n\n\nfunction getCurrentPosition(bounds) {\n  if (bounds.viewportBottom - bounds.viewportTop === 0) {\n    return INVISIBLE;\n  } // top is within the viewport\n\n\n  if (bounds.viewportTop <= bounds.waypointTop && bounds.waypointTop <= bounds.viewportBottom) {\n    return INSIDE;\n  } // bottom is within the viewport\n\n\n  if (bounds.viewportTop <= bounds.waypointBottom && bounds.waypointBottom <= bounds.viewportBottom) {\n    return INSIDE;\n  } // top is above the viewport and bottom is below the viewport\n\n\n  if (bounds.waypointTop <= bounds.viewportTop && bounds.viewportBottom <= bounds.waypointBottom) {\n    return INSIDE;\n  }\n\n  if (bounds.viewportBottom < bounds.waypointTop) {\n    return BELOW;\n  }\n\n  if (bounds.waypointTop < bounds.viewportTop) {\n    return ABOVE;\n  }\n\n  return INVISIBLE;\n}\n\nvar timeout;\nvar timeoutQueue = [];\n\nfunction onNextTick(cb) {\n  timeoutQueue.push(cb);\n\n  if (!timeout) {\n    timeout = setTimeout(function () {\n      timeout = null; // Drain the timeoutQueue\n\n      var item; // eslint-disable-next-line no-cond-assign\n\n      while (item = timeoutQueue.shift()) {\n        item();\n      }\n    }, 0);\n  }\n\n  var isSubscribed = true;\n  return function unsubscribe() {\n    if (!isSubscribed) {\n      return;\n    }\n\n    isSubscribed = false;\n    var index = timeoutQueue.indexOf(cb);\n\n    if (index === -1) {\n      return;\n    }\n\n    timeoutQueue.splice(index, 1);\n\n    if (!timeoutQueue.length && timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n}\n\nfunction resolveScrollableAncestorProp(scrollableAncestor) {\n  // When Waypoint is rendered on the server, `window` is not available.\n  // To make Waypoint easier to work with, we allow this to be specified in\n  // string form and safely convert to `window` here.\n  if (scrollableAncestor === 'window') {\n    return global.window;\n  }\n\n  return scrollableAncestor;\n}\n\nvar hasWindow = typeof window !== 'undefined';\nvar defaultProps = {\n  debug: false,\n  scrollableAncestor: undefined,\n  children: undefined,\n  topOffset: '0px',\n  bottomOffset: '0px',\n  horizontal: false,\n  onEnter: function onEnter() {},\n  onLeave: function onLeave() {},\n  onPositionChange: function onPositionChange() {},\n  fireOnRapidScroll: true\n}; // Calls a function when you scroll to the element.\n\nvar Waypoint = /*#__PURE__*/function (_React$PureComponent) {\n  _inheritsLoose(Waypoint, _React$PureComponent);\n\n  function Waypoint(props) {\n    var _this;\n\n    _this = _React$PureComponent.call(this, props) || this;\n\n    _this.refElement = function (e) {\n      _this._ref = e;\n    };\n\n    return _this;\n  }\n\n  var _proto = Waypoint.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    if (!hasWindow) {\n      return;\n    } // this._ref may occasionally not be set at this time. To help ensure that\n    // this works smoothly and to avoid layout thrashing, we want to delay the\n    // initial execution until the next tick.\n\n\n    this.cancelOnNextTick = onNextTick(function () {\n      _this2.cancelOnNextTick = null;\n      var _this2$props = _this2.props,\n          children = _this2$props.children,\n          debug = _this2$props.debug; // Berofe doing anything, we want to check that this._ref is avaliable in Waypoint\n\n      ensureRefIsProvidedByChild(children, _this2._ref);\n      _this2._handleScroll = _this2._handleScroll.bind(_this2);\n      _this2.scrollableAncestor = _this2._findScrollableAncestor();\n\n      if (process.env.NODE_ENV !== 'production' && debug) {\n        debugLog('scrollableAncestor', _this2.scrollableAncestor);\n      }\n\n      _this2.scrollEventListenerUnsubscribe = addEventListener(_this2.scrollableAncestor, 'scroll', _this2._handleScroll, {\n        passive: true\n      });\n      _this2.resizeEventListenerUnsubscribe = addEventListener(window, 'resize', _this2._handleScroll, {\n        passive: true\n      });\n\n      _this2._handleScroll(null);\n    });\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this3 = this;\n\n    if (!hasWindow) {\n      return;\n    }\n\n    if (!this.scrollableAncestor) {\n      // The Waypoint has not yet initialized.\n      return;\n    } // The element may have moved, so we need to recompute its position on the\n    // page. This happens via handleScroll in a way that forces layout to be\n    // computed.\n    //\n    // We want this to be deferred to avoid forcing layout during render, which\n    // causes layout thrashing. And, if we already have this work enqueued, we\n    // can just wait for that to happen instead of enqueueing again.\n\n\n    if (this.cancelOnNextTick) {\n      return;\n    }\n\n    this.cancelOnNextTick = onNextTick(function () {\n      _this3.cancelOnNextTick = null;\n\n      _this3._handleScroll(null);\n    });\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (!hasWindow) {\n      return;\n    }\n\n    if (this.scrollEventListenerUnsubscribe) {\n      this.scrollEventListenerUnsubscribe();\n    }\n\n    if (this.resizeEventListenerUnsubscribe) {\n      this.resizeEventListenerUnsubscribe();\n    }\n\n    if (this.cancelOnNextTick) {\n      this.cancelOnNextTick();\n    }\n  }\n  /**\n   * Traverses up the DOM to find an ancestor container which has an overflow\n   * style that allows for scrolling.\n   *\n   * @return {Object} the closest ancestor element with an overflow style that\n   *   allows for scrolling. If none is found, the `window` object is returned\n   *   as a fallback.\n   */\n  ;\n\n  _proto._findScrollableAncestor = function _findScrollableAncestor() {\n    var _this$props = this.props,\n        horizontal = _this$props.horizontal,\n        scrollableAncestor = _this$props.scrollableAncestor;\n\n    if (scrollableAncestor) {\n      return resolveScrollableAncestorProp(scrollableAncestor);\n    }\n\n    var node = this._ref;\n\n    while (node.parentNode) {\n      node = node.parentNode;\n\n      if (node === document.body) {\n        // We've reached all the way to the root node.\n        return window;\n      }\n\n      var style = window.getComputedStyle(node);\n      var overflowDirec = horizontal ? style.getPropertyValue('overflow-x') : style.getPropertyValue('overflow-y');\n      var overflow = overflowDirec || style.getPropertyValue('overflow');\n\n      if (overflow === 'auto' || overflow === 'scroll' || overflow === 'overlay') {\n        return node;\n      }\n    } // A scrollable ancestor element was not found, which means that we need to\n    // do stuff on window.\n\n\n    return window;\n  }\n  /**\n   * @param {Object} event the native scroll event coming from the scrollable\n   *   ancestor, or resize event coming from the window. Will be undefined if\n   *   called by a React lifecyle method\n   */\n  ;\n\n  _proto._handleScroll = function _handleScroll(event) {\n    if (!this._ref) {\n      // There's a chance we end up here after the component has been unmounted.\n      return;\n    }\n\n    var bounds = this._getBounds();\n\n    var currentPosition = getCurrentPosition(bounds);\n    var previousPosition = this._previousPosition;\n    var _this$props2 = this.props,\n        debug = _this$props2.debug,\n        onPositionChange = _this$props2.onPositionChange,\n        onEnter = _this$props2.onEnter,\n        onLeave = _this$props2.onLeave,\n        fireOnRapidScroll = _this$props2.fireOnRapidScroll;\n\n    if (process.env.NODE_ENV !== 'production' && debug) {\n      debugLog('currentPosition', currentPosition);\n      debugLog('previousPosition', previousPosition);\n    } // Save previous position as early as possible to prevent cycles\n\n\n    this._previousPosition = currentPosition;\n\n    if (previousPosition === currentPosition) {\n      // No change since last trigger\n      return;\n    }\n\n    var callbackArg = {\n      currentPosition: currentPosition,\n      previousPosition: previousPosition,\n      event: event,\n      waypointTop: bounds.waypointTop,\n      waypointBottom: bounds.waypointBottom,\n      viewportTop: bounds.viewportTop,\n      viewportBottom: bounds.viewportBottom\n    };\n    onPositionChange.call(this, callbackArg);\n\n    if (currentPosition === INSIDE) {\n      onEnter.call(this, callbackArg);\n    } else if (previousPosition === INSIDE) {\n      onLeave.call(this, callbackArg);\n    }\n\n    var isRapidScrollDown = previousPosition === BELOW && currentPosition === ABOVE;\n    var isRapidScrollUp = previousPosition === ABOVE && currentPosition === BELOW;\n\n    if (fireOnRapidScroll && (isRapidScrollDown || isRapidScrollUp)) {\n      // If the scroll event isn't fired often enough to occur while the\n      // waypoint was visible, we trigger both callbacks anyway.\n      onEnter.call(this, {\n        currentPosition: INSIDE,\n        previousPosition: previousPosition,\n        event: event,\n        waypointTop: bounds.waypointTop,\n        waypointBottom: bounds.waypointBottom,\n        viewportTop: bounds.viewportTop,\n        viewportBottom: bounds.viewportBottom\n      });\n      onLeave.call(this, {\n        currentPosition: currentPosition,\n        previousPosition: INSIDE,\n        event: event,\n        waypointTop: bounds.waypointTop,\n        waypointBottom: bounds.waypointBottom,\n        viewportTop: bounds.viewportTop,\n        viewportBottom: bounds.viewportBottom\n      });\n    }\n  };\n\n  _proto._getBounds = function _getBounds() {\n    var _this$props3 = this.props,\n        horizontal = _this$props3.horizontal,\n        debug = _this$props3.debug;\n\n    var _this$_ref$getBoundin = this._ref.getBoundingClientRect(),\n        left = _this$_ref$getBoundin.left,\n        top = _this$_ref$getBoundin.top,\n        right = _this$_ref$getBoundin.right,\n        bottom = _this$_ref$getBoundin.bottom;\n\n    var waypointTop = horizontal ? left : top;\n    var waypointBottom = horizontal ? right : bottom;\n    var contextHeight;\n    var contextScrollTop;\n\n    if (this.scrollableAncestor === window) {\n      contextHeight = horizontal ? window.innerWidth : window.innerHeight;\n      contextScrollTop = 0;\n    } else {\n      contextHeight = horizontal ? this.scrollableAncestor.offsetWidth : this.scrollableAncestor.offsetHeight;\n      contextScrollTop = horizontal ? this.scrollableAncestor.getBoundingClientRect().left : this.scrollableAncestor.getBoundingClientRect().top;\n    }\n\n    if (process.env.NODE_ENV !== 'production' && debug) {\n      debugLog('waypoint top', waypointTop);\n      debugLog('waypoint bottom', waypointBottom);\n      debugLog('scrollableAncestor height', contextHeight);\n      debugLog('scrollableAncestor scrollTop', contextScrollTop);\n    }\n\n    var _this$props4 = this.props,\n        bottomOffset = _this$props4.bottomOffset,\n        topOffset = _this$props4.topOffset;\n    var topOffsetPx = computeOffsetPixels(topOffset, contextHeight);\n    var bottomOffsetPx = computeOffsetPixels(bottomOffset, contextHeight);\n    var contextBottom = contextScrollTop + contextHeight;\n    return {\n      waypointTop: waypointTop,\n      waypointBottom: waypointBottom,\n      viewportTop: contextScrollTop + topOffsetPx,\n      viewportBottom: contextBottom - bottomOffsetPx\n    };\n  }\n  /**\n   * @return {Object}\n   */\n  ;\n\n  _proto.render = function render() {\n    var _this4 = this;\n\n    var children = this.props.children;\n\n    if (!children) {\n      // We need an element that we can locate in the DOM to determine where it is\n      // rendered relative to the top of its context.\n      return /*#__PURE__*/React.createElement(\"span\", {\n        ref: this.refElement,\n        style: {\n          fontSize: 0\n        }\n      });\n    }\n\n    if (isDOMElement(children) || isForwardRef(children)) {\n      var ref = function ref(node) {\n        _this4.refElement(node);\n\n        if (children.ref) {\n          if (typeof children.ref === 'function') {\n            children.ref(node);\n          } else {\n            children.ref.current = node;\n          }\n        }\n      };\n\n      return /*#__PURE__*/React.cloneElement(children, {\n        ref: ref\n      });\n    }\n\n    return /*#__PURE__*/React.cloneElement(children, {\n      innerRef: this.refElement\n    });\n  };\n\n  return Waypoint;\n}(React.PureComponent);\n\nif (process.env.NODE_ENV !== 'production') {}\n\nWaypoint.above = ABOVE;\nWaypoint.below = BELOW;\nWaypoint.inside = INSIDE;\nWaypoint.invisible = INVISIBLE;\nWaypoint.defaultProps = defaultProps;\nWaypoint.displayName = 'Waypoint';\nexport { Waypoint };","import * as React from 'react';\nimport { Waypoint } from 'react-waypoint';\nimport { StaticImage } from 'gatsby-plugin-image';\n\nconst TeamSection = ({highlightAnimation, lineAnimation, useWndowWidth}) => {\n    return (\n        <div id=\"team\" className=\"team-profiles\">\n            <Waypoint onEnter={() => highlightAnimation(\"highlightTeam\")} onLeave={() => highlightAnimation(\"highlightTeam\")}>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-12 text-center\">\n                            <h2 className=\"highlight-heading\"><span id=\"highlightTeam\"></span>Team</h2>\n                        </div>\n                    </div>\n                    <Waypoint onEnter={() => lineAnimation(\"lineHorizontal\", \"lineVertical\", \"line-animation-l\", \"line-animation-r\")} onLeave={() => lineAnimation(\"lineHorizontal\", \"lineVertical\", \"line-animation-l\", \"line-animation-r\")} bottomOffset={useWndowWidth() > 767.20 ? 80 : 0}>\n                        <div className=\"row mb-5\">\n                            <div className=\"col-md-3\">\n                                <div className=\"profile-first\">\n                                    <StaticImage src=\"../images/James_Hill_img.png\" alt=\"James Hill - Osiris Resources\" />\n                                    <span id=\"lineHorizontal\" className=\"accent-line line-horizontal\"></span>\n                                    <span id=\"lineVertical\" className=\"accent-line line-vertical\"></span>\n                                </div>\n                            </div>\n                            <div className=\"col-md-9 profile-text\">\n                                <div className=\"profile-text-container\">\n                                    <h5>James Hill</h5>\n                                    <h6 className=\"mb-5\">Director</h6>\n                                    <p>Osiris Resources was started by James who recognised the need for an expert consultancy in a growingly saturated and niche market. James has worked directly for SME’s and large corporations delivering talent solutions for the Telco market and also has experience delivering business operations and running enterprise sales programmes.</p>\n                                    <p>He is passionate about maintaining and building further an already existing ecosystem in the Telecoms and Computer Networking industry.</p>\n                                </div>\n                            </div>\n                        </div>\n                    </Waypoint>\n                    <Waypoint onEnter={() => lineAnimation(\"lineLeft\", \"lineRight\", \"line-animation-l\", \"line-animation-r\")} onLeave={() => lineAnimation(\"lineLeft\", \"lineRight\", \"line-animation-l\", \"line-animation-r\")} bottomOffset={useWndowWidth() > 767.20 ? 150 : 0}>\n                        <div className=\"row mt-5 mb-5\">\n                            <div className=\"col-md-3 order-md-2\">\n                                <div className=\"profile-middle\">\n                                    <StaticImage src=\"../images/Paul_Leszczynski_img.png\" alt=\"- Osiris Resources\" />\n                                    <span id=\"lineLeft\" className=\"accent-line line-left\"></span>\n                                    <span id=\"lineRight\" className=\"accent-line line-right\"></span>\n                                </div>\n                            </div>\n                            <div className=\"col-md-9 order-md-1 profile-text\">\n                                <div className=\"profile-text-container\">\n                                    <h5>Paul Leszczynski</h5>\n                                    <h6 className=\"mb-5\">Talent Sourcer</h6>\n                                    <p>Paul has worked with Osiris Resources for nearly two years sourcing talents on all projects that we have. He has built up an excellent specific network globally amongst all the top companies in the sectors that we are in.</p>\n                                    <p>A family man Paul's work ethic is second to none and when not talent sourcing he also can take laptops apart and put them back together along with car engines.</p>\n                                </div>\n                            </div>\n                        </div>\n                    </Waypoint>\n                    <Waypoint onEnter={() => lineAnimation(\"lineHorizontalLast\", \"lineVerticalLast\", \"line-animation-r\", \"line-animation-l\")} onLeave={() => lineAnimation(\"lineHorizontalLast\", \"lineVerticalLast\", \"line-animation-r\", \"line-animation-l\")} bottomOffset={useWndowWidth() > 767.20 ? 150 : 0}>\n                        <div className=\"row mt-5\">\n                            <div className=\"col-md-3\">\n                                <div className=\"profile-last\">\n                                    <StaticImage src=\"../images/Nick_Randall_img.png\" alt=\"Nick Randall - Osiris Resources\" />\n                                    <span id=\"lineHorizontalLast\" className=\"accent-line line-horizontal-last\"></span>\n                                    <span id=\"lineVerticalLast\" className=\"accent-line line-vertical-last\"></span>\n                                </div>\n                            </div>\n                            <div className=\"col-md-9 profile-text\">\n                                <div className=\"profile-text-container\">\n                                    <h5>Nick Randall</h5>\n                                    <h6 className=\"mb-5\">Non Exec Director</h6>\n                                    <p>Nick advises Osiris Resources, helping us with mentoring, coaching and general business management. He is CEO of NetMinded, a Bristol-based Networking start-up. Osiris Resources enjoys working with innovative companies such as NetMinded.</p>\n                                    <p>Our passion is supporting and championing the general Telco / Networking ecosystem. It is this passion and experience that makes us different. </p>\n                                </div>\n                            </div>\n                        </div>\n                    </Waypoint>\n                </div>\n            </Waypoint>\n        </div>\n    )\n}\n\nexport default TeamSection;\n","import * as React from \"react\";\n\nconst Globe = () => {\n  return (\n    <svg viewBox=\"0 0 409 390\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g id=\"globe\">\n        <g id=\"layer2\">\n          <g id=\"g3187\">\n            <path\n              id=\"circle1544\"\n              opacity=\"0.999\"\n              d=\"M221.318 176.941C221.318 179.003 222.99 180.674 225.052 180.674C227.114 180.674 228.785 179.003 228.785 176.941C228.785 174.879 227.114 173.208 225.052 173.208C222.99 173.208 221.318 174.879 221.318 176.941Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1546\"\n              opacity=\"0.999\"\n              d=\"M274.266 146.723C274.266 148.286 275.533 149.552 277.096 149.552C278.659 149.552 279.926 148.286 279.926 146.723C279.926 145.16 278.659 143.893 277.096 143.893C275.533 143.893 274.266 145.16 274.266 146.723Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1548\"\n              opacity=\"0.999\"\n              d=\"M275.487 205.476C275.487 207.039 276.754 208.306 278.317 208.306C279.88 208.306 281.146 207.039 281.146 205.476C281.146 203.913 279.88 202.646 278.317 202.646C276.754 202.646 275.487 203.913 275.487 205.476Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1550\"\n              opacity=\"0.999\"\n              d=\"M223.542 237.348C223.542 238.911 224.809 240.177 226.371 240.177C227.934 240.177 229.201 238.911 229.201 237.348C229.201 235.785 227.934 234.518 226.371 234.518C224.809 234.518 223.542 235.785 223.542 237.348Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1552\"\n              opacity=\"0.999\"\n              d=\"M170.934 208.592C170.934 210.155 172.201 211.422 173.764 211.422C175.327 211.422 176.594 210.155 176.594 208.592C176.594 207.029 175.327 205.762 173.764 205.762C172.201 205.762 170.934 207.029 170.934 208.592Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1556\"\n              opacity=\"0.999\"\n              d=\"M220.667 117.891C220.667 119.454 221.934 120.721 223.496 120.721C225.059 120.721 226.326 119.454 226.326 117.891C226.326 116.329 225.059 115.062 223.496 115.062C221.934 115.062 220.667 116.329 220.667 117.891Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1560\"\n              opacity=\"0.999\"\n              d=\"M321.671 176.633C321.671 177.918 322.713 178.96 323.998 178.96C325.283 178.96 326.324 177.918 326.324 176.633C326.324 175.348 325.283 174.307 323.998 174.307C322.713 174.307 321.671 175.348 321.671 176.633Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1562\"\n              opacity=\"0.999\"\n              d=\"M311.409 115.54C311.409 116.825 312.451 117.866 313.736 117.866C315.021 117.866 316.062 116.825 316.062 115.54C316.062 114.255 315.021 113.213 313.736 113.213C312.451 113.213 311.409 114.255 311.409 115.54Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1564\"\n              opacity=\"0.999\"\n              d=\"M266.224 98.7602C266.224 100.045 267.265 101.087 268.55 101.087C269.835 101.087 270.877 100.045 270.877 98.7602C270.877 97.4753 269.835 96.4336 268.55 96.4336C267.265 96.4336 266.224 97.4753 266.224 98.7602Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1566\"\n              opacity=\"0.999\"\n              d=\"M226.749 70.936C226.749 72.221 227.791 73.2627 229.076 73.2627C230.361 73.2627 231.402 72.221 231.402 70.936C231.402 69.651 230.361 68.6094 229.076 68.6094C227.791 68.6094 226.749 69.651 226.749 70.936Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1568\"\n              opacity=\"0.999\"\n              d=\"M171.79 93.0972C171.79 94.3821 172.832 95.4238 174.117 95.4238C175.402 95.4238 176.443 94.3821 176.443 93.0972C176.443 91.8122 175.402 90.7705 174.117 90.7705C172.832 90.7705 171.79 91.8122 171.79 93.0972Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1570\"\n              opacity=\"0.999\"\n              d=\"M123.597 131.486C123.597 132.771 124.638 133.813 125.923 133.813C127.208 133.813 128.25 132.771 128.25 131.486C128.25 130.201 127.208 129.16 125.923 129.16C124.638 129.16 123.597 130.201 123.597 131.486Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1572\"\n              opacity=\"0.999\"\n              d=\"M96.3428 183.278C96.3428 184.563 97.3845 185.604 98.6695 185.604C99.9544 185.604 100.996 184.563 100.996 183.278C100.996 181.993 99.9544 180.951 98.6695 180.951C97.3845 180.951 96.3428 181.993 96.3428 183.278Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1574\"\n              opacity=\"0.999\"\n              d=\"M132.372 179.703C132.372 180.988 133.414 182.03 134.699 182.03C135.984 182.03 137.025 180.988 137.025 179.703C137.025 178.418 135.984 177.377 134.699 177.377C133.414 177.377 132.372 178.418 132.372 179.703Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1576\"\n              opacity=\"0.999\"\n              d=\"M126.825 229.149C126.825 230.434 127.867 231.475 129.152 231.475C130.437 231.475 131.479 230.434 131.479 229.149C131.479 227.864 130.437 226.822 129.152 226.822C127.867 226.822 126.825 227.864 126.825 229.149Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1578\"\n              opacity=\"0.999\"\n              d=\"M174.399 264.581C174.399 265.866 175.441 266.907 176.726 266.907C178.011 266.907 179.053 265.866 179.053 264.581C179.053 263.296 178.011 262.254 176.726 262.254C175.441 262.254 174.399 263.296 174.399 264.581Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1580\"\n              opacity=\"0.999\"\n              d=\"M232.081 287.968C232.081 289.253 233.123 290.294 234.408 290.294C235.693 290.294 236.734 289.253 236.734 287.968C236.734 286.683 235.693 285.641 234.408 285.641C233.123 285.641 232.081 286.683 232.081 287.968Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1582\"\n              opacity=\"0.999\"\n              d=\"M287.167 286.506C287.167 287.791 288.209 288.833 289.494 288.833C290.779 288.833 291.82 287.791 291.82 286.506C291.82 285.221 290.779 284.18 289.494 284.18C288.209 284.18 287.167 285.221 287.167 286.506Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1584\"\n              opacity=\"0.999\"\n              d=\"M244.779 319.854C244.779 320.862 245.595 321.678 246.602 321.678C247.609 321.678 248.426 320.862 248.426 319.854C248.426 318.847 247.609 318.031 246.602 318.031C245.595 318.031 244.779 318.847 244.779 319.854Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1586\"\n              opacity=\"0.999\"\n              d=\"M251.865 328.945C251.865 329.952 252.681 330.769 253.688 330.769C254.695 330.769 255.512 329.952 255.512 328.945C255.512 327.938 254.695 327.121 253.688 327.121C252.681 327.121 251.865 327.938 251.865 328.945Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1588\"\n              opacity=\"0.999\"\n              d=\"M296.818 308.738C296.818 309.745 297.634 310.562 298.641 310.562C299.648 310.562 300.465 309.745 300.465 308.738C300.465 307.731 299.648 306.915 298.641 306.915C297.634 306.915 296.818 307.731 296.818 308.738Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1590\"\n              opacity=\"0.999\"\n              d=\"M335.349 264.199C335.349 265.206 336.165 266.023 337.172 266.023C338.18 266.023 338.996 265.206 338.996 264.199C338.996 263.192 338.18 262.376 337.172 262.376C336.165 262.376 335.349 263.192 335.349 264.199Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1592\"\n              opacity=\"0.999\"\n              d=\"M334.865 278.524C334.865 279.531 335.681 280.348 336.688 280.348C337.695 280.348 338.512 279.531 338.512 278.524C338.512 277.517 337.695 276.7 336.688 276.7C335.681 276.7 334.865 277.517 334.865 278.524Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1594\"\n              opacity=\"0.999\"\n              d=\"M362.865 228.943C362.865 229.95 363.681 230.767 364.688 230.767C365.695 230.767 366.512 229.95 366.512 228.943C366.512 227.936 365.695 227.119 364.688 227.119C363.681 227.119 362.865 227.936 362.865 228.943Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1596\"\n              opacity=\"0.999\"\n              d=\"M352.732 208.159C352.732 209.166 353.548 209.983 354.555 209.983C355.562 209.983 356.379 209.166 356.379 208.159C356.379 207.152 355.562 206.336 354.555 206.336C353.548 206.336 352.732 207.152 352.732 208.159Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1598\"\n              opacity=\"0.999\"\n              d=\"M367.531 177.903C367.531 178.91 368.347 179.727 369.354 179.727C370.361 179.727 371.178 178.91 371.178 177.903C371.178 176.896 370.361 176.079 369.354 176.079C368.347 176.079 367.531 176.896 367.531 177.903Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1600\"\n              opacity=\"0.999\"\n              d=\"M350.7 148.832C350.7 149.84 351.517 150.656 352.524 150.656C353.531 150.656 354.348 149.84 354.348 148.832C354.348 147.825 353.531 147.009 352.524 147.009C351.517 147.009 350.7 147.825 350.7 148.832Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1602\"\n              opacity=\"0.999\"\n              d=\"M360.007 131.6C360.007 132.608 360.824 133.424 361.831 133.424C362.838 133.424 363.654 132.608 363.654 131.6C363.654 130.593 362.838 129.777 361.831 129.777C360.824 129.777 360.007 130.593 360.007 131.6Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1604\"\n              opacity=\"0.999\"\n              d=\"M330.505 93.7465C330.505 94.7536 331.322 95.5701 332.329 95.5701C333.336 95.5701 334.152 94.7536 334.152 93.7465C334.152 92.7393 333.336 91.9229 332.329 91.9229C331.322 91.9229 330.505 92.7393 330.505 93.7465Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1606\"\n              opacity=\"0.999\"\n              d=\"M330.796 85.1774C330.796 86.1845 331.613 87.001 332.62 87.001C333.627 87.001 334.443 86.1845 334.443 85.1774C334.443 84.1702 333.627 83.3538 332.62 83.3538C331.613 83.3538 330.796 84.1702 330.796 85.1774Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1608\"\n              opacity=\"0.999\"\n              d=\"M282.466 71.0035C282.466 72.0107 283.283 72.8272 284.29 72.8272C285.297 72.8272 286.113 72.0107 286.113 71.0035C286.113 69.9964 285.297 69.1799 284.29 69.1799C283.283 69.1799 282.466 69.9964 282.466 71.0035Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1610\"\n              opacity=\"0.999\"\n              d=\"M291.984 54.3097C291.984 55.3168 292.8 56.1333 293.807 56.1333C294.814 56.1333 295.631 55.3168 295.631 54.3097C295.631 53.3025 294.814 52.4861 293.807 52.4861C292.8 52.4861 291.984 53.3025 291.984 54.3097Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1612\"\n              opacity=\"0.999\"\n              d=\"M245.396 38.9088C245.396 39.916 246.212 40.7324 247.219 40.7324C248.227 40.7324 249.043 39.916 249.043 38.9088C249.043 37.9017 248.227 37.0852 247.219 37.0852C246.212 37.0852 245.396 37.9017 245.396 38.9088Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1614\"\n              opacity=\"0.999\"\n              d=\"M236.691 42.6542C236.691 43.6613 237.507 44.4778 238.514 44.4778C239.521 44.4778 240.338 43.6613 240.338 42.6542C240.338 41.647 239.521 40.8306 238.514 40.8306C237.507 40.8306 236.691 41.647 236.691 42.6542Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1616\"\n              opacity=\"0.999\"\n              d=\"M189.835 39.0609C189.835 40.0681 190.652 40.8845 191.659 40.8845C192.666 40.8845 193.482 40.0681 193.482 39.0609C193.482 38.0538 192.666 37.2373 191.659 37.2373C190.652 37.2373 189.835 38.0538 189.835 39.0609Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1618\"\n              opacity=\"0.999\"\n              d=\"M180.126 54.6947C180.126 55.7019 180.943 56.5183 181.95 56.5183C182.957 56.5183 183.773 55.7019 183.773 54.6947C183.773 53.6876 182.957 52.8711 181.95 52.8711C180.943 52.8711 180.126 53.6876 180.126 54.6947Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1620\"\n              opacity=\"0.999\"\n              d=\"M146.419 58.1434C146.419 59.1506 147.236 59.967 148.243 59.967C149.25 59.967 150.066 59.1506 150.066 58.1434C150.066 57.1363 149.25 56.3198 148.243 56.3198C147.236 56.3198 146.419 57.1363 146.419 58.1434Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1622\"\n              opacity=\"0.999\"\n              d=\"M128.818 84.7208C128.818 85.728 129.634 86.5444 130.641 86.5444C131.648 86.5444 132.465 85.728 132.465 84.7208C132.465 83.7137 131.648 82.8972 130.641 82.8972C129.634 82.8972 128.818 83.7137 128.818 84.7208Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1624\"\n              opacity=\"0.999\"\n              d=\"M106.714 88.9047C106.714 89.9118 107.531 90.7283 108.538 90.7283C109.545 90.7283 110.361 89.9118 110.361 88.9047C110.361 87.8975 109.545 87.0811 108.538 87.0811C107.531 87.0811 106.714 87.8975 106.714 88.9047Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1626\"\n              opacity=\"0.999\"\n              d=\"M90.093 131.399C90.093 132.406 90.9095 133.223 91.9166 133.223C92.9238 133.223 93.7402 132.406 93.7402 131.399C93.7402 130.392 92.9238 129.575 91.9166 129.575C90.9095 129.575 90.093 130.392 90.093 131.399Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1628\"\n              opacity=\"0.999\"\n              d=\"M79.9504 138.428C79.9504 139.435 80.7669 140.251 81.774 140.251C82.7812 140.251 83.5977 139.435 83.5977 138.428C83.5977 137.421 82.7812 136.604 81.774 136.604C80.7669 136.604 79.9504 137.421 79.9504 138.428Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1630\"\n              opacity=\"0.999\"\n              d=\"M73.9758 185.884C73.9758 186.891 74.7923 187.708 75.7994 187.708C76.8066 187.708 77.623 186.891 77.623 185.884C77.623 184.877 76.8066 184.061 75.7994 184.061C74.7923 184.061 73.9758 184.877 73.9758 185.884Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1632\"\n              opacity=\"0.999\"\n              d=\"M93.1165 237.297C93.1165 238.304 93.9329 239.121 94.9401 239.121C95.9472 239.121 96.7637 238.304 96.7637 237.297C96.7637 236.29 95.9472 235.474 94.9401 235.474C93.9329 235.474 93.1165 236.29 93.1165 237.297Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1634\"\n              opacity=\"0.999\"\n              d=\"M82.1145 236.086C82.1145 237.093 82.931 237.909 83.9381 237.909C84.9453 237.909 85.7617 237.093 85.7617 236.086C85.7617 235.079 84.9453 234.262 83.9381 234.262C82.931 234.262 82.1145 235.079 82.1145 236.086Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1636\"\n              opacity=\"0.999\"\n              d=\"M110.661 282.506C110.661 283.514 111.478 284.33 112.485 284.33C113.492 284.33 114.309 283.514 114.309 282.506C114.309 281.499 113.492 280.683 112.485 280.683C111.478 280.683 110.661 281.499 110.661 282.506Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1638\"\n              opacity=\"0.999\"\n              d=\"M134.435 279.672C134.435 280.679 135.251 281.496 136.258 281.496C137.266 281.496 138.082 280.679 138.082 279.672C138.082 278.665 137.266 277.848 136.258 277.848C135.251 277.848 134.435 278.665 134.435 279.672Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1640\"\n              opacity=\"0.999\"\n              d=\"M151.865 309.675C151.865 310.682 152.681 311.499 153.688 311.499C154.695 311.499 155.512 310.682 155.512 309.675C155.512 308.668 154.695 307.851 153.688 307.851C152.681 307.851 151.865 308.668 151.865 309.675Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1642\"\n              opacity=\"0.999\"\n              d=\"M149.796 313.094C149.796 314.101 150.613 314.917 151.62 314.917C152.627 314.917 153.443 314.101 153.443 313.094C153.443 312.087 152.627 311.27 151.62 311.27C150.613 311.27 149.796 312.087 149.796 313.094Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1644\"\n              opacity=\"0.999\"\n              d=\"M186.255 309.016C186.255 310.023 187.072 310.84 188.079 310.84C189.086 310.84 189.902 310.023 189.902 309.016C189.902 308.009 189.086 307.192 188.079 307.192C187.072 307.192 186.255 308.009 186.255 309.016Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1646\"\n              opacity=\"0.999\"\n              d=\"M196.927 328.836C196.927 329.843 197.743 330.66 198.751 330.66C199.758 330.66 200.574 329.843 200.574 328.836C200.574 327.829 199.758 327.013 198.751 327.013C197.743 327.013 196.927 327.829 196.927 328.836Z\"\n              fill=\"white\"\n            />\n          </g>\n          <path\n            id=\"path880\"\n            d=\"M222.574 308.197C290.385 308.197 345.356 252.556 345.356 183.92C345.356 115.283 290.385 59.6418 222.574 59.6418C154.763 59.6418 99.791 115.283 99.791 183.92C99.791 252.556 154.763 308.197 222.574 308.197Z\"\n            fill=\"#00FFFF\"\n            fillOpacity=\"0.533893\"\n          />\n          <g id=\"Vector\">\n            <path\n              d=\"M155.248 102.331L169.618 93.4132L187.717 90.3689L202.847 97.3039L203.69 109.264L198.832 130.434L186.28 136.931L182.57 140.161L182.072 149.471L177.153 153.043L173.025 149.896L167.973 139.077L170.705 129.194L164.278 114.576L166.389 108.58L155.248 102.331Z\"\n              fill=\"#00FFFF\"\n              fillOpacity=\"0.533893\"\n            />\n            <path\n              d=\"M313.276 242.746L320.524 239.964L315.122 237.205L313.276 242.746ZM319.506 192.725L310.273 187.43L312.036 198.356L319.506 192.725ZM336.272 166.137L319.332 171.958L335.079 163.499L336.272 166.137ZM291.232 171.839L317.216 182.268L319.332 171.958L328.596 178.805L291.232 171.839ZM287.047 145.289L303.355 143.868L288.199 157.575L291.232 171.839L287.047 145.289ZM273.492 137.804L284.823 127.704L303.355 143.868L306.913 124.582L273.492 137.804ZM287.047 145.289L284.823 127.704L311.5 118.691L287.047 145.289ZM291.168 200.202L291.232 171.839L284.13 205.431L275.468 201.947L291.168 200.202ZM332.158 161.378C328.013 163.419 261.197 178.907 261.197 178.907L287.047 145.289L273.492 137.804L332.158 161.378ZM254.508 205.134L261.197 178.907L269.686 195.958L328.273 130.374L254.508 205.134ZM223.388 156.066L229.755 148.844L222.945 146.133L229.166 158.378L223.388 156.066ZM236.024 146.719L238.982 154.739L243.268 166.541L236.024 146.719ZM231.666 143.148L239.952 127.093L247.391 141.416L231.666 143.148ZM212.215 174.823L227.096 174.968L228.929 163.598L212.215 174.823ZM236.771 180.317L243.268 166.541L214.21 170.426L214.781 179.472L205.162 178.996L236.771 180.317ZM247.718 193.21L261.197 178.907L244.874 186.408L266.155 132.734L247.718 193.21ZM223.482 239.656L237.924 240.644L244.599 241.486L223.482 239.656ZM224.654 229.977L237.924 240.644L230.657 250.03L224.654 229.977ZM248.961 231.092L237.79 215.622L249.193 221.412L252.064 207.49L256.92 213.4L248.961 231.092ZM228.179 193.982L237.79 215.622L225.046 226.166L243.231 235.591L228.179 193.982ZM207.522 214.825L228.179 193.982L214.677 199.944L198.339 205.7L207.522 214.825ZM197.965 200.904L214.677 199.944L204.723 213.792L197.965 200.904ZM167.973 139.077L176.529 145.528L182.57 140.161L167.973 139.077ZM173.025 149.896L176.529 145.528L182.072 149.471L173.025 149.896ZM186.28 136.931L191.026 109.032L181.658 101.504L186.28 136.931ZM187.717 90.3689L181.658 101.504L169.618 93.4132L187.717 90.3689ZM154.909 277.467L154.042 274.329L156.952 276.897L154.909 277.467ZM150.427 266.617L147.408 270.149L154.042 274.329L157.273 274.118L150.427 266.617ZM147.036 257.465L150.427 266.617L152.614 267.743L147.036 257.465ZM170.256 250.57L171.62 229.838L182.519 236.48L170.256 250.57ZM174.388 219.345L171.62 229.838L151.814 234.772L158.639 257.164L174.388 219.345ZM172.127 217.636L171.62 229.838L165.738 220.809L172.127 217.636ZM157.122 220.27L165.738 220.809L171.4 214.885L157.122 220.27ZM143.292 227.175L157.122 220.27L151.814 234.772L143.292 227.175ZM143.082 209.854L157.122 220.27L151.971 208.348L143.082 209.854ZM141.308 204.463L136.563 208.52L147.193 210.696L141.308 204.463ZM131.915 197.513L124.206 197.579L121.225 203.045L131.915 197.513ZM164.749 167.687L150.955 164.66L165.045 161.956L164.749 167.687ZM112.229 154.64L130.254 173.37L156.874 177.595L112.229 154.64ZM144.453 190.41L130.254 173.37L105.916 185.738L144.453 190.41ZM136.523 158.763L112.229 154.64L105.916 185.738L136.523 158.763ZM141.059 133.637L133.683 140.343L112.229 154.64L136.116 150.162L141.059 133.637ZM112.229 154.64L124.595 138.152L133.683 140.343L134.349 132.777L112.229 154.64ZM155.248 102.331L169.618 93.4132L187.717 90.3689L202.847 97.3039L203.69 109.264L198.832 130.434L186.28 136.931L182.57 140.161L182.072 149.471L177.153 153.043L173.025 149.896L167.973 139.077L170.705 129.194L164.278 114.576L166.389 108.58L155.248 102.331Z\"\n              fill=\"#00FFFF\"\n              fillOpacity=\"0.533893\"\n            />\n            <path\n              d=\"M114.369 137.431L124.595 138.152M114.369 137.431L112.229 154.64M114.369 137.431L110.549 134.878C103.52 151.582 103.035 160.575 102.162 163.969L106.466 168.72M124.595 138.152L134.349 132.777M124.595 138.152L112.229 154.64M124.595 138.152L133.683 140.343M134.349 132.777L141.059 133.637M134.349 132.777L133.683 140.343M134.349 132.777L112.229 154.64M141.059 133.637L140.103 142.826M141.059 133.637L133.683 140.343M141.059 133.637L136.116 150.162M140.103 142.826L136.116 150.162M140.103 142.826L133.683 140.343M136.116 150.162L136.523 158.763M136.116 150.162L112.229 154.64M136.523 158.763L143.752 165.426M136.523 158.763L112.229 154.64M136.523 158.763L105.916 185.738M143.752 165.426L147.213 151.582M143.752 165.426L130.254 173.37M147.213 151.582L153.342 151.017M147.213 151.582L150.955 164.66M153.342 151.017L165.045 161.956M153.342 151.017L150.955 164.66M165.045 161.956L164.749 167.687M165.045 161.956L150.955 164.66M164.749 167.687L162.413 169.961L157.978 172.502M164.749 167.687L150.955 164.66M157.978 172.502L156.874 177.595M157.978 172.502L150.955 164.66M156.874 177.595L144.453 190.41M156.874 177.595L130.254 173.37M156.874 177.595L112.229 154.64M144.453 190.41L136.455 192.907L132.306 194.42M144.453 190.41L130.254 173.37M144.453 190.41L105.916 185.738M132.306 194.42L131.915 197.513M132.306 194.42L105.916 185.738M131.915 197.513L133.373 201.429M131.915 197.513L124.206 197.579M131.915 197.513L121.225 203.045M133.373 201.429L141.308 204.463M133.373 201.429L136.563 208.52M141.308 204.463L147.193 210.696M141.308 204.463L144.843 215.207M141.308 204.463L136.563 208.52M147.193 210.696L151.971 208.348M147.193 210.696L136.563 208.52M151.971 208.348L157.146 207.77M151.971 208.348L157.122 220.27M151.971 208.348L143.082 209.854L157.122 220.27M157.146 207.77L171.4 214.885M157.146 207.77L157.122 220.27M171.4 214.885L172.127 217.636M171.4 214.885L165.738 220.809M171.4 214.885L157.122 220.27M172.127 217.636L174.388 219.345M172.127 217.636L171.62 229.838M172.127 217.636L165.738 220.809M174.388 219.345L183.72 222.83M174.388 219.345L171.62 229.838M174.388 219.345L158.639 257.164M183.72 222.83L182.519 236.48M183.72 222.83L171.62 229.838M182.519 236.48L170.256 250.57M182.519 236.48L171.62 229.838M170.256 250.57L158.639 257.164M170.256 250.57L171.62 229.838M158.639 257.164L155.051 262.001L152.614 267.743M158.639 257.164L151.814 234.772M152.614 267.743L157.273 274.118M152.614 267.743L150.427 266.617M152.614 267.743L147.036 257.465M157.273 274.118L156.952 276.897M157.273 274.118L154.042 274.329M157.273 274.118L150.427 266.617M156.952 276.897L154.909 277.467M156.952 276.897L154.042 274.329M154.909 277.467L151.526 275.98M154.909 277.467L154.042 274.329M151.526 275.98L147.408 270.149M151.526 275.98L154.042 274.329M147.408 270.149L147.036 257.465M147.408 270.149L150.427 266.617M147.408 270.149L154.042 274.329M147.036 257.465L151.814 234.772M147.036 257.465L150.427 266.617M151.814 234.772L143.292 227.175M151.814 234.772L171.62 229.838M151.814 234.772L157.122 220.27M143.292 227.175L144.843 215.207M143.292 227.175L157.122 220.27M144.843 215.207L136.563 208.52M136.563 208.52L121.225 203.045M136.563 208.52L124.206 197.579M121.225 203.045L105.916 185.738M121.225 203.045L124.206 197.579M105.916 185.738L106.466 168.72M105.916 185.738L130.254 173.37M105.916 185.738L112.229 154.64M106.466 168.72L112.229 154.64M155.248 102.331L169.618 93.4132M155.248 102.331L166.389 108.58M155.248 102.331L181.658 101.504M169.618 93.4132L187.717 90.3689M169.618 93.4132L181.658 101.504M187.717 90.3689L202.847 97.3039M187.717 90.3689L181.658 101.504M202.847 97.3039L203.69 109.264M202.847 97.3039L170.705 129.194M203.69 109.264L198.832 130.434M203.69 109.264L166.389 108.58M198.832 130.434L186.28 136.931M198.832 130.434L191.026 109.032M186.28 136.931L182.57 140.161M186.28 136.931L191.026 109.032M186.28 136.931L181.658 101.504M182.57 140.161L182.072 149.471M182.57 140.161L176.529 145.528M182.57 140.161L167.973 139.077M182.57 140.161L170.705 129.194M182.072 149.471L177.153 153.043M182.072 149.471L176.529 145.528M182.072 149.471L173.025 149.896M177.153 153.043L173.025 149.896M177.153 153.043L176.529 145.528M173.025 149.896L167.973 139.077M173.025 149.896L176.529 145.528M167.973 139.077L170.705 129.194M167.973 139.077L176.529 145.528M170.705 129.194L164.278 114.576L166.389 108.58M222.945 146.133L217.011 152.301L217.984 158.425L219.764 158.567L223.388 156.066M222.945 146.133L225.963 134.649M222.945 146.133L229.755 148.844M222.945 146.133L229.166 158.378M223.388 156.066L224.918 157.19L223.562 160.61L223.071 162.998L226.127 161.718L229.166 158.378M223.388 156.066L229.755 148.844M223.388 156.066L229.166 158.378M229.166 158.378L229.755 148.844M229.755 148.844L231.666 143.148M231.666 143.148L235.951 143.741L236.024 146.719M231.666 143.148L225.963 134.649M231.666 143.148L239.952 127.093M231.666 143.148L247.391 141.416M236.024 146.719L231.929 153.345M236.024 146.719L238.982 154.739M236.024 146.719L243.268 166.541M231.929 153.345L234.526 154.436L238.982 154.739M231.929 153.345L247.772 146.804M238.982 154.739L228.929 163.598M238.982 154.739L243.268 166.541M228.929 163.598L217.037 167.996L214.21 170.426M228.929 163.598L227.096 174.968M228.929 163.598L212.215 174.823M214.21 170.426L209.696 170.387L209.656 172.899L212.215 174.823M214.21 170.426L243.268 166.541M214.21 170.426L214.781 179.472M212.215 174.823L211.345 176.319L206.219 176.733L205.162 178.996M212.215 174.823L227.096 174.968M205.162 178.996L205.482 184.601L209.12 185.775L214.121 184.208L214.945 181.321L214.781 179.472M205.162 178.996L214.781 179.472M205.162 178.996L236.771 180.317M214.781 179.472L217.526 176.852L221.662 176.244L225.897 180.703L228.304 182.031L230.107 181.154L227.795 178.061L227.096 174.968M227.096 174.968L229.042 176.479L232.051 181.181H234.911L236.771 180.317M236.771 180.317L238.168 184.96L240.007 185.74L243.586 185.248L244.874 186.408M236.771 180.317L243.268 166.541M244.874 186.408L244.11 189.222M244.874 186.408L261.197 178.907M244.874 186.408L266.155 132.734M244.11 189.222L240.427 190.718M244.11 189.222L245.185 192.79M240.427 190.718L232.215 191.73L229.247 191.876M240.427 190.718L245.185 192.79M229.247 191.876L223.496 185.955L220.221 185.025M229.247 191.876L218.342 213.379M220.221 185.025L208.376 187.924L205.276 189.923M220.221 185.025L228.179 193.982M205.276 189.923L199.378 197.397L197.965 200.904M205.276 189.923L244.053 196.796M197.965 200.904L198.339 205.7M197.965 200.904L214.677 199.944M197.965 200.904L204.723 213.792M198.339 205.7L204.723 213.792M198.339 205.7L214.677 199.944M198.339 205.7L207.522 214.825M204.723 213.792L207.522 214.825M204.723 213.792L214.677 199.944M207.522 214.825L214.495 214.39L218.342 213.379M207.522 214.825L228.179 193.982M218.342 213.379L220.892 218.148L225.046 226.166M225.046 226.166L224.654 229.977M225.046 226.166L237.79 215.622M225.046 226.166L243.231 235.591M224.654 229.977L221.913 234.561M224.654 229.977L237.924 240.644M224.654 229.977L230.657 250.03M221.913 234.561L223.482 239.656M221.913 234.561L237.924 240.644M223.482 239.656L230.657 250.03M223.482 239.656L237.924 240.644M223.482 239.656L244.599 241.486M230.657 250.03L238.141 250.246L244.599 241.486M230.657 250.03L237.924 240.644M244.599 241.486L243.231 235.591M244.599 241.486L237.924 240.644M243.231 235.591L248.961 231.092M243.231 235.591L228.179 193.982M248.961 231.092L249.193 221.412M248.961 231.092L237.79 215.622M248.961 231.092L256.92 213.4M249.193 221.412L256.92 213.4M249.193 221.412L237.79 215.622M249.193 221.412L252.064 207.49M256.92 213.4L257.141 208.665L252.064 207.49M256.92 213.4L252.064 207.49M252.064 207.49L247.551 203.535M247.551 203.535L244.053 196.796M247.551 203.535L237.79 215.622M244.053 196.796L245.185 192.79M245.185 192.79L247.718 193.21M247.718 193.21L254.508 205.134M247.718 193.21L261.197 178.907M247.718 193.21L266.155 132.734M254.508 205.134L260.052 204.758L264.626 199.747L262.131 196.221L269.686 195.958M254.508 205.134L261.197 178.907M254.508 205.134L328.273 130.374M269.686 195.958L275.468 201.947M269.686 195.958L261.197 178.907M269.686 195.958L328.273 130.374M275.468 201.947L276.737 206.515L282.075 213.334L283.536 210.35L284.13 205.431M275.468 201.947L284.13 205.431M275.468 201.947L291.168 200.202M284.13 205.431L291.168 200.202M284.13 205.431L291.232 171.839M291.168 200.202L294.957 202.155L294.518 205.356L297.184 205.643L301.94 208.262L307.052 210.247L309.261 207.29L309.02 200.583M291.168 200.202L291.232 171.839M309.02 200.583L312.036 198.356M309.02 200.583L291.232 171.839M312.036 198.356L315.212 198.878L319.506 192.725M312.036 198.356L310.273 187.43M312.036 198.356L319.506 192.725M319.506 192.725L318.644 186.777L317.216 182.268M319.506 192.725L310.273 187.43M317.216 182.268L328.596 178.805M317.216 182.268L291.232 171.839M317.216 182.268L319.332 171.958M328.596 178.805L336.272 166.137M328.596 178.805L319.332 171.958M328.596 178.805L291.232 171.839M336.272 166.137L335.079 163.499M336.272 166.137L319.332 171.958M335.079 163.499L332.158 161.378M335.079 163.499L319.332 171.958M332.158 161.378L337.945 155.293M332.158 161.378C328.013 163.419 261.197 178.907 261.197 178.907M332.158 161.378L273.492 137.804M337.945 155.293L338.179 144.575M337.945 155.293L341.014 153.821C340.949 153.46 339.097 147.507 338.179 144.575M328.273 130.374L323.223 128.373L317.24 125.113L312.252 124.182L306.913 124.582M328.273 130.374L331.711 128.575L334.452 135.099M306.913 124.582L311.5 118.691M306.913 124.582L303.355 143.868M306.913 124.582L273.492 137.804M306.913 124.582L307.047 110.841M311.5 118.691L310.955 113.888L307.047 110.841M311.5 118.691L284.823 127.704M311.5 118.691L287.047 145.289M307.047 110.841L301.866 112.989L295.72 115.804L290.194 117.548L287.932 121.869L283.57 123.143L284.823 127.704M284.823 127.704L280.795 127.5L278.634 125.031L273.855 125.821L271.337 130.454L273.564 135.531L273.492 137.804M284.823 127.704L273.492 137.804M284.823 127.704L303.355 143.868M284.823 127.704L287.047 145.289M273.492 137.804L266.155 132.734M273.492 137.804L261.197 178.907M273.492 137.804L287.047 145.289M266.155 132.734L261.361 135.071L251.444 144.325L247.772 146.804M247.772 146.804L242.106 143.95L239.879 139.6L247.391 141.416M247.391 141.416L252.01 138.787L239.952 127.093M247.391 141.416L239.952 127.093M239.952 127.093L225.963 134.649M313.276 242.746L315.122 237.205M313.276 242.746L315.473 251.411M313.276 242.746L320.524 239.964M315.122 237.205L331.117 229.903M315.122 237.205L320.524 239.964M331.117 229.903L334.599 232.818L331.595 239.463L326.058 246.545M331.117 229.903L326.058 246.545M326.058 246.545L319.401 248.547L315.473 251.411M326.058 246.545L320.524 239.964M326.058 246.545L327.44 246.878L326.363 248.917L315.473 251.411M315.473 251.411L320.524 239.964M294.722 202.033L291.232 171.839M291.232 171.839L310.273 187.43M291.232 171.839L288.199 157.575M291.232 171.839L287.047 145.289M261.197 178.907L288.199 157.575M261.197 178.907L287.047 145.289M319.332 171.958L334.452 135.099M288.199 157.575L303.355 143.868M287.047 145.289L303.355 143.868M237.79 215.622L228.179 193.982M228.179 193.982L214.677 199.944M191.026 109.032L181.658 101.504M171.62 229.838L165.738 220.809M165.738 220.809L157.122 220.27M130.254 173.37L112.229 154.64M112.229 154.64L133.683 140.343M334.452 135.099C335.53 137.773 337.786 143.411 338.179 144.575\"\n              stroke=\"white\"\n              strokeOpacity=\"0.8\"\n              strokeWidth=\"1.5\"\n            />\n          </g>\n        </g>\n        <g id=\"layer5\">\n          <g id=\"g6265\" opacity=\"0.999\">\n            <path\n              id=\"circle26\"\n              opacity=\"0.999\"\n              d=\"M135.409 70.7353C137.038 70.7353 138.358 69.4153 138.358 67.7869C138.358 66.1586 137.038 64.8386 135.409 64.8386C133.781 64.8386 132.461 66.1586 132.461 67.7869C132.461 69.4153 133.781 70.7353 135.409 70.7353Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle25\"\n              opacity=\"0.999\"\n              d=\"M3.67881 172.236C5.30713 172.236 6.62714 170.916 6.62714 169.287C6.62714 167.659 5.30713 166.339 3.67881 166.339C2.05049 166.339 0.730469 167.659 0.730469 169.287C0.730469 170.916 2.05049 172.236 3.67881 172.236Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle24\"\n              opacity=\"0.999\"\n              d=\"M106.972 247.657C108.6 247.657 109.92 246.337 109.92 244.709C109.92 243.081 108.6 241.76 106.972 241.76C105.343 241.76 104.023 243.081 104.023 244.709C104.023 246.337 105.343 247.657 106.972 247.657Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle23\"\n              opacity=\"0.999\"\n              d=\"M319.954 389.908C321.583 389.908 322.903 388.588 322.903 386.96C322.903 385.332 321.583 384.012 319.954 384.012C318.326 384.012 317.006 385.332 317.006 386.96C317.006 388.588 318.326 389.908 319.954 389.908Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle22\"\n              opacity=\"0.999\"\n              d=\"M353.911 171.259C355.54 171.259 356.86 169.939 356.86 168.31C356.86 166.682 355.54 165.362 353.911 165.362C352.283 165.362 350.963 166.682 350.963 168.31C350.963 169.939 352.283 171.259 353.911 171.259Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle21\"\n              opacity=\"0.999\"\n              d=\"M400.538 68.1218C402.166 68.1218 403.486 66.8017 403.486 65.1734C403.486 63.5451 402.166 62.2251 400.538 62.2251C398.91 62.2251 397.59 63.5451 397.59 65.1734C397.59 66.8017 398.91 68.1218 400.538 68.1218Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle20\"\n              opacity=\"0.999\"\n              d=\"M394.319 155.17C395.595 155.17 396.63 154.135 396.63 152.859C396.63 151.582 395.595 150.548 394.319 150.548C393.042 150.548 392.008 151.582 392.008 152.859C392.008 154.135 393.042 155.17 394.319 155.17Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle19\"\n              opacity=\"0.999\"\n              d=\"M405.84 146.189C407.116 146.189 408.151 145.155 408.151 143.878C408.151 142.602 407.116 141.567 405.84 141.567C404.564 141.567 403.529 142.602 403.529 143.878C403.529 145.155 404.564 146.189 405.84 146.189Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle18\"\n              opacity=\"0.999\"\n              d=\"M380.235 89.225C381.511 89.225 382.546 88.1904 382.546 86.9142C382.546 85.6379 381.511 84.6033 380.235 84.6033C378.958 84.6033 377.924 85.6379 377.924 86.9142C377.924 88.1904 378.958 89.225 380.235 89.225Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle17\"\n              opacity=\"0.999\"\n              d=\"M323.793 40.3969C325.07 40.3969 326.104 39.3623 326.104 38.086C326.104 36.8098 325.07 35.7751 323.793 35.7751C322.517 35.7751 321.482 36.8098 321.482 38.086C321.482 39.3623 322.517 40.3969 323.793 40.3969Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle16\"\n              opacity=\"0.999\"\n              d=\"M279.118 5.53045C280.394 5.53045 281.428 4.49584 281.428 3.21957C281.428 1.94331 280.394 0.908691 279.118 0.908691C277.841 0.908691 276.807 1.94331 276.807 3.21957C276.807 4.49584 277.841 5.53045 279.118 5.53045Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle15\"\n              opacity=\"0.999\"\n              d=\"M155.764 9.15106C157.04 9.15106 158.075 8.11644 158.075 6.84018C158.075 5.56391 157.04 4.5293 155.764 4.5293C154.488 4.5293 153.453 5.56391 153.453 6.84018C153.453 8.11644 154.488 9.15106 155.764 9.15106Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle14\"\n              opacity=\"0.999\"\n              d=\"M107.795 46.5363C109.072 46.5363 110.106 45.5017 110.106 44.2254C110.106 42.9492 109.072 41.9146 107.795 41.9146C106.519 41.9146 105.484 42.9492 105.484 44.2254C105.484 45.5017 106.519 46.5363 107.795 46.5363Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle13\"\n              opacity=\"0.999\"\n              d=\"M67.2777 13.0463C68.5539 13.0463 69.5886 12.0117 69.5886 10.7354C69.5886 9.45918 68.5539 8.42456 67.2777 8.42456C66.0014 8.42456 64.9668 9.45918 64.9668 10.7354C64.9668 12.0117 66.0014 13.0463 67.2777 13.0463Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle12\"\n              opacity=\"0.999\"\n              d=\"M78.973 107.414C80.2493 107.414 81.2839 106.379 81.2839 105.103C81.2839 103.826 80.2493 102.792 78.973 102.792C77.6967 102.792 76.6621 103.826 76.6621 105.103C76.6621 106.379 77.6967 107.414 78.973 107.414Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle11\"\n              opacity=\"0.999\"\n              d=\"M43.055 165.419C44.3313 165.419 45.3659 164.385 45.3659 163.108C45.3659 161.832 44.3313 160.798 43.055 160.798C41.7788 160.798 40.7441 161.832 40.7441 163.108C40.7441 164.385 41.7788 165.419 43.055 165.419Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle10\"\n              opacity=\"0.999\"\n              d=\"M58.3089 237.099C59.5852 237.099 60.6198 236.065 60.6198 234.788C60.6198 233.512 59.5852 232.478 58.3089 232.478C57.0327 232.478 55.998 233.512 55.998 234.788C55.998 236.065 57.0327 237.099 58.3089 237.099Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle9\"\n              opacity=\"0.999\"\n              d=\"M71.8714 323.825C73.1477 323.825 74.1823 322.791 74.1823 321.514C74.1823 320.238 73.1477 319.203 71.8714 319.203C70.5952 319.203 69.5605 320.238 69.5605 321.514C69.5605 322.791 70.5952 323.825 71.8714 323.825Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle8\"\n              opacity=\"0.999\"\n              d=\"M164.418 364.04C165.695 364.04 166.729 363.005 166.729 361.729C166.729 360.453 165.695 359.418 164.418 359.418C163.142 359.418 162.107 360.453 162.107 361.729C162.107 363.005 163.142 364.04 164.418 364.04Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle7\"\n              opacity=\"0.999\"\n              d=\"M224.553 371.611C225.829 371.611 226.864 370.576 226.864 369.3C226.864 368.023 225.829 366.989 224.553 366.989C223.277 366.989 222.242 368.023 222.242 369.3C222.242 370.576 223.277 371.611 224.553 371.611Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle6\"\n              opacity=\"0.999\"\n              d=\"M288.17 361.299C289.447 361.299 290.481 360.264 290.481 358.988C290.481 357.711 289.447 356.677 288.17 356.677C286.894 356.677 285.859 357.711 285.859 358.988C285.859 360.264 286.894 361.299 288.17 361.299Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle5\"\n              opacity=\"0.999\"\n              d=\"M346.994 325.121C348.271 325.121 349.305 324.086 349.305 322.81C349.305 321.534 348.271 320.499 346.994 320.499C345.718 320.499 344.684 321.534 344.684 322.81C344.684 324.086 345.718 325.121 346.994 325.121Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle4\"\n              opacity=\"0.999\"\n              d=\"M343.401 294.995C344.677 294.995 345.712 293.96 345.712 292.684C345.712 291.408 344.677 290.373 343.401 290.373C342.124 290.373 341.09 291.408 341.09 292.684C341.09 293.96 342.124 294.995 343.401 294.995Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle3\"\n              opacity=\"0.999\"\n              d=\"M381.422 272.907C382.698 272.907 383.733 271.872 383.733 270.596C383.733 269.32 382.698 268.285 381.422 268.285C380.146 268.285 379.111 269.32 379.111 270.596C379.111 271.872 380.146 272.907 381.422 272.907Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle2\"\n              opacity=\"0.999\"\n              d=\"M380.586 229.329C381.863 229.329 382.897 228.295 382.897 227.018C382.897 225.742 381.863 224.708 380.586 224.708C379.31 224.708 378.275 225.742 378.275 227.018C378.275 228.295 379.31 229.329 380.586 229.329Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"circle1\"\n              opacity=\"0.999\"\n              d=\"M405.701 215.806C406.978 215.806 408.012 214.771 408.012 213.495C408.012 212.218 406.978 211.184 405.701 211.184C404.425 211.184 403.391 212.218 403.391 213.495C403.391 214.771 404.425 215.806 405.701 215.806Z\"\n              fill=\"#40F5D4\"\n            />\n          </g>\n          <g id=\"g6509\">\n            <path\n              id=\"path6285 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M67.8701 12.1049L66.9277 11.0524L67.636 10.4182L68.5784 11.4707L67.8701 12.1049ZM71.6398 16.3149L69.7549 14.2099L70.4633 13.5757L72.3481 15.6806L71.6398 16.3149ZM75.4094 20.5248L73.5246 18.4198L74.2329 17.7856L76.1177 19.8906L75.4094 20.5248ZM79.179 24.7348L77.2942 22.6298L78.0025 21.9956L79.8873 24.1005L79.179 24.7348ZM82.9486 28.9447L81.0638 26.8397L81.7721 26.2055L83.6569 28.3105L82.9486 28.9447ZM86.7182 33.1546L84.8334 31.0497L85.5417 30.4154L87.4265 32.5204L86.7182 33.1546ZM90.4879 37.3646L88.603 35.2596L89.3114 34.6254L91.1962 36.7304L90.4879 37.3646ZM94.2575 41.5745L92.3727 39.4696L93.081 38.8353L94.9658 40.9403L94.2575 41.5745ZM98.0271 45.7845L96.1423 43.6795L96.8506 43.0453L98.7354 45.1502L98.0271 45.7845ZM101.797 49.9944L99.9119 47.8894L100.62 47.2552L102.505 49.3602L101.797 49.9944ZM105.566 54.2044L103.682 52.0994L104.39 51.4652L106.275 53.5701L105.566 54.2044ZM109.336 58.4143L107.451 56.3093L108.159 55.6751L110.044 57.7801L109.336 58.4143ZM113.106 62.6242L111.221 60.5193L111.929 59.8851L113.814 61.99L113.106 62.6242ZM116.875 66.8342L114.99 64.7292L115.699 64.095L117.584 66.2L116.875 66.8342ZM120.645 71.0441L118.76 68.9392L119.468 68.3049L121.353 70.4099L120.645 71.0441ZM123.472 74.2016L122.53 73.1491L123.238 72.5149L124.18 73.5674L123.472 74.2016Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6292 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M108.308 45.5971L107.43 44.5275L108.164 43.9241L109.043 44.9937L108.308 45.5971ZM111.822 49.8755L110.065 47.7363L110.8 47.1329L112.557 49.2721L111.822 49.8755ZM115.336 54.154L113.579 52.0148L114.314 51.4114L116.071 53.5506L115.336 54.154ZM118.85 58.4325L117.093 56.2932L117.827 55.6898L119.584 57.829L118.85 58.4325ZM122.363 62.7109L120.607 60.5717L121.341 59.9683L123.098 62.1075L122.363 62.7109ZM125.877 66.9893L124.12 64.8501L124.855 64.2467L126.612 66.3859L125.877 66.9893ZM129.391 71.2678L127.634 69.1286L128.369 68.5252L130.126 70.6644L129.391 71.2678ZM132.027 74.4766L131.148 73.407L131.883 72.8036L132.761 73.8732L132.027 74.4766Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6299 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M135.974 69.3215L135.035 68.0724L135.795 67.5012L136.734 68.7503L135.974 69.3215ZM139.729 74.3177L137.851 71.8196L138.611 71.2484L140.489 73.7465L139.729 74.3177ZM143.483 79.3139L141.606 76.8158L142.366 76.2446L144.243 78.7427L143.483 79.3139ZM147.238 84.3101L145.361 81.812L146.121 81.2408L147.998 83.739L147.238 84.3101ZM150.993 89.3064L149.115 86.8083L149.875 86.2371L151.753 88.7352L150.993 89.3064ZM153.809 93.0535L152.87 91.8045L153.63 91.2333L154.569 92.4823L153.809 93.0535Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6313 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M155.839 8.36121L155.322 7.01006L156.21 6.67017L156.727 8.02132L155.839 8.36121ZM157.908 13.7658L156.874 11.0635L157.762 10.7236L158.796 13.4259L157.908 13.7658ZM159.977 19.1704L158.943 16.4681L159.831 16.1282L160.865 18.8305L159.977 19.1704ZM162.046 24.575L161.012 21.8727L161.9 21.5328L162.934 24.2351L162.046 24.575ZM164.115 29.9796L163.081 27.2773L163.968 26.9374L165.003 29.6397L164.115 29.9796ZM166.184 35.3842L165.149 32.6819L166.037 32.342L167.072 35.0444L166.184 35.3842ZM168.253 40.7888L167.218 38.0865L168.106 37.7467L169.141 40.449L168.253 40.7888ZM169.804 44.8423L169.287 43.4912L170.175 43.1513L170.692 44.5024L169.804 44.8423Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6320 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M279.576 3.35559L279.164 4.73402L278.253 4.46192L278.665 3.0835L279.576 3.35559ZM278.34 7.49086L277.517 10.2477L276.606 9.97561L277.429 7.21876L278.34 7.49086ZM276.694 13.0045L275.87 15.7614L274.959 15.4893L275.783 12.7324L276.694 13.0045ZM275.047 18.5182L274.223 21.2751L273.312 21.003L274.136 18.2461L275.047 18.5182ZM273.4 24.0319L272.576 26.7887L271.666 26.5167L272.489 23.7598L273.4 24.0319ZM271.753 29.5456L270.93 32.3024L270.019 32.0303L270.842 29.2735L271.753 29.5456ZM270.106 35.0593L269.283 37.8161L268.372 37.544L269.195 34.7872L270.106 35.0593ZM268.459 40.573L268.048 41.9514L267.137 41.6793L267.548 40.3009L268.459 40.573Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6327 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M324.191 38.351L323.443 39.4668L322.653 38.9374L323.402 37.8215L324.191 38.351ZM321.947 41.6985L320.45 43.9302L319.661 43.4008L321.157 41.1691L321.947 41.6985ZM318.954 46.1619L317.458 48.3936L316.668 47.8642L318.164 45.6325L318.954 46.1619ZM315.962 50.6253L314.465 52.857L313.676 52.3275L315.172 50.0959L315.962 50.6253ZM312.969 55.0887L311.473 57.3204L310.683 56.7909L312.179 54.5592L312.969 55.0887ZM309.976 59.5521L308.48 61.7838L307.69 61.2543L309.187 59.0226L309.976 59.5521ZM306.984 64.0155L305.487 66.2472L304.698 65.7177L306.194 63.486L306.984 64.0155ZM303.991 68.4789L303.243 69.5947L302.453 69.0653L303.201 67.9494L303.991 68.4789Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6334 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M400.808 65.5649L399.631 66.3749L399.092 65.5914L400.27 64.7815L400.808 65.5649ZM397.275 67.9948L394.919 69.6147L394.38 68.8313L396.736 67.2114L397.275 67.9948ZM392.563 71.2347L390.207 72.8546L389.669 72.0712L392.024 70.4513L392.563 71.2347ZM387.851 74.4746L385.496 76.0945L384.957 75.3111L387.313 73.6911L387.851 74.4746ZM383.14 77.7144L380.784 79.3344L380.245 78.551L382.601 76.931L383.14 77.7144ZM378.428 80.9543L376.072 82.5743L375.533 81.7908L377.889 80.1709L378.428 80.9543ZM373.716 84.1942L371.36 85.8141L370.822 85.0307L373.178 83.4108L373.716 84.1942ZM369.005 87.4341L366.649 89.054L366.11 88.2706L368.466 86.6507L369.005 87.4341ZM364.293 90.674L361.937 92.2939L361.398 91.5105L363.754 89.8905L364.293 90.674ZM359.581 93.9138L357.225 95.5338L356.687 94.7504L359.043 93.1304L359.581 93.9138ZM354.87 97.1537L352.514 98.7737L351.975 97.9902L354.331 96.3703L354.87 97.1537ZM350.158 100.394L347.802 102.014L347.263 101.23L349.619 99.6102L350.158 100.394ZM345.446 103.633L343.09 105.253L342.552 104.47L344.907 102.85L345.446 103.633ZM340.734 106.873L338.379 108.493L337.84 107.71L340.196 106.09L340.734 106.873ZM336.023 110.113L333.667 111.733L333.128 110.95L335.484 109.33L336.023 110.113ZM331.311 113.353L328.955 114.973L328.417 114.19L330.772 112.57L331.311 113.353ZM326.599 116.593L325.422 117.403L324.883 116.62L326.061 115.81L326.599 116.593Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6341 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M380.489 87.3153L379.316 88.0634L378.805 87.2618L379.978 86.5137L380.489 87.3153ZM376.97 89.5597L374.623 91.0559L374.112 90.2543L376.459 88.7581L376.97 89.5597ZM372.277 92.5522L369.931 94.0485L369.419 93.2468L371.766 91.7506L372.277 92.5522ZM367.584 95.5447L365.238 97.041L364.727 96.2393L367.073 94.7431L367.584 95.5447ZM362.892 98.5372L360.545 100.033L360.034 99.2319L362.38 97.7356L362.892 98.5372ZM358.199 101.53L355.852 103.026L355.341 102.224L357.688 100.728L358.199 101.53ZM353.506 104.522L351.16 106.019L350.648 105.217L352.995 103.721L353.506 104.522ZM348.813 107.515L347.64 108.263L347.129 107.461L348.302 106.713L348.813 107.515Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6348 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M353.983 168.782L352.618 168.971L352.487 168.029L353.852 167.84L353.983 168.782ZM349.888 169.35L347.158 169.728L347.027 168.786L349.757 168.408L349.888 169.35ZM344.428 170.106L341.698 170.485L341.567 169.543L344.297 169.165L344.428 170.106ZM338.968 170.863L336.238 171.242L336.108 170.3L338.837 169.922L338.968 170.863ZM333.508 171.62L330.778 171.999L330.648 171.057L333.378 170.679L333.508 171.62ZM328.048 172.377L326.683 172.567L326.553 171.625L327.918 171.436L328.048 172.377Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6355 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M394.413 153.325L392.921 153.618L392.737 152.686L394.23 152.392L394.413 153.325ZM389.936 154.205L386.951 154.792L386.767 153.859L389.752 153.272L389.936 154.205ZM383.966 155.379L380.981 155.966L380.797 155.033L383.782 154.446L383.966 155.379ZM377.996 156.553L375.011 157.14L374.827 156.207L377.812 155.62L377.996 156.553ZM372.026 157.727L369.041 158.314L368.858 157.381L371.842 156.794L372.026 157.727ZM366.056 158.901L363.071 159.488L362.888 158.555L365.873 157.968L366.056 158.901ZM360.086 160.074L358.594 160.368L358.41 159.435L359.903 159.142L360.086 160.074Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6362 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M405.951 144.341L404.585 144.66L404.369 143.735L405.735 143.416L405.951 144.341ZM401.853 145.299L399.121 145.937L398.905 145.011L401.637 144.373L401.853 145.299ZM396.389 146.575L393.657 147.214L393.441 146.288L396.173 145.65L396.389 146.575ZM390.925 147.852L388.193 148.49L387.977 147.565L390.709 146.926L390.925 147.852ZM385.461 149.129L382.729 149.767L382.513 148.841L385.245 148.203L385.461 149.129ZM379.997 150.405L377.265 151.044L377.048 150.118L379.781 149.48L379.997 150.405ZM374.533 151.682L371.801 152.32L371.584 151.395L374.316 150.756L374.533 151.682ZM369.069 152.959L367.703 153.278L367.486 152.352L368.852 152.033L369.069 152.959Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6376 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M348.917 219.242L347.545 218.884L347.785 217.964L349.157 218.322L348.917 219.242ZM354.404 220.674L351.66 219.958L351.901 219.038L354.644 219.754L354.404 220.674ZM359.891 222.107L357.148 221.39L357.388 220.471L360.131 221.187L359.891 222.107ZM365.379 223.539L362.635 222.823L362.875 221.903L365.619 222.619L365.379 223.539ZM370.866 224.971L368.122 224.255L368.362 223.335L371.106 224.052L370.866 224.971ZM376.353 226.404L373.609 225.688L373.85 224.768L376.593 225.484L376.353 226.404ZM380.468 227.478L379.097 227.12L379.337 226.2L380.709 226.558L380.468 227.478Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6383 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M368.779 208.427L367.414 208.221L367.555 207.281L368.92 207.486L368.779 208.427ZM374.239 209.247L371.509 208.837L371.65 207.897L374.38 208.307L374.239 209.247ZM379.699 210.067L376.969 209.657L377.11 208.717L379.84 209.127L379.699 210.067ZM385.159 210.888L382.429 210.478L382.57 209.537L385.3 209.948L385.159 210.888ZM390.619 211.708L387.889 211.298L388.03 210.358L390.76 210.768L390.619 211.708ZM396.079 212.529L393.349 212.118L393.49 211.178L396.22 211.588L396.079 212.529ZM401.539 213.349L398.809 212.939L398.95 211.999L401.68 212.409L401.539 213.349ZM405.634 213.964L404.269 213.759L404.41 212.819L405.775 213.024L405.634 213.964Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6390 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M349.28 253.866L348.098 253.231L348.548 252.394L349.73 253.029L349.28 253.866ZM354.008 256.407L351.644 255.137L352.094 254.299L354.458 255.569L354.008 256.407ZM358.737 258.947L356.373 257.677L356.823 256.84L359.187 258.11L358.737 258.947ZM363.465 261.488L361.101 260.218L361.551 259.38L363.915 260.65L363.465 261.488ZM368.194 264.028L365.83 262.758L366.28 261.92L368.644 263.191L368.194 264.028ZM372.922 266.569L370.558 265.298L371.008 264.461L373.372 265.731L372.922 266.569ZM377.651 269.109L375.287 267.839L375.737 267.001L378.101 268.272L377.651 269.109ZM381.197 271.014L380.015 270.379L380.465 269.542L381.647 270.177L381.197 271.014Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6397 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M319.047 271.533L318.002 270.598L318.636 269.889L319.681 270.824L319.047 271.533ZM323.228 275.273L321.137 273.403L321.771 272.694L323.861 274.564L323.228 275.273ZM327.408 279.013L325.318 277.143L325.952 276.434L328.042 278.304L327.408 279.013ZM331.588 282.753L329.498 280.883L330.132 280.174L332.222 282.044L331.588 282.753ZM335.769 286.493L333.679 284.623L334.313 283.915L336.403 285.785L335.769 286.493ZM339.949 290.233L337.859 288.363L338.493 287.655L340.583 289.525L339.949 290.233ZM343.085 293.038L342.04 292.103L342.673 291.395L343.719 292.33L343.085 293.038Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6404 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M321.724 295.363L320.801 294.335L321.508 293.7L322.431 294.728L321.724 295.363ZM325.415 299.477L323.569 297.42L324.277 296.785L326.123 298.842L325.415 299.477ZM329.106 303.59L327.261 301.533L327.968 300.898L329.814 302.955L329.106 303.59ZM332.798 307.703L330.952 305.647L331.66 305.012L333.506 307.068L332.798 307.703ZM336.489 311.817L334.644 309.76L335.351 309.125L337.197 311.182L336.489 311.817ZM340.181 315.93L338.335 313.873L339.043 313.238L340.888 315.295L340.181 315.93ZM343.872 320.043L342.026 317.986L342.734 317.351L344.58 319.408L343.872 320.043ZM346.641 323.128L345.718 322.1L346.426 321.465L347.348 322.493L346.641 323.128Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6411 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M274.769 324.031L274.289 322.73L275.181 322.401L275.661 323.702L274.769 324.031ZM276.688 329.234L275.729 326.633L276.621 326.304L277.58 328.905L276.688 329.234ZM278.608 334.437L277.648 331.836L278.54 331.507L279.5 334.108L278.608 334.437ZM280.527 339.64L279.568 337.039L280.46 336.71L281.419 339.311L280.527 339.64ZM282.447 344.843L281.487 342.242L282.379 341.913L283.339 344.514L282.447 344.843ZM284.366 350.046L283.407 347.445L284.299 347.116L285.258 349.717L284.366 350.046ZM286.286 355.25L285.326 352.648L286.218 352.319L287.178 354.92L286.286 355.25ZM287.725 359.152L287.245 357.851L288.137 357.522L288.617 358.823L287.725 359.152Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6418 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M267.99 278.863L267.369 277.558L268.228 277.15L268.849 278.455L267.99 278.863ZM270.474 284.083L269.232 281.473L270.09 281.064L271.332 283.674L270.474 284.083ZM272.957 289.302L271.716 286.692L272.574 286.284L273.816 288.893L272.957 289.302ZM275.441 294.521L274.199 291.912L275.058 291.503L276.3 294.113L275.441 294.521ZM277.925 299.741L276.683 297.131L277.542 296.722L278.783 299.332L277.925 299.741ZM280.409 304.96L279.167 302.35L280.025 301.942L281.267 304.551L280.409 304.96ZM282.892 310.179L281.65 307.57L282.509 307.161L283.751 309.771L282.892 310.179ZM285.376 315.399L284.134 312.789L284.993 312.38L286.234 314.99L285.376 315.399ZM287.86 320.618L286.618 318.008L287.476 317.6L288.718 320.209L287.86 320.618ZM290.343 325.837L289.102 323.228L289.96 322.819L291.202 325.429L290.343 325.837ZM292.827 331.057L291.585 328.447L292.444 328.038L293.686 330.648L292.827 331.057ZM295.311 336.276L294.069 333.666L294.927 333.258L296.169 335.867L295.311 336.276ZM297.794 341.495L296.553 338.886L297.411 338.477L298.653 341.087L297.794 341.495ZM300.278 346.715L299.036 344.105L299.895 343.696L301.137 346.306L300.278 346.715ZM302.762 351.934L301.52 349.324L302.379 348.916L303.62 351.525L302.762 351.934ZM305.246 357.153L304.004 354.544L304.862 354.135L306.104 356.745L305.246 357.153ZM307.729 362.373L306.487 359.763L307.346 359.354L308.588 361.964L307.729 362.373ZM310.213 367.592L308.971 364.982L309.83 364.574L311.071 367.183L310.213 367.592ZM312.697 372.811L311.455 370.202L312.313 369.793L313.555 372.403L312.697 372.811ZM315.18 378.031L313.939 375.421L314.797 375.012L316.039 377.622L315.18 378.031ZM317.664 383.25L316.422 380.64L317.281 380.232L318.523 382.841L317.664 383.25ZM319.527 387.164L318.906 385.86L319.764 385.451L320.385 386.756L319.527 387.164Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6425 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M224.057 332.082L224.057 330.704L225.007 330.703L225.008 332.082L224.057 332.082ZM224.061 337.596L224.059 334.839L225.01 334.839L225.011 337.595L224.061 337.596ZM224.064 343.11L224.062 340.353L225.013 340.352L225.015 343.109L224.064 343.11ZM224.067 348.623L224.066 345.867L225.016 345.866L225.018 348.623L224.067 348.623ZM224.07 354.137L224.069 351.38L225.02 351.38L225.021 354.136L224.07 354.137ZM224.074 359.651L224.072 356.894L225.023 356.893L225.024 359.65L224.074 359.651ZM224.077 365.164L224.075 362.408L225.026 362.407L225.028 365.164L224.077 365.164ZM224.079 369.3L224.078 367.921L225.029 367.921L225.03 369.299L224.079 369.3Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6432 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M177.526 324.883L177.074 326.205L176.175 325.897L176.627 324.576L177.526 324.883ZM176.17 328.848L175.266 331.49L174.366 331.183L175.27 328.54L176.17 328.848ZM174.362 334.133L173.458 336.776L172.558 336.468L173.462 333.826L174.362 334.133ZM172.553 339.419L171.649 342.062L170.75 341.754L171.654 339.111L172.553 339.419ZM170.745 344.705L169.841 347.347L168.941 347.04L169.846 344.397L170.745 344.705ZM168.937 349.99L168.033 352.633L167.133 352.325L168.037 349.682L168.937 349.99ZM167.129 355.276L166.225 357.919L165.325 357.611L166.229 354.968L167.129 355.276ZM165.32 360.561L164.868 361.883L163.969 361.575L164.421 360.254L165.32 360.561Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6439 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M123.683 276.219L122.61 277.17L121.979 276.458L123.052 275.507L123.683 276.219ZM120.464 279.072L118.319 280.974L117.688 280.262L119.834 278.36L120.464 279.072ZM116.173 282.876L114.027 284.778L113.396 284.067L115.542 282.165L116.173 282.876ZM111.881 286.68L109.736 288.582L109.105 287.871L111.251 285.969L111.881 286.68ZM107.59 290.485L105.444 292.387L104.814 291.675L106.959 289.773L107.59 290.485ZM103.299 294.289L101.153 296.191L100.522 295.48L102.668 293.577L103.299 294.289ZM99.007 298.093L96.8613 299.995L96.2306 299.284L98.3764 297.382L99.007 298.093ZM94.7156 301.897L92.5698 303.8L91.9392 303.088L94.0849 301.186L94.7156 301.897ZM90.4241 305.702L88.2784 307.604L87.6477 306.892L89.7934 304.99L90.4241 305.702ZM86.1326 309.506L83.9869 311.408L83.3562 310.697L85.502 308.794L86.1326 309.506ZM81.8412 313.31L79.6954 315.212L79.0648 314.501L81.2105 312.599L81.8412 313.31ZM77.5497 317.114L75.404 319.017L74.7733 318.305L76.919 316.403L77.5497 317.114ZM73.2582 320.919L72.1854 321.87L71.5547 321.158L72.6276 320.207L73.2582 320.919Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6446 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M131.955 232.81L130.717 233.426L130.293 232.575L131.532 231.959L131.955 232.81ZM128.24 234.659L125.763 235.891L125.339 235.04L127.816 233.808L128.24 234.659ZM123.286 237.124L120.809 238.356L120.385 237.505L122.862 236.273L123.286 237.124ZM118.332 239.589L115.855 240.821L115.431 239.97L117.908 238.738L118.332 239.589ZM113.378 242.054L110.901 243.286L110.477 242.435L112.954 241.202L113.378 242.054ZM108.424 244.519L107.185 245.135L106.762 244.284L108 243.667L108.424 244.519Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6453 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M93.4777 225.012L92.018 225.438L91.7515 224.525L93.2111 224.099L93.4777 225.012ZM89.0988 226.291L86.1795 227.144L85.9129 226.231L88.8322 225.378L89.0988 226.291ZM83.2602 227.996L80.3409 228.849L80.0743 227.936L82.9936 227.084L83.2602 227.996ZM77.4216 229.702L74.5023 230.554L74.2358 229.642L77.155 228.789L77.4216 229.702ZM71.583 231.407L68.6638 232.26L68.3972 231.347L71.3165 230.495L71.583 231.407ZM65.7445 233.113L62.8252 233.965L62.5586 233.053L65.4779 232.2L65.7445 233.113ZM59.9059 234.818L58.4463 235.244L58.1797 234.332L59.6393 233.906L59.9059 234.818Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6460 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M5.03799 169.869L3.64453 169.761L3.71741 168.813L5.11087 168.921L5.03799 169.869ZM10.6118 170.297L7.82492 170.083L7.8978 169.135L10.6847 169.349L10.6118 170.297ZM16.1857 170.726L13.3988 170.511L13.4717 169.563L16.2586 169.778L16.1857 170.726ZM21.7596 171.154L18.9726 170.94L19.0455 169.992L21.8324 170.206L21.7596 171.154ZM27.3334 171.583L24.5465 171.368L24.6194 170.42L27.4063 170.635L27.3334 171.583ZM32.9073 172.011L30.1203 171.797L30.1932 170.849L32.9801 171.063L32.9073 172.011ZM38.4811 172.44L35.6942 172.225L35.7671 171.277L38.554 171.492L38.4811 172.44ZM44.055 172.868L41.268 172.654L41.3409 171.706L44.1278 171.92L44.055 172.868ZM49.6288 173.297L46.8419 173.082L46.9148 172.134L49.7017 172.349L49.6288 173.297ZM55.2027 173.725L52.4157 173.511L52.4886 172.563L55.2755 172.777L55.2027 173.725ZM60.7765 174.154L57.9896 173.939L58.0625 172.991L60.8494 173.206L60.7765 174.154ZM66.3504 174.582L63.5634 174.368L63.6363 173.42L66.4232 173.634L66.3504 174.582ZM71.9242 175.011L69.1373 174.796L69.2102 173.849L71.9971 174.063L71.9242 175.011ZM77.4981 175.439L74.7111 175.225L74.784 174.277L77.5709 174.491L77.4981 175.439ZM83.0719 175.868L80.285 175.653L80.3579 174.706L83.1448 174.92L83.0719 175.868ZM88.6458 176.296L85.8588 176.082L85.9317 175.134L88.7186 175.348L88.6458 176.296ZM94.2196 176.725L91.4327 176.511L91.5055 175.563L94.2925 175.777L94.2196 176.725ZM99.7934 177.153L97.0065 176.939L97.0794 175.991L99.8663 176.205L99.7934 177.153ZM105.367 177.582L102.58 177.368L102.653 176.42L105.44 176.634L105.367 177.582ZM109.548 177.903L108.154 177.796L108.227 176.848L109.621 176.955L109.548 177.903Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6467 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M44.3582 163.755L42.9922 163.58L43.1126 162.637L44.4786 162.812L44.3582 163.755ZM49.8223 164.452L47.0903 164.103L47.2106 163.16L49.9427 163.509L49.8223 164.452ZM55.2864 165.149L52.5543 164.801L52.6747 163.858L55.4068 164.206L55.2864 165.149ZM60.7505 165.847L58.0184 165.498L58.1388 164.555L60.8708 164.904L60.7505 165.847ZM66.2146 166.544L63.4825 166.195L63.6029 165.252L66.3349 165.601L66.2146 166.544ZM71.6787 167.242L68.9466 166.893L69.067 165.95L71.799 166.298L71.6787 167.242ZM77.1427 167.939L74.4107 167.59L74.5311 166.647L77.2631 166.996L77.1427 167.939ZM81.2408 168.462L79.8748 168.288L79.9952 167.344L81.3612 167.519L81.2408 168.462Z\"\n              fill=\"#40F5D4\"\n            />\n            <path\n              id=\"path6474 (Stroke)\"\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M80.0242 106.231L78.7461 105.518L79.2093 104.688L80.4874 105.401L80.0242 106.231ZM85.1364 109.083L82.5803 107.657L83.0435 106.827L85.5996 108.253L85.1364 109.083ZM90.2487 111.935L87.6926 110.509L88.1558 109.679L90.7119 111.105L90.2487 111.935ZM95.361 114.787L92.8049 113.361L93.2681 112.531L95.8242 113.957L95.361 114.787ZM100.473 117.639L97.9171 116.213L98.3803 115.383L100.936 116.809L100.473 117.639ZM105.586 120.492L103.029 119.065L103.493 118.235L106.049 119.661L105.586 120.492ZM109.42 122.631L108.142 121.918L108.605 121.087L109.883 121.8L109.42 122.631Z\"\n              fill=\"#40F5D4\"\n            />\n          </g>\n          <path\n            id=\"path4017\"\n            opacity=\"0.999\"\n            d=\"M216.551 37.1504L205.015 39.0245L191.655 39.0608L183.954 42.446L170.249 44.6724L150.23 57.2695L148.241 58.1435L145.648 60.1527L123.825 73.8846L117.25 82.1529L108.534 88.9046L101.44 102.032L92.9577 112.699L88.6735 125.658L81.7729 138.428L80.1252 151.515L77.557 159.284L77.5909 171.649L75.7988 185.884L77.6612 197.373L77.7088 214.847L82.1207 224.884L83.9364 236.086L94.8304 253.8L96.7914 258.261L100.589 263.163L112.485 282.507L120.316 288.628L127.553 297.968L142.827 306.222L151.619 313.094L161.897 316.527L177.076 324.73L192.128 326.624L198.751 328.836L209.875 328.859L224.532 330.704L235.6 328.91L253.688 328.946L264.013 324.304L274.734 322.566L293.359 311.112L298.64 308.738L303.52 304.862L321.155 294.017L327.663 285.691L336.688 278.524L345.602 262.739L351.742 254.884L354.209 247.498L364.687 228.943L366.299 211.298L367.484 207.751L367.503 198.126L369.352 177.903L367.565 166.907L367.593 152.815L363.965 144.743L361.83 131.601L348.621 110.61L347.386 107.862L345.007 104.866L332.618 85.177L323.809 78.1713L317.172 69.8141L303.814 62.271L293.804 54.3098L283.946 51.0508L267.591 41.8153L251.584 40.3523L247.219 38.909L236.125 38.9395L216.551 37.1504Z\"\n            fill=\"#40F5D4\"\n            fillOpacity=\"0.2\"\n          />\n          <g id=\"g3027\">\n            <path\n              id=\"path1218\"\n              opacity=\"0.999\"\n              d=\"M215.583 185.185C217.645 185.185 219.316 183.513 219.316 181.452C219.316 179.39 217.645 177.718 215.583 177.718C213.521 177.718 211.85 179.39 211.85 181.452C211.85 183.513 213.521 185.185 215.583 185.185Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1220\"\n              opacity=\"0.999\"\n              d=\"M185.365 132.237C186.928 132.237 188.195 130.97 188.195 129.407C188.195 127.845 186.928 126.578 185.365 126.578C183.802 126.578 182.535 127.845 182.535 129.407C182.535 130.97 183.802 132.237 185.365 132.237Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1222\"\n              opacity=\"0.999\"\n              d=\"M244.121 131.016C245.684 131.016 246.95 129.749 246.95 128.186C246.95 126.623 245.684 125.356 244.121 125.356C242.558 125.356 241.291 126.623 241.291 128.186C241.291 129.749 242.558 131.016 244.121 131.016Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1224\"\n              opacity=\"0.999\"\n              d=\"M275.99 182.961C277.553 182.961 278.82 181.694 278.82 180.131C278.82 178.569 277.553 177.302 275.99 177.302C274.427 177.302 273.16 178.569 273.16 180.131C273.16 181.694 274.427 182.961 275.99 182.961Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1226\"\n              opacity=\"0.999\"\n              d=\"M247.234 235.572C248.797 235.572 250.064 234.305 250.064 232.742C250.064 231.179 248.797 229.913 247.234 229.913C245.671 229.913 244.404 231.179 244.404 232.742C244.404 234.305 245.671 235.572 247.234 235.572Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1228\"\n              opacity=\"0.999\"\n              d=\"M186.654 237.367C188.217 237.367 189.484 236.1 189.484 234.538C189.484 232.975 188.217 231.708 186.654 231.708C185.091 231.708 183.824 232.975 183.824 234.538C183.824 236.1 185.091 237.367 186.654 237.367Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1230\"\n              opacity=\"0.999\"\n              d=\"M156.537 185.837C158.1 185.837 159.366 184.57 159.366 183.007C159.366 181.444 158.1 180.177 156.537 180.177C154.974 180.177 153.707 181.444 153.707 183.007C153.707 184.57 154.974 185.837 156.537 185.837Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1232\"\n              opacity=\"0.999\"\n              d=\"M276.083 91.7746C277.367 91.7746 278.409 90.733 278.409 89.448C278.409 88.163 277.367 87.1213 276.083 87.1213C274.798 87.1213 273.756 88.163 273.756 89.448C273.756 90.733 274.798 91.7746 276.083 91.7746Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1234\"\n              opacity=\"0.999\"\n              d=\"M215.276 84.8323C216.561 84.8323 217.603 83.7906 217.603 82.5056C217.603 81.2206 216.561 80.179 215.276 80.179C213.991 80.179 212.949 81.2206 212.949 82.5056C212.949 83.7906 213.991 84.8323 215.276 84.8323Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1236\"\n              opacity=\"0.999\"\n              d=\"M154.182 95.094C155.467 95.094 156.509 94.0523 156.509 92.7673C156.509 91.4823 155.467 90.4407 154.182 90.4407C152.897 90.4407 151.855 91.4823 151.855 92.7673C151.855 94.0523 152.897 95.094 154.182 95.094Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1238\"\n              opacity=\"0.999\"\n              d=\"M137.401 140.278C138.686 140.278 139.728 139.236 139.728 137.951C139.728 136.666 138.686 135.625 137.401 135.625C136.116 135.625 135.074 136.666 135.074 137.951C135.074 139.236 136.116 140.278 137.401 140.278Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1240\"\n              opacity=\"0.999\"\n              d=\"M109.581 179.756C110.866 179.756 111.907 178.714 111.907 177.429C111.907 176.144 110.866 175.102 109.581 175.102C108.296 175.102 107.254 176.144 107.254 177.429C107.254 178.714 108.296 179.756 109.581 179.756Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1242\"\n              opacity=\"0.999\"\n              d=\"M131.739 234.711C133.024 234.711 134.065 233.669 134.065 232.384C134.065 231.099 133.024 230.058 131.739 230.058C130.454 230.058 129.412 231.099 129.412 232.384C129.412 233.669 130.454 234.711 131.739 234.711Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1244\"\n              opacity=\"0.999\"\n              d=\"M170.129 282.905C171.414 282.905 172.456 281.863 172.456 280.578C172.456 279.293 171.414 278.252 170.129 278.252C168.844 278.252 167.803 279.293 167.803 280.578C167.803 281.863 168.844 282.905 170.129 282.905Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1246\"\n              opacity=\"0.999\"\n              d=\"M221.92 310.161C223.205 310.161 224.247 309.119 224.247 307.834C224.247 306.549 223.205 305.508 221.92 305.508C220.635 305.508 219.594 306.549 219.594 307.834C219.594 309.119 220.635 310.161 221.92 310.161Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1248\"\n              opacity=\"0.999\"\n              d=\"M218.346 274.132C219.631 274.132 220.673 273.09 220.673 271.805C220.673 270.52 219.631 269.478 218.346 269.478C217.061 269.478 216.02 270.52 216.02 271.805C216.02 273.09 217.061 274.132 218.346 274.132Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1250\"\n              opacity=\"0.999\"\n              d=\"M267.791 279.681C269.076 279.681 270.118 278.639 270.118 277.354C270.118 276.069 269.076 275.028 267.791 275.028C266.507 275.028 265.465 276.069 265.465 277.354C265.465 278.639 266.507 279.681 267.791 279.681Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1252\"\n              opacity=\"0.999\"\n              d=\"M303.223 232.103C304.508 232.103 305.55 231.062 305.55 229.777C305.55 228.492 304.508 227.45 303.223 227.45C301.938 227.45 300.896 228.492 300.896 229.777C300.896 231.062 301.938 232.103 303.223 232.103Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1254\"\n              opacity=\"0.999\"\n              d=\"M326.61 174.422C327.895 174.422 328.936 173.381 328.936 172.096C328.936 170.811 327.895 169.769 326.61 169.769C325.325 169.769 324.283 170.811 324.283 172.096C324.283 173.381 325.325 174.422 326.61 174.422Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1256\"\n              opacity=\"0.999\"\n              d=\"M325.151 119.338C326.436 119.338 327.478 118.296 327.478 117.011C327.478 115.726 326.436 114.685 325.151 114.685C323.866 114.685 322.824 115.726 322.824 117.011C322.824 118.296 323.866 119.338 325.151 119.338Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1260\"\n              opacity=\"0.999\"\n              d=\"M358.497 161.725C359.505 161.725 360.321 160.908 360.321 159.901C360.321 158.894 359.505 158.077 358.497 158.077C357.49 158.077 356.674 158.894 356.674 159.901C356.674 160.908 357.49 161.725 358.497 161.725Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1262\"\n              opacity=\"0.999\"\n              d=\"M367.587 154.638C368.594 154.638 369.411 153.822 369.411 152.815C369.411 151.808 368.594 150.991 367.587 150.991C366.58 150.991 365.764 151.808 365.764 152.815C365.764 153.822 366.58 154.638 367.587 154.638Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1264\"\n              opacity=\"0.999\"\n              d=\"M347.382 109.686C348.389 109.686 349.206 108.869 349.206 107.862C349.206 106.855 348.389 106.039 347.382 106.039C346.375 106.039 345.559 106.855 345.559 107.862C345.559 108.869 346.375 109.686 347.382 109.686Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1266\"\n              opacity=\"0.999\"\n              d=\"M302.841 71.1536C303.848 71.1536 304.665 70.3371 304.665 69.33C304.665 68.3228 303.848 67.5063 302.841 67.5063C301.834 67.5063 301.018 68.3228 301.018 69.33C301.018 70.3371 301.834 71.1536 302.841 71.1536Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1268\"\n              opacity=\"0.999\"\n              d=\"M317.165 71.6377C318.173 71.6377 318.989 70.8212 318.989 69.8141C318.989 68.8069 318.173 67.9905 317.165 67.9905C316.158 67.9905 315.342 68.8069 315.342 69.8141C315.342 70.8212 316.158 71.6377 317.165 71.6377Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1270\"\n              opacity=\"0.999\"\n              d=\"M267.585 43.6392C268.592 43.6392 269.409 42.8227 269.409 41.8156C269.409 40.8084 268.592 39.9919 267.585 39.9919C266.578 39.9919 265.762 40.8084 265.762 41.8156C265.762 42.8227 266.578 43.6392 267.585 43.6392Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1272\"\n              opacity=\"0.999\"\n              d=\"M246.802 53.7727C247.809 53.7727 248.626 52.9562 248.626 51.9491C248.626 50.9419 247.809 50.1255 246.802 50.1255C245.795 50.1255 244.979 50.9419 244.979 51.9491C244.979 52.9562 245.795 53.7727 246.802 53.7727Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1274\"\n              opacity=\"0.999\"\n              d=\"M216.546 38.9741C217.553 38.9741 218.37 38.1577 218.37 37.1505C218.37 36.1434 217.553 35.3269 216.546 35.3269C215.539 35.3269 214.723 36.1434 214.723 37.1505C214.723 38.1577 215.539 38.9741 216.546 38.9741Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1276\"\n              opacity=\"0.999\"\n              d=\"M187.476 55.8042C188.483 55.8042 189.3 54.9877 189.3 53.9806C189.3 52.9734 188.483 52.157 187.476 52.157C186.469 52.157 185.652 52.9734 185.652 53.9806C185.652 54.9877 186.469 55.8042 187.476 55.8042Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1278\"\n              opacity=\"0.999\"\n              d=\"M170.244 46.4959C171.251 46.4959 172.067 45.6794 172.067 44.6722C172.067 43.6651 171.251 42.8486 170.244 42.8486C169.236 42.8486 168.42 43.6651 168.42 44.6722C168.42 45.6794 169.236 46.4959 170.244 46.4959Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1280\"\n              opacity=\"0.999\"\n              d=\"M132.39 75.9985C133.397 75.9985 134.214 75.1821 134.214 74.1749C134.214 73.1678 133.397 72.3513 132.39 72.3513C131.383 72.3513 130.566 73.1678 130.566 74.1749C130.566 75.1821 131.383 75.9985 132.39 75.9985Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1282\"\n              opacity=\"0.999\"\n              d=\"M123.818 75.7083C124.825 75.7083 125.641 74.8918 125.641 73.8846C125.641 72.8775 124.825 72.061 123.818 72.061C122.811 72.061 121.994 72.8775 121.994 73.8846C121.994 74.8918 122.811 75.7083 123.818 75.7083Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1284\"\n              opacity=\"0.999\"\n              d=\"M109.646 124.039C110.653 124.039 111.469 123.223 111.469 122.215C111.469 121.208 110.653 120.392 109.646 120.392C108.639 120.392 107.822 121.208 107.822 122.215C107.822 123.223 108.639 124.039 109.646 124.039Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1286\"\n              opacity=\"0.999\"\n              d=\"M92.9525 114.522C93.9597 114.522 94.7761 113.706 94.7761 112.699C94.7761 111.691 93.9597 110.875 92.9525 110.875C91.9454 110.875 91.1289 111.691 91.1289 112.699C91.1289 113.706 91.9454 114.522 92.9525 114.522Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1288\"\n              opacity=\"0.999\"\n              d=\"M77.5521 161.107C78.5593 161.107 79.3757 160.291 79.3757 159.284C79.3757 158.276 78.5593 157.46 77.5521 157.46C76.545 157.46 75.7285 158.276 75.7285 159.284C75.7285 160.291 76.545 161.107 77.5521 161.107Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1290\"\n              opacity=\"0.999\"\n              d=\"M81.2963 169.814C82.3034 169.814 83.1199 168.997 83.1199 167.99C83.1199 166.983 82.3034 166.167 81.2963 166.167C80.2891 166.167 79.4727 166.983 79.4727 167.99C79.4727 168.997 80.2891 169.814 81.2963 169.814Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1292\"\n              opacity=\"0.999\"\n              d=\"M77.7064 216.671C78.7136 216.671 79.53 215.854 79.53 214.847C79.53 213.84 78.7136 213.023 77.7064 213.023C76.6993 213.023 75.8828 213.84 75.8828 214.847C75.8828 215.854 76.6993 216.671 77.7064 216.671Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1294\"\n              opacity=\"0.999\"\n              d=\"M93.3373 226.379C94.3444 226.379 95.1609 225.563 95.1609 224.556C95.1609 223.549 94.3444 222.732 93.3373 222.732C92.3301 222.732 91.5137 223.549 91.5137 224.556C91.5137 225.563 92.3301 226.379 93.3373 226.379Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1296\"\n              opacity=\"0.999\"\n              d=\"M96.7865 260.085C97.7937 260.085 98.6101 259.269 98.6101 258.262C98.6101 257.254 97.7937 256.438 96.7865 256.438C95.7793 256.438 94.9629 257.254 94.9629 258.262C94.9629 259.269 95.7793 260.085 96.7865 260.085Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1298\"\n              opacity=\"0.999\"\n              d=\"M123.367 277.686C124.374 277.686 125.19 276.87 125.19 275.863C125.19 274.856 124.374 274.039 123.367 274.039C122.359 274.039 121.543 274.856 121.543 275.863C121.543 276.87 122.359 277.686 123.367 277.686Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1300\"\n              opacity=\"0.999\"\n              d=\"M127.544 299.792C128.551 299.792 129.368 298.975 129.368 297.968C129.368 296.961 128.551 296.145 127.544 296.145C126.537 296.145 125.721 296.961 125.721 297.968C125.721 298.975 126.537 299.792 127.544 299.792Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1302\"\n              opacity=\"0.999\"\n              d=\"M170.04 316.411C171.048 316.411 171.864 315.595 171.864 314.588C171.864 313.58 171.048 312.764 170.04 312.764C169.033 312.764 168.217 313.58 168.217 314.588C168.217 315.595 169.033 316.411 170.04 316.411Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1304\"\n              opacity=\"0.999\"\n              d=\"M177.074 326.553C178.081 326.553 178.897 325.737 178.897 324.73C178.897 323.722 178.081 322.906 177.074 322.906C176.066 322.906 175.25 323.722 175.25 324.73C175.25 325.737 176.066 326.553 177.074 326.553Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1306\"\n              opacity=\"0.999\"\n              d=\"M224.527 332.527C225.534 332.527 226.35 331.711 226.35 330.704C226.35 329.697 225.534 328.88 224.527 328.88C223.52 328.88 222.703 329.697 222.703 330.704C222.703 331.711 223.52 332.527 224.527 332.527Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1308\"\n              opacity=\"0.999\"\n              d=\"M275.939 313.387C276.946 313.387 277.762 312.571 277.762 311.564C277.762 310.557 276.946 309.74 275.939 309.74C274.932 309.74 274.115 310.557 274.115 311.564C274.115 312.571 274.932 313.387 275.939 313.387Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1310\"\n              opacity=\"0.999\"\n              d=\"M274.73 324.39C275.737 324.39 276.553 323.573 276.553 322.566C276.553 321.559 275.737 320.742 274.73 320.742C273.723 320.742 272.906 321.559 272.906 322.566C272.906 323.573 273.723 324.39 274.73 324.39Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1312\"\n              opacity=\"0.999\"\n              d=\"M321.148 295.841C322.155 295.841 322.971 295.024 322.971 294.017C322.971 293.01 322.155 292.194 321.148 292.194C320.141 292.194 319.324 293.01 319.324 294.017C319.324 295.024 320.141 295.841 321.148 295.841Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1314\"\n              opacity=\"0.999\"\n              d=\"M318.314 272.067C319.321 272.067 320.137 271.25 320.137 270.243C320.137 269.236 319.321 268.42 318.314 268.42C317.307 268.42 316.49 269.236 316.49 270.243C316.49 271.25 317.307 272.067 318.314 272.067Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1316\"\n              opacity=\"0.999\"\n              d=\"M348.316 254.636C349.323 254.636 350.139 253.82 350.139 252.813C350.139 251.806 349.323 250.989 348.316 250.989C347.309 250.989 346.492 251.806 346.492 252.813C346.492 253.82 347.309 254.636 348.316 254.636Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1318\"\n              opacity=\"0.999\"\n              d=\"M351.736 256.708C352.743 256.708 353.559 255.891 353.559 254.884C353.559 253.877 352.743 253.06 351.736 253.06C350.729 253.06 349.912 253.877 349.912 254.884C349.912 255.891 350.729 256.708 351.736 256.708Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1320\"\n              opacity=\"0.999\"\n              d=\"M347.658 220.248C348.665 220.248 349.481 219.431 349.481 218.424C349.481 217.417 348.665 216.601 347.658 216.601C346.65 216.601 345.834 217.417 345.834 218.424C345.834 219.431 346.65 220.248 347.658 220.248Z\"\n              fill=\"white\"\n            />\n            <path\n              id=\"circle1322\"\n              opacity=\"0.999\"\n              d=\"M367.48 209.575C368.487 209.575 369.303 208.759 369.303 207.752C369.303 206.745 368.487 205.928 367.48 205.928C366.473 205.928 365.656 206.745 365.656 207.752C365.656 208.759 366.473 209.575 367.48 209.575Z\"\n              fill=\"white\"\n            />\n          </g>\n        </g>\n        <path\n          id=\"path1108\"\n          d=\"M348.323 252.813L351.742 254.884L348.323 252.813ZM367.484 207.752L347.664 218.424L303.229 229.777L318.32 270.243L321.155 294.017L367.484 207.752ZM367.593 152.815L358.502 159.901L326.616 172.096L275.996 180.132L215.589 181.451L156.539 183.007L367.593 152.815ZM293.277 135.624L325.154 117.011L347.386 107.862L293.277 135.624ZM224.532 330.704L275.945 311.564L321.155 294.017L348.323 252.813L367.484 207.752L358.502 159.901L347.386 107.862L302.847 69.3301L224.532 330.704ZM246.807 51.9493L276.085 89.4481L325.154 117.011L326.616 172.096L347.664 218.424L318.32 270.243L267.797 277.354L246.807 51.9493ZM267.797 277.354L247.239 232.742L303.229 229.777L275.996 180.132L293.277 135.624L244.124 128.186L276.085 89.4481L302.847 69.3301L267.797 277.354ZM246.807 51.9493L215.281 82.5058L244.124 128.186L215.589 181.451L247.239 232.742L218.351 271.805L246.807 51.9493ZM187.48 53.9807L215.281 82.5058L185.37 129.408L215.589 181.451L186.659 234.538L218.351 271.805L221.926 307.834L224.532 330.704L187.48 53.9807ZM123.825 73.8846L132.394 74.175L154.187 92.7678L185.37 129.408L137.408 137.952L109.652 122.216L154.187 92.7678L187.48 53.9807L123.825 73.8846ZM77.5566 159.284L81.3022 167.99L109.584 177.429L156.539 183.007L131.745 232.384L186.659 234.538L170.134 280.578L221.926 307.834L267.797 277.354L275.945 311.564L274.734 322.566L77.5566 159.284ZM92.9574 112.699L109.652 122.216L109.584 177.429L93.3426 224.556L131.745 232.384L123.369 275.863L127.552 297.968L170.047 314.588L224.532 330.704L92.9574 112.699ZM317.172 69.8142L302.847 69.3301L267.591 41.8153L246.807 51.9493L216.551 37.1506L187.48 53.9807L170.248 44.6725L132.394 74.175L92.9574 112.699L81.3022 167.99L77.7085 214.847L93.3426 224.556L96.7912 258.261L123.369 275.863L170.134 280.578L170.047 314.588L177.076 324.73L317.172 69.8142ZM186.659 234.538L156.539 183.007L185.37 129.408L244.124 128.186L275.996 180.132L247.239 232.742L186.659 234.538ZM154.187 92.7678L215.281 82.5058L276.085 89.4481L293.277 135.624L326.616 172.096L303.229 229.777L267.797 277.354L218.351 271.805L170.134 280.578L131.745 232.384L109.584 177.429L137.408 137.952L154.187 92.7678ZM81.3022 167.99L109.652 122.216L132.394 74.175L187.48 53.9807L246.807 51.9493L302.847 69.3301L325.154 117.011L358.502 159.901L347.664 218.424L348.323 252.813L318.32 270.243L275.945 311.564L221.926 307.834L170.047 314.588L123.369 275.863L93.3426 224.556L81.3022 167.99ZM170.248 44.6725L216.551 37.1506L267.591 41.8153L317.172 69.8142L347.386 107.862L367.593 152.815L367.484 207.752L351.742 254.884L321.155 294.017L274.734 322.566L224.532 330.704L177.076 324.73L127.552 297.968L96.7912 258.261L77.7085 214.847L77.5566 159.284L92.9574 112.699L123.825 73.8846L170.248 44.6725Z\"\n          stroke=\"white\"\n          strokeOpacity=\"0.3\"\n          strokeWidth=\"0.999999\"\n        />\n      </g>\n    </svg>\n  );\n};\n\nexport default Globe;\n","import * as React from 'react';\nimport Globe from '../images/globe';\nimport { Waypoint } from 'react-waypoint';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n    faShoePrints,\n    faScaleBalanced\n  } from '@fortawesome/free-solid-svg-icons'\n\nconst FootprintSection = ({highlightAnimation}) => {\n    return (\n        <Waypoint onEnter={() => highlightAnimation(\"highlightFootprint\")} onLeave={() => highlightAnimation(\"highlightFootprint\")}>\n            <div id=\"globalFootprint\" className=\"footprint-container\">\n                <div className=\"footprint-container-sub\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-12 text-center\">\n                                <h2 className=\"highlight-heading\"><span id=\"highlightFootprint\"></span>Global Footprint</h2>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-lg-6\">\n                                <div className=\"footprint-image\">\n                                    <div className=\"footprint-image-container\">\n                                        <Globe />\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"col-lg-6\">\n                                <div className=\"footprint-panel footprint-content\">\n                                    <p><span><FontAwesomeIcon icon={faShoePrints} /></span>US - We work directly with clients in Santa Clara, Silicon Valley and on the East Coast some of the coolest tech hubs such as Boston.</p>\n                                    <p><span><FontAwesomeIcon icon={faShoePrints} /></span>Europe - This is where it all started for us and is our bread and butter.</p>\n                                    <p><span><FontAwesomeIcon icon={faShoePrints} /></span>The Middle East - The most exciting current emerging tech hub globally. Our Director James has travelled far and wide in particular Saudi Arabia and UAE and we are very excited to watch this space as well as the rest of the world.</p>\n                                    <p><span><FontAwesomeIcon icon={faShoePrints} /></span>APAC - We have covered very exciting projects in Japan, Singapore and Australia, every market is challenging but we know our industry well.</p>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <div className=\"col-12 text-center\">\n                                <div className=\"footprint-panel footprint-panel-alt\">\n                                    <p><span><FontAwesomeIcon icon={faScaleBalanced} /></span>Osiris can offer corporate legal advice to clients wishing to open up companies in Saudi and the Gulf.</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </Waypoint>\n    )\n}\n\nexport default FootprintSection;","import * as React from 'react'\nimport { Waypoint } from 'react-waypoint'\n\nconst CtaSection = ({highlightAnimation}) => {\n    return(\n        <Waypoint onEnter={() => highlightAnimation(\"highlightCta\")} onLeave={() => highlightAnimation(\"highlightCta\")}>\n            <div id=\"osirisAi\" className=\"container platform-container\">\n                <div className=\"row\">\n                    <div className=\"col-12 text-center\">\n                        <h2 className=\"highlight-heading\"><span id=\"highlightCta\"></span>Osiris AI - Coming Soon</h2>\n                        <p className=\"text-accent mb-4 pb-2\">Please register your interest for Osiris AI.</p>\n                        <a className=\"btn btn-content\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSdkPeYj4JstQt2cAG3fwn9ImuaBSOgSBcAF0Tf64w8Nrmk7LQ/viewform?usp=sf_link\" target=\"_blank\" rel=\"noreferrer\">Register Interest</a>\n                    </div>\n                </div>\n            </div>\n        </Waypoint>\n    )\n}\n\nexport default CtaSection","import * as React from 'react'\nimport { Waypoint } from 'react-waypoint'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faLinkedin,\n  faTwitterSquare,\n  faFacebookSquare\n} from '@fortawesome/free-brands-svg-icons'\nimport {\n    faEarthEurope,\n    faEarthAmericas,\n  } from '@fortawesome/free-solid-svg-icons'\n\nconst ContactSection = ({highlightAnimation}) => {\n    return(\n        <div id=\"contact\" className=\"contact-container\">\n            <Waypoint onEnter={() => highlightAnimation(\"highlightContact\")} onLeave={() => highlightAnimation(\"highlightContact\")}>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-12 text-center\">\n                            <h2 className=\"highlight-heading\"><span id=\"highlightContact\"></span>Contact Us</h2>\n                        </div>\n                    </div>\n                    <div className=\"row contact-info-main\">\n                        <div className=\"col-lg-4\">\n                            <a href=\"mailto:info@osirisresources.com\"><h5>info[@]osirisresources.com</h5></a>\n                        </div>\n                        <div className=\"col-lg-4 text-center social-footer\">\n                            {/* <a href=\"/\">\n                                <FontAwesomeIcon icon={faFacebookSquare} />\n                            </a> */}\n                            <a href=\"https://www.linkedin.com/company/osiris-resources-consultancy/\" target=\"_blank\" rel=\"noreferrer\">\n                                <FontAwesomeIcon icon={faLinkedin} />\n                            </a>\n                            <a href=\"https://twitter.com/osirisresource\" target=\"_blank\" rel=\"noreferrer\">\n                                <FontAwesomeIcon icon={faTwitterSquare} />\n                            </a>\n                        </div>\n                        <div className=\"col-lg-4 text-end\">\n                            <a className=\"btn btn-content\" href=\"mailto:info@osirisresources.com\">Send Us A Message</a>\n                        </div>\n                    </div>\n                    {/* <div className=\"row\">\n                        <div className=\"col-12 text-center\">\n                            <hr className=\"divider-long\"></hr>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-md-4\">\n                            <div className=\"address-container\">\n                                <a href=\"tel:+441179410523\"><h5><FontAwesomeIcon icon={faEarthEurope} /> +44 (0) 117 941 0523</h5></a>\n                                <h6 className=\"mt-4\">Osiris Resources</h6>\n                                <h6>Bristol</h6>\n                                <h6>United Kingdom</h6>\n                            </div>\n                        </div>\n                        <div className=\"col-md-4\">\n                            <div className=\"address-container\">\n                                <a href=\"tel:+441179410523\"><h5><FontAwesomeIcon icon={faEarthEurope} /> +44 (0) 117 941 0523</h5></a>\n                                <h6 className=\"mt-4\">Osiris Resources</h6>\n                                <h6>Barcelona</h6>\n                                <h6>España</h6>\n                            </div>\n                        </div>\n                        <div className=\"col-md-4\">\n                            <div className=\"address-container\">\n                                <a href=\"tel:+441179410523\"><h5><FontAwesomeIcon icon={faEarthAmericas} /> +44 (0) 117 941 0523</h5></a>\n                                <h6 className=\"mt-4\">Osiris Resources</h6>\n                                <h6>New York</h6>\n                                <h6>United States</h6>\n                            </div>\n                        </div>\n                    </div> */}\n                </div>\n            </Waypoint>\n        </div>\n    )\n}\n\nexport default ContactSection","import * as React from 'react';\n\nconst PartnersSection = () => {\n    return (\n        <div className=\"partners\">\n            <div className=\"container-fluid\">\n                <div className=\"row partner-box-container\">\n                    <div className=\"partner-box\">\n                        <h6>Alef Inc</h6>\n                    </div>\n                    <div className=\"partner-box\">\n                        <h6>Arista Networks</h6>\n                    </div>\n                    <div className=\"partner-box\">\n                        <h6>Blu Wireless</h6>\n                    </div>\n                    <div className=\"partner-box\">\n                        <h6>Docker</h6>\n                    </div>\n                    <div className=\"partner-box\">\n                        <h6>NetMinded</h6>\n                    </div>\n                    <div className=\"partner-box\">\n                        <h6>University of Bristol</h6>\n                    </div>\n                    <div className=\"partner-box\">\n                        <h6>University of Surrey</h6>\n                    </div>\n                    <div className=\"partner-box\">\n                        <h6>Veea Systems</h6>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PartnersSection;","import * as React from 'react';\nimport { Waypoint } from 'react-waypoint';\n\nconst HeroSection = ({setIsHero, scrollTo}) => {\n    return (\n        <Waypoint onEnter={() => setIsHero(true)} onLeave={() => setIsHero(false)}>\n            <div className=\"hero-container\">\n                <div className=\"hero-container-sub\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-lg-6 order-lg-2\">\n                                <div className=\"hero-image\">\n                                    <div className=\"hero-image-container\">\n                                        \n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"col-lg-6 order-lg-1\">\n                                <div className=\"hero-content\">\n                                    <h1>Data Driven Recruitment</h1>\n                                    <h3>Osiris Resources delivers <span>global recruitment programs</span> across <span>Artificial Intelligence (AI)</span>, <span>Telecommunications</span>, and <span>Quantum Computing</span> — helping <span>companies scale</span> in today’s most advanced technology sectors.</h3>\n                                    <div className=\"hero-cta\">\n                                        <a className=\"btn\" href=\"javascript:void(0)\" onClick={(e) => scrollTo(e, \"about\")}>Find Out More</a>\n                                        <a className=\"btn hero-btn-last\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSdkPeYj4JstQt2cAG3fwn9ImuaBSOgSBcAF0Tf64w8Nrmk7LQ/viewform?usp=sf_link\" target=\"_blank\" rel=\"noreferrer\">Register Interest</a>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <video autoPlay muted loop id=\"bgVideo\">\n                    <source src=\"Osiris_Video.mp4\" type=\"video/mp4\" />\n                </video>\n            </div>\n        </Waypoint>\n    )\n}\n\nexport default HeroSection;","import * as React from 'react';\n\nconst AiImage = () => {\n    return (\n        <svg width=\"329\" height=\"290\" viewBox=\"0 0 329 290\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <g id=\"AI\">\n            <path id=\"Background\" d=\"M204 40L301.729 87.0638L325.866 192.815L258.235 277.621H149.765L82.134 192.815L106.271 87.0638L204 40Z\" fill=\"#99FAE8\"/>\n            <g id=\"ForegroundAI\">\n            <g id=\"g2496\">\n            <g id=\"container-id1\">\n            <g id=\"Clip path group\">\n            <g id=\"id1\">\n            <g id=\"g2492\">\n            <g id=\"g1741\">\n            <g id=\"id4\">\n            <path id=\"path1738 (Stroke)\" d=\"M189.305 11.1934C189.305 9.56722 188.08 8.34473 186.438 8.34473C184.804 8.34476 183.59 9.55932 183.59 11.1934C183.59 12.8354 184.812 14.0595 186.438 14.0596C188.073 14.0596 189.305 12.8275 189.305 11.1934ZM192.314 11.1934C192.314 14.4898 189.735 17.0693 186.438 17.0693C183.134 17.0693 180.58 14.4819 180.58 11.1934C180.58 7.89694 183.142 5.335 186.438 5.33496C189.727 5.33496 192.314 7.88901 192.314 11.1934Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1748\">\n            <g id=\"id5\">\n            <path id=\"path1745 (Stroke)\" d=\"M198.344 122.219C198.344 120.593 197.12 119.37 195.478 119.37C193.844 119.37 192.629 120.585 192.629 122.219C192.629 123.861 193.851 125.085 195.478 125.085C197.112 125.085 198.344 123.853 198.344 122.219ZM201.354 122.219C201.354 125.515 198.774 128.095 195.478 128.095C192.173 128.095 189.619 125.507 189.619 122.219C189.619 118.922 192.181 116.36 195.478 116.36C198.766 116.36 201.353 118.914 201.354 122.219Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1755\">\n            <g id=\"id6\">\n            <path id=\"path1752 (Stroke)\" d=\"M182.101 9.72363V12.7334H173.447V65.2188H210.006C210.837 65.2189 211.511 65.8925 211.511 66.7236V122.254C211.511 123.085 210.837 123.759 210.006 123.759H199.865V120.749H208.501V68.2285H171.942C171.111 68.2285 170.438 67.5548 170.438 66.7236V11.2285L170.445 11.0742C170.523 10.3155 171.163 9.72363 171.942 9.72363H182.101Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1762\">\n            <g id=\"id7\">\n            <path id=\"path1759 (Stroke)\" d=\"M62.8926 68.9263C62.8925 67.3001 61.6684 66.0776 60.0264 66.0776C58.3923 66.0777 57.1778 67.2922 57.1777 68.9263C57.1777 70.5683 58.4002 71.7924 60.0264 71.7925C61.6605 71.7925 62.8926 70.5604 62.8926 68.9263ZM65.9023 68.9263C65.9023 72.2227 63.3228 74.8022 60.0264 74.8022C56.722 74.8022 54.168 72.2148 54.168 68.9263C54.168 65.6299 56.73 63.0679 60.0264 63.0679C63.3149 63.0679 65.9023 65.6219 65.9023 68.9263Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1769\">\n            <g id=\"id8\">\n            <path id=\"path1766 (Stroke)\" d=\"M18.7793 69.084C18.7793 67.4578 17.5551 66.2354 15.9131 66.2354C14.279 66.2354 13.0645 67.4499 13.0645 69.084C13.0645 70.726 14.2869 71.9502 15.9131 71.9502C17.5472 71.9502 18.7793 70.7181 18.7793 69.084ZM21.7891 69.084C21.7891 72.3805 19.2096 74.96 15.9131 74.96C12.6087 74.9599 10.0547 72.3725 10.0547 69.084C10.0547 65.7876 12.6167 63.2256 15.9131 63.2256C19.2016 63.2256 21.789 65.7796 21.7891 69.084Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1776\">\n            <g id=\"id9\">\n            <path id=\"path1773 (Stroke)\" d=\"M55.6982 70.4492L20.3105 70.624L20.2949 67.6143L55.6836 67.4395L55.6982 70.4492Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1783\">\n            <g id=\"id10\">\n            <path id=\"path1780 (Stroke)\" d=\"M147.271 170.615C147.271 168.989 146.047 167.767 144.405 167.767C142.771 167.767 141.557 168.981 141.557 170.615C141.557 172.257 142.779 173.481 144.405 173.481C146.039 173.481 147.271 172.249 147.271 170.615ZM150.281 170.615C150.281 173.912 147.702 176.491 144.405 176.491C141.101 176.491 138.547 173.904 138.547 170.615C138.547 167.319 141.109 164.757 144.405 164.757C147.694 164.757 150.281 167.311 150.281 170.615Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1790\">\n            <g id=\"id11\">\n            <path id=\"path1787 (Stroke)\" d=\"M92.0566 171.227C92.0566 169.601 90.8324 168.378 89.1904 168.378C87.5564 168.378 86.3418 169.593 86.3418 171.227C86.3418 172.869 87.5643 174.093 89.1904 174.093C90.8245 174.093 92.0566 172.861 92.0566 171.227ZM95.0664 171.227C95.0664 174.524 92.4869 177.103 89.1904 177.103C85.8861 177.103 83.332 174.516 83.332 171.227C83.3321 167.931 85.894 165.369 89.1904 165.369C92.4789 165.369 95.0664 167.923 95.0664 171.227Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1797\">\n            <g id=\"id12\">\n            <path id=\"path1794 (Stroke)\" d=\"M140.09 172.138L93.5996 172.768L93.5586 169.758L140.05 169.128L140.09 172.138Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1804\">\n            <g id=\"id13\">\n            <path id=\"path1801 (Stroke)\" d=\"M175.522 234.506C178.565 233.275 181.936 234.654 183.163 237.732H183.164C184.403 240.794 182.98 244.134 179.923 245.372L179.924 245.373C176.865 246.62 173.531 245.161 172.297 242.135L172.296 242.131C171.06 239.076 172.473 235.73 175.522 234.507V234.506ZM180.37 238.852C179.776 237.356 178.185 236.676 176.65 237.297L176.646 237.299C175.153 237.896 174.471 239.476 175.085 240.998L175.212 241.272C175.903 242.596 177.394 243.153 178.788 242.585L178.791 242.584L179.066 242.457C180.393 241.77 180.949 240.284 180.373 238.861L180.37 238.852Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1811\">\n            <g id=\"id14\">\n            <path id=\"path1808 (Stroke)\" d=\"M151.988 180.042C155.032 178.811 158.402 180.191 159.63 183.269H159.631C160.87 186.331 159.446 189.67 156.39 190.909L156.391 190.91C153.332 192.156 149.998 190.698 148.764 187.671L148.763 187.667C147.527 184.612 148.94 181.267 151.988 180.043V180.042ZM156.837 184.388C156.243 182.892 154.652 182.213 153.117 182.834L153.112 182.835C151.62 183.432 150.938 185.012 151.552 186.535L151.679 186.809C152.37 188.133 153.861 188.69 155.255 188.122L155.258 188.121L155.533 187.994C156.859 187.306 157.416 185.821 156.84 184.398L156.837 184.388Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1818\">\n            <g id=\"id15\">\n            <path id=\"path1815 (Stroke)\" d=\"M176.958 234.004L174.201 235.211L154.479 190.154L157.236 188.947L176.958 234.004Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1825\">\n            <g id=\"id16\">\n            <path id=\"path1822 (Stroke)\" d=\"M160.438 24.5166C160.437 22.8905 159.213 21.668 157.571 21.668C155.937 21.668 154.723 22.8826 154.723 24.5166C154.723 26.1586 155.945 27.3828 157.571 27.3828C159.205 27.3828 160.438 26.1507 160.438 24.5166ZM163.447 24.5166C163.447 27.8131 160.868 30.3926 157.571 30.3926C154.267 30.3925 151.713 27.8051 151.713 24.5166C151.713 21.2202 154.275 18.6582 157.571 18.6582C160.86 18.6582 163.447 21.2122 163.447 24.5166Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1832\">\n            <g id=\"id17\">\n            <path id=\"path1829 (Stroke)\" d=\"M96.043 37.5591C96.0429 35.9329 94.8188 34.7104 93.1768 34.7104C91.5427 34.7105 90.3282 35.925 90.3281 37.5591C90.3281 39.2011 91.5506 40.4253 93.1768 40.4253C94.8109 40.4253 96.043 39.1932 96.043 37.5591ZM99.0527 37.5591C99.0527 40.8556 96.4732 43.4351 93.1768 43.4351C89.8724 43.435 87.3184 40.8476 87.3184 37.5591C87.3184 34.2627 89.8803 31.7007 93.1768 31.7007C96.4653 31.7007 99.0527 34.2547 99.0527 37.5591Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1839\">\n            <g id=\"id18\">\n            <path id=\"path1836 (Stroke)\" d=\"M153.234 23.0464V26.0562H126.904V37.5942C126.904 38.4254 126.231 39.0991 125.399 39.0991H97.5645V36.0894H123.895V24.5513L123.902 24.397C123.98 23.6383 124.62 23.0464 125.399 23.0464H153.234Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1846\">\n            <g id=\"id19\">\n            <path id=\"path1843 (Stroke)\" d=\"M72.4265 15.9913C75.0095 14.4096 78.2882 14.9903 80.1433 17.4161L80.3239 17.6651L80.3278 17.67L80.4958 17.9288C82.1533 20.6272 81.4232 24.0359 78.8034 25.8429C76.0796 27.7214 72.505 27.0233 70.6423 24.3224C70.6395 24.3183 70.6372 24.3138 70.6345 24.3097C68.7988 21.591 69.4268 18.0331 72.1687 16.1583L72.1706 16.1563L72.4265 15.9913ZM77.8425 19.3683C76.9189 18.0352 75.2161 17.7245 73.8649 18.6446C72.5203 19.5659 72.2041 21.2469 73.1237 22.6173C74.0592 23.9691 75.7633 24.2833 77.0944 23.3653C78.4462 22.433 78.7693 20.7247 77.8425 19.3692V19.3683Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1853\">\n            <g id=\"id20\">\n            <path id=\"path1850 (Stroke)\" d=\"M27.2468 47.7428C29.8298 46.1611 33.1085 46.7417 34.9636 49.1676L35.1442 49.4166L35.1482 49.4215L35.3161 49.6803C36.9736 52.3787 36.2435 55.7874 33.6237 57.5943C30.8999 59.4729 27.3253 58.7747 25.4626 56.0738C25.4598 56.0697 25.4576 56.0652 25.4548 56.0611C23.6192 53.3425 24.2471 49.7845 26.989 47.9098L26.9909 47.9078L27.2468 47.7428ZM32.6628 51.1197C31.7393 49.7867 30.0364 49.4759 28.6853 50.3961C27.3406 51.3174 27.0244 52.9984 27.944 54.3687C28.8795 55.7206 30.5837 56.0348 31.9148 55.1168C33.2665 54.1845 33.5896 52.4762 32.6628 51.1207V51.1197Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1860\">\n            <g id=\"id21\">\n            <path id=\"path1857 (Stroke)\" d=\"M71.6133 25.5L34.791 51.5518L33.0527 49.0947L69.875 23.043L71.6133 25.5Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1867\">\n            <g id=\"id22\">\n            <path id=\"path1864 (Stroke)\" d=\"M120.625 117.48C120.625 115.854 119.401 114.632 117.759 114.632C116.125 114.632 114.91 115.846 114.91 117.48C114.91 119.122 116.133 120.347 117.759 120.347C119.393 120.347 120.625 119.115 120.625 117.48ZM123.635 117.48C123.635 120.777 121.055 123.356 117.759 123.356C114.454 123.356 111.9 120.769 111.9 117.48C111.9 114.184 114.462 111.622 117.759 111.622C121.047 111.622 123.635 114.176 123.635 117.48Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1874\">\n            <g id=\"id23\">\n            <path id=\"path1871 (Stroke)\" d=\"M10.0566 117.935C10.0566 116.309 8.83244 115.086 7.19043 115.086C5.55639 115.086 4.34183 116.301 4.3418 117.935C4.3418 119.577 5.56429 120.801 7.19043 120.801C8.82452 120.801 10.0566 119.569 10.0566 117.935ZM13.0664 117.935C13.0664 121.232 10.4869 123.811 7.19043 123.811C3.88608 123.811 1.33203 121.224 1.33203 117.935C1.33207 114.639 3.89401 112.077 7.19043 112.077C10.4789 112.077 13.0664 114.631 13.0664 117.935Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1881\">\n            <g id=\"id24\">\n            <path id=\"path1878 (Stroke)\" d=\"M113.43 119.003L11.584 119.476L11.5703 116.465L113.416 115.993L113.43 119.003Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1888\">\n            <g id=\"id25\">\n            <path id=\"path1885 (Stroke)\" d=\"M113.807 144.423C113.807 142.797 112.582 141.575 110.94 141.575C109.306 141.575 108.092 142.789 108.092 144.423C108.092 146.065 109.314 147.29 110.94 147.29C112.575 147.29 113.807 146.057 113.807 144.423ZM116.816 144.423C116.816 147.72 114.237 150.299 110.94 150.299C107.636 150.299 105.082 147.712 105.082 144.423C105.082 141.127 107.644 138.565 110.94 138.565C114.229 138.565 116.816 141.119 116.816 144.423Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1895\">\n            <g id=\"id26\">\n            <path id=\"path1892 (Stroke)\" d=\"M27.8535 133.723C27.8535 132.097 26.6293 130.875 24.9873 130.875C23.3533 130.875 22.1387 132.089 22.1387 133.723C22.1387 135.365 23.3612 136.589 24.9873 136.589C26.6214 136.589 27.8535 135.357 27.8535 133.723ZM30.8633 133.723C30.8633 137.02 28.2838 139.599 24.9873 139.599C21.683 139.599 19.1289 137.012 19.1289 133.723C19.1289 130.427 21.6909 127.865 24.9873 127.865C28.2758 127.865 30.8632 130.419 30.8633 133.723Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1902\">\n            <g id=\"id27\">\n            <path id=\"path1899 (Stroke)\" d=\"M67.9824 132.253C68.8135 132.254 69.4873 132.927 69.4873 133.758V142.954H106.605V145.963H67.9824C67.1512 145.963 66.4775 145.29 66.4775 144.458V135.263H29.377V132.253H67.9824Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1909\">\n            <g id=\"id28\">\n            <path id=\"path1906 (Stroke)\" d=\"M9.61914 101.919C9.61906 100.301 8.40291 99.0879 6.75293 99.0879C5.12679 99.0879 3.9043 100.312 3.9043 101.954C3.90431 103.572 5.13815 104.803 6.78809 104.803C8.39844 104.803 9.61914 103.577 9.61914 101.919ZM12.6289 101.919C12.6289 105.191 10.1082 107.812 6.78809 107.812C3.50748 107.812 0.894544 105.266 0.894531 101.954C0.894531 98.6656 3.44858 96.0782 6.75293 96.0781C10.0334 96.0781 12.6288 98.6067 12.6289 101.919Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1916\">\n            <g id=\"id29\">\n            <path id=\"path1913 (Stroke)\" d=\"M9.61914 82.2495C9.61906 80.6314 8.40291 79.4185 6.75293 79.4185C5.12679 79.4185 3.9043 80.6427 3.9043 82.2847C3.90431 83.903 5.13815 85.1333 6.78809 85.1333C8.39844 85.1332 9.61914 83.9074 9.61914 82.2495ZM12.6289 82.2495C12.6289 85.5221 10.1082 88.143 6.78809 88.1431C3.50748 88.1431 0.894544 85.5969 0.894531 82.2847C0.894531 78.9962 3.44858 76.4087 6.75293 76.4087C10.0334 76.4087 12.6288 78.9373 12.6289 82.2495Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1923\">\n            <g id=\"id30\">\n            <path id=\"path1920 (Stroke)\" d=\"M8.29102 86.6606L8.25586 97.5884L5.24609 97.5786L5.28125 86.6509L8.29102 86.6606Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1930\">\n            <g id=\"id31\">\n            <path id=\"path1927 (Stroke)\" d=\"M198.221 101.919C198.221 100.301 197.004 99.0879 195.354 99.0879C193.728 99.0879 192.506 100.312 192.506 101.954C192.506 103.572 193.74 104.803 195.39 104.803C197 104.803 198.221 103.577 198.221 101.919ZM201.23 101.919C201.23 105.191 198.71 107.812 195.39 107.812C192.109 107.812 189.496 105.266 189.496 101.954C189.496 98.6656 192.05 96.0782 195.354 96.0781C198.635 96.0781 201.23 98.6067 201.23 101.919Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1937\">\n            <g id=\"id32\">\n            <path id=\"path1934 (Stroke)\" d=\"M198.221 82.2495C198.221 80.6314 197.004 79.4185 195.354 79.4185C193.728 79.4185 192.506 80.6427 192.506 82.2847C192.506 83.903 193.74 85.1333 195.39 85.1333C197 85.1332 198.221 83.9074 198.221 82.2495ZM201.23 82.2495C201.23 85.5221 198.71 88.143 195.39 88.1431C192.109 88.1431 189.496 85.5969 189.496 82.2847C189.496 78.9962 192.05 76.4087 195.354 76.4087C198.635 76.4087 201.23 78.9373 201.23 82.2495Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1944\">\n            <g id=\"id33\">\n            <path id=\"path1941 (Stroke)\" d=\"M196.895 86.6606L196.859 97.5884L193.85 97.5786L193.885 86.6509L196.895 86.6606Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1951\">\n            <g id=\"id34\">\n            <path id=\"path1948 (Stroke)\" d=\"M253.734 82.2495C253.734 80.6314 252.518 79.4185 250.868 79.4185C249.242 79.4185 248.02 80.6427 248.02 82.2847C248.02 83.903 249.253 85.1333 250.903 85.1333C252.514 85.1332 253.734 83.9074 253.734 82.2495ZM256.744 82.2495C256.744 85.5221 254.223 88.143 250.903 88.1431C247.623 88.1431 245.01 85.5969 245.01 82.2847C245.01 78.9962 247.564 76.4087 250.868 76.4087C254.149 76.4087 256.744 78.9373 256.744 82.2495Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1958\">\n            <g id=\"id35\">\n            <path id=\"path1955 (Stroke)\" d=\"M205.023 24.6562C205.023 23.0381 203.807 21.8252 202.157 21.8252C200.531 21.8252 199.309 23.0494 199.309 24.6914C199.309 26.3097 200.542 27.54 202.192 27.54C203.803 27.54 205.023 26.3142 205.023 24.6562ZM208.033 24.6562C208.033 27.9288 205.512 30.5497 202.192 30.5498C198.912 30.5498 196.299 28.0036 196.299 24.6914C196.299 21.4029 198.853 18.8155 202.157 18.8154C205.438 18.8154 208.033 21.344 208.033 24.6562Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1965\">\n            <g id=\"id36\">\n            <path id=\"path1962 (Stroke)\" d=\"M216.668 23.1689L216.839 23.1787C217.234 23.2237 217.597 23.4236 217.847 23.7383L252.046 66.8193C252.257 67.0854 252.372 67.4152 252.372 67.7549V77.9131H249.362V68.2793L215.941 26.1787H206.527V23.1689H216.668Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1972\">\n            <g id=\"id37\">\n            <path id=\"path1969 (Stroke)\" d=\"M251.514 195.495C251.514 193.877 250.297 192.664 248.647 192.664C247.021 192.664 245.799 193.888 245.799 195.53C245.799 197.149 247.033 198.379 248.683 198.379C250.293 198.379 251.514 197.153 251.514 195.495ZM254.523 195.495C254.523 198.768 252.003 201.389 248.683 201.389C245.402 201.389 242.789 198.842 242.789 195.53C242.789 192.242 245.343 189.654 248.647 189.654C251.928 189.654 254.523 192.183 254.523 195.495Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1979\">\n            <g id=\"id38\">\n            <path id=\"path1976 (Stroke)\" d=\"M218.205 168.849C218.205 167.231 216.989 166.018 215.339 166.018C213.713 166.018 212.49 167.242 212.49 168.884C212.49 170.503 213.724 171.733 215.374 171.733C216.984 171.733 218.205 170.507 218.205 168.849ZM221.215 168.849C221.215 172.122 218.694 174.743 215.374 174.743C212.093 174.743 209.48 172.197 209.48 168.884C209.48 165.596 212.035 163.008 215.339 163.008C218.619 163.008 221.215 165.537 221.215 168.849Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1986\">\n            <g id=\"id39\">\n            <path id=\"path1983 (Stroke)\" d=\"M229.852 167.362L229.96 167.366C230.211 167.384 230.455 167.465 230.668 167.602L249.464 179.737C249.893 180.014 250.152 180.49 250.152 181V191.159H247.143V181.82L229.407 170.372H219.711V167.362H229.852Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g1993\">\n            <g id=\"id40\">\n            <path id=\"path1990 (Stroke)\" d=\"M204.848 169.006C204.848 167.38 203.623 166.158 201.981 166.158C200.347 166.158 199.133 167.372 199.133 169.006C199.133 170.648 200.355 171.873 201.981 171.873C203.616 171.873 204.848 170.64 204.848 169.006ZM207.857 169.006C207.857 172.303 205.278 174.882 201.981 174.882C198.677 174.882 196.123 172.295 196.123 169.006C196.123 165.71 198.685 163.148 201.981 163.148C205.27 163.148 207.857 165.702 207.857 169.006Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2000\">\n            <g id=\"id41\">\n            <path id=\"path1997 (Stroke)\" d=\"M189.305 215.479C189.305 213.853 188.08 212.631 186.438 212.631C184.804 212.631 183.59 213.845 183.59 215.479C183.59 217.122 184.812 218.346 186.438 218.346C188.073 218.346 189.305 217.114 189.305 215.479ZM192.314 215.479C192.314 218.776 189.735 221.355 186.438 221.355C183.134 221.355 180.58 218.768 180.58 215.479C180.58 212.183 183.142 209.621 186.438 209.621C189.727 209.621 192.314 212.175 192.314 215.479Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2007\">\n            <g id=\"id42\">\n            <path id=\"path2004 (Stroke)\" d=\"M197.646 167.537V170.546H188.992V190.755H200.968C201.799 190.755 202.472 191.429 202.473 192.26V215.515C202.472 216.346 201.799 217.02 200.968 217.02H190.827V214.009H199.463V193.765H187.487C186.656 193.765 185.982 193.091 185.982 192.26V169.042L185.99 168.887C186.068 168.129 186.708 167.537 187.487 167.537H197.646Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2014\">\n            <g id=\"id43\">\n            <path id=\"path2011 (Stroke)\" d=\"M176.961 197.383C176.961 195.765 175.745 194.552 174.095 194.552C172.469 194.552 171.246 195.776 171.246 197.418C171.246 199.036 172.48 200.267 174.13 200.267C175.74 200.267 176.961 199.041 176.961 197.383ZM179.971 197.383C179.971 200.655 177.45 203.276 174.13 203.276C170.849 203.276 168.236 200.73 168.236 197.418C168.236 194.129 170.79 191.542 174.095 191.542C177.375 191.542 179.971 194.071 179.971 197.383Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2021\">\n            <g id=\"id44\">\n            <path id=\"path2018 (Stroke)\" d=\"M176.961 177.714C176.961 176.096 175.745 174.883 174.095 174.883C172.469 174.883 171.246 176.107 171.246 177.749C171.246 179.367 172.48 180.598 174.13 180.598C175.74 180.598 176.961 179.372 176.961 177.714ZM179.971 177.714C179.971 180.986 177.45 183.607 174.13 183.607C170.849 183.607 168.236 181.061 168.236 177.749C168.236 174.461 170.79 171.873 174.095 171.873C177.375 171.873 179.971 174.402 179.971 177.714Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2028\">\n            <g id=\"id45\">\n            <path id=\"path2025 (Stroke)\" d=\"M175.633 182.124L175.598 193.052L172.588 193.042L172.623 182.114L175.633 182.124Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2035\">\n            <g id=\"id46\">\n            <path id=\"path2032 (Stroke)\" d=\"M213.904 220.061C213.904 218.442 212.688 217.229 211.038 217.229C209.412 217.23 208.189 218.454 208.189 220.096C208.189 221.714 209.423 222.944 211.073 222.944C212.684 222.944 213.904 221.718 213.904 220.061ZM216.914 220.061C216.914 223.333 214.393 225.954 211.073 225.954C207.793 225.954 205.18 223.408 205.18 220.096C205.18 216.807 207.734 214.22 211.038 214.22C214.319 214.22 216.914 216.748 216.914 220.061Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2042\">\n            <g id=\"id47\">\n            <path id=\"path2039 (Stroke)\" d=\"M236.109 200.076C236.109 198.458 234.893 197.245 233.243 197.245C231.617 197.245 230.395 198.469 230.395 200.111C230.395 201.729 231.628 202.959 233.278 202.959C234.889 202.959 236.109 201.734 236.109 200.076ZM239.119 200.076C239.119 203.348 236.598 205.969 233.278 205.969C229.998 205.969 227.385 203.423 227.385 200.111C227.385 196.822 229.939 194.235 233.243 194.235C236.524 194.235 239.119 196.763 239.119 200.076Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2049\">\n            <g id=\"id48\">\n            <path id=\"path2046 (Stroke)\" d=\"M234.784 204.482V214.64C234.784 215.13 234.546 215.59 234.146 215.872L226.417 221.309C226.163 221.487 225.861 221.583 225.551 221.583H215.41V218.573H225.074L231.774 213.859V204.482H234.784Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2056\">\n            <g id=\"id49\">\n            <path id=\"path2053 (Stroke)\" d=\"M216.125 202.156C216.125 200.538 214.909 199.325 213.259 199.325C211.633 199.325 210.41 200.549 210.41 202.191C210.41 203.81 211.644 205.04 213.294 205.04C214.904 205.04 216.125 203.814 216.125 202.156ZM219.135 202.156C219.135 205.429 216.614 208.05 213.294 208.05C210.013 208.05 207.4 205.504 207.4 202.191C207.4 198.903 209.954 196.315 213.259 196.315C216.539 196.315 219.135 198.844 219.135 202.156Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2063\">\n            <g id=\"id50\">\n            <path id=\"path2060 (Stroke)\" d=\"M230.881 180.86C230.881 179.242 229.665 178.029 228.015 178.029C226.389 178.029 225.166 179.253 225.166 180.896C225.166 182.514 226.4 183.744 228.05 183.744C229.66 183.744 230.881 182.518 230.881 180.86ZM233.891 180.86C233.891 184.133 231.37 186.754 228.05 186.754C224.769 186.754 222.156 184.208 222.156 180.896C222.156 177.607 224.71 175.02 228.015 175.02C231.295 175.02 233.891 177.548 233.891 180.86Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2070\">\n            <g id=\"id51\">\n            <path id=\"path2067 (Stroke)\" d=\"M223.661 179.408V182.418H214.709L214.764 187.646V197.82H211.753V187.662H211.754L211.684 180.929C211.68 180.527 211.837 180.14 212.119 179.854C212.402 179.569 212.787 179.408 213.189 179.408H223.661Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2077\">\n            <g id=\"id52\">\n            <path id=\"path2074 (Stroke)\" d=\"M256.094 146.644C256.094 145.026 254.878 143.813 253.228 143.813C251.601 143.813 250.379 145.037 250.379 146.679C250.379 148.298 251.613 149.528 253.263 149.528C254.873 149.528 256.094 148.302 256.094 146.644ZM259.104 146.644C259.104 149.917 256.583 152.538 253.263 152.538C249.982 152.538 247.369 149.991 247.369 146.679C247.369 143.391 249.923 140.803 253.228 140.803C256.508 140.803 259.103 143.332 259.104 146.644Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2084\">\n            <g id=\"id53\">\n            <path id=\"path2081 (Stroke)\" d=\"M264.977 101.062C264.976 99.4443 263.76 98.2314 262.11 98.2314C260.484 98.2315 259.262 99.4556 259.262 101.098C259.262 102.716 260.496 103.946 262.146 103.946C263.756 103.946 264.977 102.72 264.977 101.062ZM267.986 101.062C267.986 104.335 265.466 106.956 262.146 106.956C258.865 106.956 256.252 104.41 256.252 101.098C256.252 97.8091 258.806 95.2217 262.11 95.2217C265.391 95.2217 267.986 97.7503 267.986 101.062Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2091\">\n            <g id=\"id54\">\n            <path id=\"path2088 (Stroke)\" d=\"M257.756 99.6099V102.62H254.665L254.732 132.146V142.308H251.722V132.153L251.652 101.118C251.652 100.718 251.81 100.334 252.092 100.051C252.374 99.7684 252.758 99.6099 253.157 99.6099H257.756Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2098\">\n            <g id=\"id55\">\n            <path id=\"path2095 (Stroke)\" d=\"M249.293 166.768C249.293 165.15 248.077 163.937 246.427 163.937C244.801 163.937 243.578 165.161 243.578 166.803C243.578 168.422 244.812 169.652 246.462 169.652C248.072 169.652 249.293 168.426 249.293 166.768ZM252.303 166.768C252.303 170.041 249.782 172.662 246.462 172.662C243.181 172.662 240.568 170.115 240.568 166.803C240.568 163.515 243.122 160.927 246.427 160.927C249.707 160.927 252.303 163.456 252.303 166.768Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2105\">\n            <g id=\"id56\">\n            <path id=\"path2102 (Stroke)\" d=\"M276.078 122.219C276.078 120.601 274.862 119.388 273.212 119.388C271.586 119.388 270.363 120.612 270.363 122.254C270.363 123.872 271.597 125.103 273.247 125.103C274.857 125.102 276.078 123.877 276.078 122.219ZM279.088 122.219C279.088 125.491 276.567 128.112 273.247 128.112C269.966 128.112 267.354 125.566 267.354 122.254C267.354 118.965 269.908 116.378 273.212 116.378C276.492 116.378 279.088 118.907 279.088 122.219Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2112\">\n            <g id=\"id57\">\n            <path id=\"path2109 (Stroke)\" d=\"M274.752 126.625V148.969C274.752 149.275 274.659 149.573 274.485 149.825L262.176 167.641C261.895 168.048 261.432 168.291 260.938 168.291H250.797V165.281H260.147L271.741 148.5V126.625H274.752Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2119\">\n            <g id=\"id58\">\n            <path id=\"path2116 (Stroke)\" d=\"M100.641 100.171C100.641 98.5448 99.4164 97.3223 97.7744 97.3223C96.1404 97.3223 94.9258 98.5369 94.9258 100.171C94.9258 101.813 96.1483 103.037 97.7744 103.037C99.4085 103.037 100.641 101.805 100.641 100.171ZM103.65 100.171C103.65 103.467 101.071 106.047 97.7744 106.047C94.4701 106.047 91.916 103.459 91.916 100.171C91.9161 96.8745 94.478 94.3125 97.7744 94.3125C101.063 94.3125 103.65 96.8665 103.65 100.171Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2126\">\n            <g id=\"id59\">\n            <path id=\"path2123 (Stroke)\" d=\"M88.5938 131.257C88.5937 129.631 87.3695 128.409 85.7275 128.409C84.0935 128.409 82.8789 129.623 82.8789 131.257C82.8789 132.899 84.1014 134.124 85.7275 134.124C87.3616 134.124 88.5938 132.891 88.5938 131.257ZM91.6035 131.257C91.6035 134.554 89.024 137.133 85.7275 137.133C82.4232 137.133 79.8691 134.546 79.8691 131.257C79.8692 127.961 82.4311 125.399 85.7275 125.399C89.016 125.399 91.6035 127.953 91.6035 131.257Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2133\">\n            <g id=\"id60\">\n            <path id=\"path2130 (Stroke)\" d=\"M133.251 98.7007C134.082 98.7007 134.756 99.3744 134.756 100.206V131.292C134.756 132.124 134.082 132.797 133.251 132.797H90.1172V129.788H131.746V101.71H102.164V98.7007H133.251Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2140\">\n            <g id=\"id61\">\n            <path id=\"path2137 (Stroke)\" d=\"M188.436 42.1222C191.748 42.1692 194.25 44.8079 194.204 48.089C194.157 51.3928 191.542 53.9032 188.254 53.8566C184.958 53.8098 182.423 51.2034 182.469 47.9064C182.516 44.6028 185.147 42.0756 188.436 42.1222ZM188.393 45.131C186.752 45.1078 185.501 46.3224 185.478 47.9494C185.455 49.5828 186.662 50.8236 188.297 50.8468C189.938 50.87 191.171 49.6727 191.194 48.046C191.217 46.3967 190.012 45.154 188.393 45.131Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2147\">\n            <g id=\"id62\">\n            <path id=\"path2144 (Stroke)\" d=\"M216.831 42.6295C220.142 42.6765 222.645 45.3152 222.598 48.5963C222.551 51.9001 219.937 54.4106 216.648 54.3639C213.352 54.3172 210.817 51.7107 210.864 48.4137C210.911 45.1102 213.542 42.5829 216.831 42.6295ZM216.788 45.6383C215.146 45.6152 213.896 46.8298 213.873 48.4567C213.85 50.0901 215.056 51.331 216.691 51.3542C218.333 51.3773 219.565 50.18 219.589 48.5534C219.612 46.904 218.407 45.6613 216.788 45.6383Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2154\">\n            <g id=\"id63\">\n            <path id=\"path2151 (Stroke)\" d=\"M212.412 46.9473L212.355 49.957L192.738 49.5898L192.795 46.5801L212.412 46.9473Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2161\">\n            <g id=\"id64\">\n            <path id=\"path2158 (Stroke)\" d=\"M227.229 106.675C227.228 105.057 226.012 103.844 224.362 103.844C222.736 103.844 221.514 105.068 221.514 106.71C221.514 108.329 222.748 109.559 224.397 109.559C226.008 109.559 227.229 108.333 227.229 106.675ZM230.238 106.675C230.238 109.948 227.718 112.569 224.397 112.569C221.117 112.569 218.504 110.023 218.504 106.71C218.504 103.422 221.058 100.835 224.362 100.834C227.643 100.834 230.238 103.363 230.238 106.675Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2168\">\n            <g id=\"id65\">\n            <path id=\"path2165 (Stroke)\" d=\"M229.447 66.7056C229.447 65.0874 228.231 63.8745 226.581 63.8745C224.955 63.8745 223.732 65.0987 223.732 66.7407C223.732 68.359 224.966 69.5894 226.616 69.5894C228.227 69.5893 229.447 68.3635 229.447 66.7056ZM232.457 66.7056C232.457 69.9781 229.936 72.5991 226.616 72.5991C223.336 72.5991 220.723 70.0529 220.723 66.7407C220.723 63.4522 223.277 60.8648 226.581 60.8647C229.862 60.8647 232.457 63.3933 232.457 66.7056Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2175\">\n            <g id=\"id66\">\n            <path id=\"path2172 (Stroke)\" d=\"M228.121 71.1123V92.8662L239.977 105.67C240.383 106.109 240.491 106.747 240.252 107.295C240.013 107.843 239.471 108.198 238.873 108.198H228.731V105.188H235.428L225.512 94.4795C225.254 94.2013 225.111 93.8361 225.111 93.457V71.1123H228.121Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2182\">\n            <g id=\"id67\">\n            <path id=\"path2179 (Stroke)\" d=\"M224.885 144.458C224.885 142.84 223.669 141.627 222.019 141.627C220.392 141.627 219.17 142.852 219.17 144.494C219.17 146.112 220.404 147.342 222.054 147.342C223.664 147.342 224.885 146.116 224.885 144.458ZM227.895 144.458C227.895 147.731 225.374 150.352 222.054 150.352C218.773 150.352 216.16 147.806 216.16 144.494C216.16 141.205 218.714 138.618 222.019 138.618C225.299 138.618 227.894 141.146 227.895 144.458Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2189\">\n            <g id=\"id68\">\n            <path id=\"path2186 (Stroke)\" d=\"M239.641 123.162C239.641 121.544 238.424 120.331 236.774 120.331C235.148 120.331 233.926 121.555 233.926 123.197C233.926 124.816 235.16 126.046 236.81 126.046C238.42 126.046 239.641 124.82 239.641 123.162ZM242.65 123.162C242.65 126.435 240.13 129.056 236.81 129.056C233.529 129.056 230.916 126.509 230.916 123.197C230.916 119.909 233.47 117.321 236.774 117.321C240.055 117.321 242.65 119.85 242.65 123.162Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2196\">\n            <g id=\"id69\">\n            <path id=\"path2193 (Stroke)\" d=\"M232.421 121.71V124.72H223.469L223.524 129.949V140.123H220.513V129.964H220.514L220.443 123.231C220.439 122.829 220.596 122.442 220.879 122.157C221.162 121.871 221.547 121.71 221.948 121.71H232.421Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2203\">\n            <g id=\"id70\">\n            <path id=\"path2200 (Stroke)\" d=\"M158.393 6.7522C158.392 5.13404 157.176 3.92114 155.526 3.92114C153.9 3.92118 152.678 5.14534 152.678 6.78735C152.678 8.40567 153.912 9.63599 155.562 9.63599C157.172 9.63593 158.393 8.41013 158.393 6.7522ZM161.402 6.7522C161.402 10.0248 158.882 12.6457 155.562 12.6458C152.281 12.6458 149.668 10.0996 149.668 6.78735C149.668 3.49884 152.222 0.911413 155.526 0.911377C158.807 0.911377 161.402 3.43995 161.402 6.7522Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2210\">\n            <g id=\"id71\">\n            <path id=\"path2207 (Stroke)\" d=\"M93.998 20.0757C93.998 18.4575 92.7818 17.2446 91.1318 17.2446C89.5057 17.2447 88.2832 18.4688 88.2832 20.1108C88.2832 21.7292 89.5171 22.9595 91.167 22.9595C92.7773 22.9594 93.998 21.7336 93.998 20.0757ZM97.0078 20.0757C97.0078 23.3482 94.4871 25.9692 91.167 25.9692C87.8864 25.9692 85.2735 23.4231 85.2734 20.1108C85.2734 16.8223 87.8275 14.2349 91.1318 14.2349C94.4123 14.2349 97.0077 16.7634 97.0078 20.0757Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2217\">\n            <g id=\"id72\">\n            <path id=\"path2214 (Stroke)\" d=\"M151.172 5.30029V8.31006H131.399L106.341 21.4263C106.125 21.539 105.886 21.5981 105.643 21.5981H95.502V18.5884H105.273L130.332 5.47217L130.498 5.39697C130.668 5.33294 130.848 5.30029 131.03 5.30029H151.172Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2224\">\n            <g id=\"id73\">\n            <path id=\"path2221 (Stroke)\" d=\"M131.605 144.423C131.605 142.805 130.389 141.592 128.739 141.592C127.113 141.592 125.891 142.816 125.891 144.458C125.891 146.076 127.124 147.307 128.774 147.307C130.385 147.307 131.605 146.081 131.605 144.423ZM134.615 144.423C134.615 147.695 132.095 150.316 128.774 150.316C125.494 150.316 122.881 147.77 122.881 144.458C122.881 141.169 125.435 138.582 128.739 138.582C132.02 138.582 134.615 141.111 134.615 144.423Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2231\">\n            <g id=\"id74\">\n            <path id=\"path2228 (Stroke)\" d=\"M69.7109 158.026C69.7109 156.408 68.4947 155.195 66.8447 155.195C65.2186 155.195 63.9961 156.42 63.9961 158.062C63.9961 159.68 65.2299 160.91 66.8799 160.91C68.4902 160.91 69.7109 159.684 69.7109 158.026ZM72.7207 158.026C72.7207 161.299 70.2 163.92 66.8799 163.92C63.5993 163.92 60.9863 161.374 60.9863 158.062C60.9863 154.773 63.5404 152.186 66.8447 152.186C70.1252 152.186 72.7206 154.714 72.7207 158.026Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2238\">\n            <g id=\"id75\">\n            <path id=\"path2235 (Stroke)\" d=\"M130.28 148.829V157.851C130.28 158.679 129.61 159.353 128.781 159.356L81.3643 159.548H71.2168V156.538H81.3516L127.271 156.352V148.829H130.28Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2245\">\n            <g id=\"id76\">\n            <path id=\"path2242 (Stroke)\" d=\"M233.751 140.003C236.046 137.815 239.522 137.816 241.831 140.028H241.832C244.217 142.296 244.313 145.923 242.043 148.31C239.775 150.695 236.13 150.791 233.743 148.521C231.359 146.254 231.263 142.608 233.532 140.222L233.751 140.003ZM239.752 142.204C238.569 141.067 236.85 141.1 235.713 142.295L235.714 142.296C234.592 143.476 234.636 145.216 235.818 146.34C236.998 147.462 238.737 147.418 239.862 146.236C240.983 145.056 240.94 143.334 239.758 142.21L239.752 142.204Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2252\">\n            <g id=\"id77\">\n            <path id=\"path2249 (Stroke)\" d=\"M147.148 155.666C147.148 154.048 145.932 152.835 144.282 152.835C142.656 152.835 141.434 154.059 141.434 155.701C141.434 157.319 142.667 158.55 144.317 158.55C145.928 158.55 147.148 157.324 147.148 155.666ZM150.158 155.666C150.158 158.939 147.637 161.56 144.317 161.56C141.037 161.56 138.424 159.013 138.424 155.701C138.424 152.413 140.978 149.825 144.282 149.825C147.563 149.825 150.158 152.354 150.158 155.666Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2259\">\n            <g id=\"id78\">\n            <path id=\"path2256 (Stroke)\" d=\"M235.859 148.534L227.571 156.751C227.289 157.031 226.909 157.188 226.512 157.188H148.654V154.178H225.892L233.739 146.397L235.859 148.534Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2266\">\n            <g id=\"id79\">\n            <path id=\"path2263 (Stroke)\" d=\"M147.289 133.006C147.289 131.388 146.073 130.175 144.423 130.175C142.797 130.175 141.574 131.399 141.574 133.042C141.574 134.66 142.808 135.89 144.458 135.89C146.068 135.89 147.289 134.664 147.289 133.006ZM150.299 133.006C150.299 136.279 147.778 138.9 144.458 138.9C141.177 138.9 138.564 136.354 138.564 133.042C138.564 129.753 141.118 127.166 144.423 127.166C147.703 127.166 150.299 129.694 150.299 133.006Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2273\">\n            <g id=\"id80\">\n            <path id=\"path2270 (Stroke)\" d=\"M147.148 73.5073C147.148 71.8892 145.932 70.6763 144.282 70.6763C142.656 70.6763 141.434 71.9005 141.434 73.5425C141.434 75.1608 142.667 76.3911 144.317 76.3911C145.928 76.3911 147.148 75.1653 147.148 73.5073ZM150.158 73.5073C150.158 76.7799 147.637 79.4008 144.317 79.4009C141.037 79.4009 138.424 76.8547 138.424 73.5425C138.424 70.254 140.978 67.6665 144.282 67.6665C147.563 67.6665 150.158 70.1951 150.158 73.5073Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2280\">\n            <g id=\"id81\">\n            <path id=\"path2277 (Stroke)\" d=\"M145.928 128.667L142.917 128.673L142.812 77.9165L145.822 77.9106L145.928 128.667Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2287\">\n            <g id=\"id82\">\n            <path id=\"path2284 (Stroke)\" d=\"M119.717 54.8862C119.717 53.2601 118.493 52.0376 116.851 52.0376C115.217 52.0376 114.002 53.2522 114.002 54.8862C114.002 56.5282 115.224 57.7524 116.851 57.7524C118.485 57.7524 119.717 56.5203 119.717 54.8862ZM122.727 54.8862C122.727 58.1827 120.147 60.7622 116.851 60.7622C113.546 60.7622 110.992 58.1747 110.992 54.8862C110.992 51.5898 113.554 49.0279 116.851 49.0278C120.139 49.0278 122.727 51.5819 122.727 54.8862Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2294\">\n            <g id=\"id83\">\n            <path id=\"path2291 (Stroke)\" d=\"M179.635 82.4067C179.635 80.7806 178.411 79.5581 176.769 79.5581C175.135 79.5581 173.92 80.7727 173.92 82.4067C173.92 84.0487 175.142 85.2729 176.769 85.2729C178.403 85.2729 179.635 84.0408 179.635 82.4067ZM182.645 82.4067C182.645 85.7032 180.065 88.2827 176.769 88.2827C173.464 88.2827 170.91 85.6952 170.91 82.4067C170.91 79.1103 173.472 76.5484 176.769 76.5483C180.057 76.5483 182.644 79.1024 182.645 82.4067Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2301\">\n            <g id=\"id84\">\n            <path id=\"path2298 (Stroke)\" d=\"M159.898 53.4165C160.729 53.4168 161.403 54.0904 161.403 54.9214V80.937H172.435V83.9468H159.898C159.067 83.9468 158.393 83.273 158.393 82.4419V56.4263H121.24V53.4165H159.898Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2308\">\n            <g id=\"id85\">\n            <path id=\"path2305 (Stroke)\" d=\"M160.473 100.153C160.473 98.5352 159.256 97.3223 157.606 97.3223C155.98 97.3223 154.758 98.5465 154.758 100.188C154.758 101.807 155.992 103.037 157.642 103.037C159.252 103.037 160.473 101.811 160.473 100.153ZM163.482 100.153C163.482 103.426 160.962 106.047 157.642 106.047C154.361 106.047 151.748 103.501 151.748 100.188C151.748 96.9 154.302 94.3125 157.606 94.3125C160.887 94.3125 163.482 96.8411 163.482 100.153Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2315\">\n            <g id=\"id86\">\n            <path id=\"path2312 (Stroke)\" d=\"M205.023 142.203C205.023 140.585 203.807 139.372 202.157 139.372C200.531 139.372 199.309 140.596 199.309 142.238C199.309 143.857 200.542 145.087 202.192 145.087C203.803 145.087 205.023 143.861 205.023 142.203ZM208.033 142.203C208.033 145.476 205.512 148.097 202.192 148.097C198.912 148.097 196.299 145.551 196.299 142.238C196.299 138.95 198.853 136.362 202.157 136.362C205.438 136.362 208.033 138.891 208.033 142.203Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2322\">\n            <g id=\"id87\">\n            <path id=\"path2319 (Stroke)\" d=\"M159.146 104.56V140.8L187.659 140.751H197.803V143.761H187.665L157.645 143.813C157.245 143.814 156.861 143.655 156.578 143.373C156.296 143.091 156.137 142.708 156.137 142.309V104.56H159.146Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2329\">\n            <g id=\"id88\">\n            <path id=\"path2326 (Stroke)\" d=\"M178.377 126.799C178.377 125.181 177.161 123.968 175.511 123.968C173.885 123.968 172.662 125.192 172.662 126.834C172.662 128.453 173.896 129.683 175.546 129.683C177.156 129.683 178.377 128.457 178.377 126.799ZM181.387 126.799C181.387 130.072 178.866 132.693 175.546 132.693C172.265 132.693 169.652 130.147 169.652 126.834C169.652 123.546 172.206 120.959 175.511 120.958C178.791 120.958 181.387 123.487 181.387 126.799Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2336\">\n            <g id=\"id89\">\n            <path id=\"path2333 (Stroke)\" d=\"M178.377 107.129C178.377 105.511 177.161 104.298 175.511 104.298C173.885 104.298 172.662 105.523 172.662 107.165C172.662 108.783 173.896 110.013 175.546 110.013C177.156 110.013 178.377 108.787 178.377 107.129ZM181.387 107.129C181.387 110.402 178.866 113.023 175.546 113.023C172.265 113.023 169.652 110.477 169.652 107.165C169.652 103.876 172.206 101.289 175.511 101.289C178.791 101.289 181.387 103.817 181.387 107.129Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2343\">\n            <g id=\"id90\">\n            <path id=\"path2340 (Stroke)\" d=\"M177.051 111.541L177.016 122.468L174.006 122.458L174.041 111.531L177.051 111.541Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2350\">\n            <g id=\"id91\">\n            <path id=\"path2347 (Stroke)\" d=\"M131.729 84.7847C131.728 83.1585 130.504 81.936 128.862 81.936C127.228 81.9361 126.014 83.1506 126.014 84.7847C126.014 86.4267 127.236 87.6508 128.862 87.6509C130.496 87.6509 131.729 86.4188 131.729 84.7847ZM134.738 84.7847C134.738 88.0811 132.159 90.6606 128.862 90.6606C125.558 90.6606 123.004 88.0732 123.004 84.7847C123.004 81.4883 125.566 78.9263 128.862 78.9263C132.151 78.9263 134.738 81.4803 134.738 84.7847Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2357\">\n            <g id=\"id92\">\n            <path id=\"path2354 (Stroke)\" d=\"M29.4277 104.455C29.4277 102.828 28.2035 101.606 26.5615 101.606C24.9275 101.606 23.7129 102.821 23.7129 104.455C23.7129 106.097 24.9354 107.321 26.5615 107.321C28.1956 107.321 29.4277 106.089 29.4277 104.455ZM32.4375 104.455C32.4375 107.751 29.858 110.331 26.5615 110.331C23.2572 110.331 20.7031 107.743 20.7031 104.455C20.7032 101.158 23.2651 98.5962 26.5615 98.5962C29.85 98.5962 32.4375 101.15 32.4375 104.455Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2364\">\n            <g id=\"id93\">\n            <path id=\"path2361 (Stroke)\" d=\"M124.525 83.3149V86.3247H85.9033V104.49C85.9033 105.321 85.2296 105.995 84.3984 105.995H30.9492V102.985H82.8936V84.8198L82.9014 84.6655C82.9786 83.9069 83.6194 83.3151 84.3984 83.3149H124.525Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2371\">\n            <g id=\"id94\">\n            <path id=\"path2368 (Stroke)\" d=\"M57.0176 51.3198C57.0175 49.6937 55.7934 48.4712 54.1514 48.4712C52.5173 48.4712 51.3028 49.6858 51.3027 51.3198C51.3027 52.9618 52.5252 54.186 54.1514 54.186C55.7855 54.186 57.0176 52.9539 57.0176 51.3198ZM60.0273 51.3198C60.0273 54.6163 57.4478 57.1958 54.1514 57.1958C50.847 57.1958 48.293 54.6083 48.293 51.3198C48.293 48.0234 50.855 45.4615 54.1514 45.4614C57.4399 45.4614 60.0273 48.0155 60.0273 51.3198Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2378\">\n            <g id=\"id95\">\n            <path id=\"path2375 (Stroke)\" d=\"M51.791 82.4067C51.791 80.7806 50.5668 79.5581 48.9248 79.5581C47.2908 79.5581 46.0762 80.7727 46.0762 82.4067C46.0762 84.0487 47.2987 85.2729 48.9248 85.2729C50.5589 85.2729 51.791 84.0408 51.791 82.4067ZM54.8008 82.4067C54.8008 85.7032 52.2213 88.2827 48.9248 88.2827C45.6205 88.2827 43.0664 85.6952 43.0664 82.4067C43.0664 79.1103 45.6284 76.5484 48.9248 76.5483C52.2133 76.5483 54.8007 79.1024 54.8008 82.4067Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2385\">\n            <g id=\"id96\">\n            <path id=\"path2382 (Stroke)\" d=\"M73.2969 49.8501C74.1281 49.8501 74.8018 50.5238 74.8018 51.355V82.4419C74.8018 83.2731 74.1281 83.9468 73.2969 83.9468H53.3125V80.937H71.792V52.8599H58.54V49.8501H73.2969Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2392\">\n            <g id=\"id97\">\n            <path id=\"path2389 (Stroke)\" d=\"M29.4629 82.2495C29.4628 80.6314 28.2467 79.4185 26.5967 79.4185C24.9705 79.4185 23.748 80.6427 23.748 82.2847C23.7481 83.903 24.9819 85.1333 26.6318 85.1333C28.2422 85.1332 29.4629 83.9074 29.4629 82.2495ZM32.4727 82.2495C32.4727 85.5221 29.9519 88.143 26.6318 88.1431C23.3512 88.1431 20.7383 85.5969 20.7383 82.2847C20.7383 78.9962 23.2923 76.4087 26.5967 76.4087C29.8772 76.4087 32.4726 78.9373 32.4727 82.2495Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2399\">\n            <g id=\"id98\">\n            <path id=\"path2396 (Stroke)\" d=\"M69.4316 93.4912C69.4316 91.8731 68.2154 90.6602 66.5654 90.6602C64.9393 90.6602 63.7168 91.8844 63.7168 93.5264C63.7168 95.1447 64.9506 96.375 66.6006 96.375C68.2109 96.3749 69.4316 95.1491 69.4316 93.4912ZM72.4414 93.4912C72.4414 96.7638 69.9207 99.3847 66.6006 99.3848C63.32 99.3848 60.707 96.8386 60.707 93.5264C60.707 90.2379 63.2611 87.6504 66.5654 87.6504C69.8459 87.6504 72.4413 90.179 72.4414 93.4912Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2406\">\n            <g id=\"id99\">\n            <path id=\"path2403 (Stroke)\" d=\"M28.1367 86.6558V91.9575L52.0762 92.0396H62.2119V95.0493H52.0664L26.627 94.9624C25.7979 94.9596 25.1272 94.2865 25.127 93.4575V86.6558H28.1367Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2413\">\n            <g id=\"id100\">\n            <path id=\"path2410 (Stroke)\" d=\"M76.0938 37.979C76.0937 36.3608 74.8775 35.1479 73.2275 35.1479C71.6014 35.148 70.3789 36.3722 70.3789 38.0142C70.3789 39.6325 71.6128 40.8628 73.2627 40.8628C74.8731 40.8627 76.0938 39.6369 76.0938 37.979ZM79.1035 37.979C79.1035 41.2516 76.5828 43.8725 73.2627 43.8726C69.9821 43.8726 67.3692 41.3264 67.3691 38.0142C67.3691 34.7256 69.9232 32.1382 73.2275 32.1382C76.508 32.1382 79.1034 34.6668 79.1035 37.979Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2420\">\n            <g id=\"id101\">\n            <path id=\"path2417 (Stroke)\" d=\"M102.879 55.603C102.879 53.9849 101.663 52.772 100.013 52.772C98.3866 52.772 97.1641 53.9962 97.1641 55.6382C97.1641 57.2565 98.3979 58.4868 100.048 58.4868C101.658 58.4868 102.879 57.261 102.879 55.603ZM105.889 55.603C105.889 58.8756 103.368 61.4965 100.048 61.4966C96.7672 61.4966 94.1543 58.9504 94.1543 55.6382C94.1543 52.3497 96.7083 49.7622 100.013 49.7622C103.293 49.7622 105.889 52.2908 105.889 55.603Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2427\">\n            <g id=\"id102\">\n            <path id=\"path2424 (Stroke)\" d=\"M89.5322 54.1514H95.6592V57.1611H88.8398C88.4011 57.1611 87.9841 56.9696 87.6982 56.6367L75.1973 42.0723L77.4805 40.1113L89.5322 54.1514Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2434\">\n            <g id=\"id103\">\n            <path id=\"path2431 (Stroke)\" d=\"M127.287 68.9263C127.287 67.3001 126.063 66.0776 124.421 66.0776C122.787 66.0777 121.572 67.2922 121.572 68.9263C121.572 70.5683 122.795 71.7924 124.421 71.7925C126.055 71.7925 127.287 70.5604 127.287 68.9263ZM130.297 68.9263C130.297 72.2227 127.717 74.8022 124.421 74.8022C121.117 74.8022 118.562 72.2148 118.562 68.9263C118.563 65.6299 121.124 63.0679 124.421 63.0679C127.709 63.0679 130.297 65.6219 130.297 68.9263Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2441\">\n            <g id=\"id104\">\n            <path id=\"path2438 (Stroke)\" d=\"M89.3809 69.084C89.3808 67.4578 88.1567 66.2354 86.5146 66.2354C84.8806 66.2354 83.6661 67.4499 83.666 69.084C83.666 70.726 84.8885 71.9502 86.5146 71.9502C88.1487 71.9502 89.3809 70.7181 89.3809 69.084ZM92.3906 69.084C92.3906 72.3805 89.8111 74.96 86.5146 74.96C83.2103 74.9599 80.6562 72.3725 80.6562 69.084C80.6563 65.7876 83.2182 63.2256 86.5146 63.2256C89.8032 63.2256 92.3906 65.7796 92.3906 69.084Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2448\">\n            <g id=\"id105\">\n            <path id=\"path2445 (Stroke)\" d=\"M120.096 70.4492L90.9141 70.624L90.8965 67.6143L120.077 67.4395L120.096 70.4492Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2455\">\n            <g id=\"id106\">\n            <path id=\"path2452 (Stroke)\" d=\"M162.816 40.0601C162.816 38.4339 161.592 37.2114 159.95 37.2114C158.316 37.2115 157.102 38.426 157.102 40.0601C157.102 41.7021 158.324 42.9262 159.95 42.9263C161.584 42.9263 162.816 41.6942 162.816 40.0601ZM165.826 40.0601C165.826 43.3565 163.247 45.936 159.95 45.936C156.646 45.936 154.092 43.3486 154.092 40.0601C154.092 36.7636 156.654 34.2017 159.95 34.2017C163.239 34.2017 165.826 36.7557 165.826 40.0601Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2462\">\n            <g id=\"id107\">\n            <path id=\"path2459 (Stroke)\" d=\"M140.453 40.0601C140.453 38.4339 139.229 37.2114 137.587 37.2114C135.953 37.2115 134.738 38.426 134.738 40.0601C134.738 41.7021 135.961 42.9262 137.587 42.9263C139.221 42.9263 140.453 41.6942 140.453 40.0601ZM143.463 40.0601C143.463 43.3565 140.883 45.936 137.587 45.936C134.283 45.936 131.729 43.3486 131.729 40.0601C131.729 36.7636 134.29 34.2017 137.587 34.2017C140.875 34.2017 143.463 36.7557 143.463 40.0601Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2469\">\n            <g id=\"id108\">\n            <path id=\"path2466 (Stroke)\" d=\"M155.614 41.5825L141.977 41.6001L141.973 38.5903L155.61 38.5728L155.614 41.5825Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2476\">\n            <g id=\"id109\">\n            <path id=\"path2473 (Stroke)\" d=\"M160.057 225.562C162.885 224.464 165.993 225.641 167.379 228.363L167.512 228.64L167.515 228.645L167.632 228.926C168.764 231.844 167.479 235.083 164.576 236.398L164.563 236.404C161.561 237.731 158.152 236.461 156.794 233.441L156.791 233.432C155.458 230.417 156.763 227.033 159.77 225.681L159.775 225.679L160.057 225.562ZM164.63 229.604C163.893 228.305 162.388 227.811 161 228.429L160.999 228.428C159.5 229.105 158.885 230.718 159.542 232.211C160.212 233.697 161.834 234.314 163.34 233.652C164.812 232.981 165.425 231.358 164.767 229.875L164.63 229.604Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2483\">\n            <g id=\"id110\">\n            <path id=\"path2480 (Stroke)\" d=\"M129.385 182.312C129.385 180.693 128.169 179.48 126.519 179.48C124.892 179.481 123.67 180.705 123.67 182.347C123.67 183.965 124.904 185.195 126.554 185.195C128.164 185.195 129.385 183.969 129.385 182.312ZM132.395 182.312C132.395 185.584 129.874 188.205 126.554 188.205C123.273 188.205 120.66 185.659 120.66 182.347C120.66 179.058 123.214 176.471 126.519 176.471C129.799 176.471 132.394 178.999 132.395 182.312Z\" fill=\"black\"/>\n            </g>\n            </g>\n            <g id=\"g2490\">\n            <g id=\"id111\">\n            <path id=\"path2487 (Stroke)\" d=\"M139.912 180.825L140.021 180.829C140.565 180.868 141.049 181.199 141.279 181.699L161.771 226.074C161.862 226.271 161.909 226.487 161.909 226.705V227.072H159.609L159.038 227.335L158.916 227.072H158.899V227.035L138.949 183.834H130.891V180.825H139.912Z\" fill=\"black\"/>\n            </g>\n            </g>\n            </g>\n            </g>\n            </g>\n            </g>\n            </g>\n            </g>\n            </g>\n        </svg>\n    )\n}\n\nexport default AiImage;","import * as React from 'react';\n\nconst TelcoImage = () => {\n    return (\n        <svg width=\"302\" height=\"298\" viewBox=\"0 0 302 298\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <g id=\"Teclo\">\n            <path id=\"Background\" d=\"M177 48L274.729 95.0638L298.866 200.815L231.235 285.621H122.765L55.134 200.815L79.2711 95.0638L177 48Z\" fill=\"#99FAE8\"/>\n            <g id=\"ForegroundTelco\">\n            <g id=\"Group 84\">\n            <path id=\"Vector\" d=\"M129.002 211.371C83.581 211.371 46.6309 174.419 46.6309 129.001C46.6309 83.5801 83.5832 46.6301 129.002 46.6301C174.42 46.6301 211.373 83.5823 211.373 129.001C211.373 174.419 174.42 211.371 129.002 211.371ZM129.002 50.077C86.5868 50.077 50.0777 86.5838 50.0777 129.001C50.0777 171.418 86.5852 207.924 129.002 207.924C171.418 207.924 207.926 171.417 207.926 129.001C207.926 86.5843 171.418 50.077 129.002 50.077Z\" fill=\"#111111\"/>\n            <path id=\"Vector_2\" d=\"M129.001 211.372C116.033 211.372 103.965 202.593 95.0196 186.651C86.353 171.207 81.5801 150.732 81.5801 129C81.5801 107.268 86.353 86.7915 95.0196 71.3497C103.965 55.4089 116.033 46.6299 129.001 46.6299C141.969 46.6299 154.037 55.4089 162.982 71.3497C171.648 86.7937 176.421 107.268 176.421 129C176.421 150.734 171.648 171.209 162.982 186.651C154.036 202.593 141.969 211.372 129.001 211.372ZM129.001 50.0773C118.091 50.0773 105.712 59.8679 97.7736 74.0134C89.5566 88.6564 85.0313 108.184 85.0313 128.998C85.0313 149.812 89.5566 169.34 97.7736 183.982C105.711 198.128 118.091 207.919 129.001 207.919C139.91 207.919 152.29 198.128 160.228 183.982C168.445 169.339 172.97 149.812 172.97 128.998C172.97 108.184 168.445 88.6553 160.228 74.0134C152.29 59.8674 139.91 50.0773 129.001 50.0773Z\" fill=\"#111111\"/>\n            <path id=\"Vector_3\" d=\"M153.538 53.9274C152.033 53.9274 151.812 52.7071 151.812 51.2018V40.4085C151.812 39.3512 151.424 39.3889 152.381 38.9409L171.971 30.2297V16.2485C171.971 14.7432 172.191 13.5229 173.696 13.5229C175.202 13.5229 175.422 14.7432 175.422 16.2485V30.9621C175.422 32.0194 175.81 31.9817 174.853 32.4297L155.264 41.1409V51.2018C155.264 52.7071 155.044 53.9274 153.538 53.9274Z\" fill=\"#111111\"/>\n            <path id=\"Vector_4\" d=\"M104.47 53.9274C102.965 53.9274 102.745 52.7071 102.745 51.2018V41.1414L83.1472 32.4303C82.1898 31.9817 82.5777 32.0194 82.5777 30.9621V16.2485C82.5777 14.7432 82.798 13.5229 84.3033 13.5229C85.8087 13.5229 86.0289 14.7432 86.0289 16.2485V30.2286L105.626 38.9398C106.584 39.3883 106.196 39.3506 106.196 40.408V51.2013C106.196 52.7071 105.976 53.9274 104.47 53.9274Z\" fill=\"#111111\"/>\n            <path id=\"Vector_5\" d=\"M128.999 52.0771C127.494 52.0771 127.273 50.8568 127.273 49.3515V24.3167C127.273 22.8113 127.494 21.5911 128.999 21.5911C130.504 21.5911 130.725 22.8113 130.725 24.3167L130.725 49.3515C130.725 50.8563 130.504 52.0771 128.999 52.0771Z\" fill=\"#111111\"/>\n            <path id=\"Vector_6\" d=\"M241.757 175.421H227.044C225.987 175.421 226.025 175.809 225.576 174.852L216.865 155.262H206.804C205.298 155.262 204.078 155.042 204.078 153.537C204.078 152.031 205.298 151.811 206.804 151.811H217.597C218.654 151.811 218.616 151.423 219.065 152.38L227.776 171.969H241.757C243.262 171.969 244.482 172.19 244.482 173.695C244.483 175.201 243.262 175.421 241.757 175.421Z\" fill=\"#111111\"/>\n            <path id=\"Vector_7\" d=\"M217.597 106.197H206.804C205.298 106.197 204.078 105.977 204.078 104.472C204.078 102.966 205.298 102.746 206.804 102.746H216.864L225.576 83.1486C226.024 82.1912 225.987 82.5792 227.044 82.5792H241.757C243.262 82.5792 244.483 82.7995 244.483 84.3048C244.483 85.8102 243.262 86.0304 241.757 86.0304H227.778L219.066 105.628C218.617 106.586 218.655 106.197 217.597 106.197Z\" fill=\"#111111\"/>\n            <path id=\"Vector_8\" d=\"M233.68 130.727H208.646C207.14 130.727 205.92 130.506 205.92 129.001C205.92 127.496 207.14 127.276 208.646 127.276H233.68C235.186 127.276 236.406 127.496 236.406 129.001C236.406 130.506 235.186 130.727 233.68 130.727Z\" fill=\"#111111\"/>\n            <path id=\"Vector_9\" d=\"M84.3075 244.476C82.8021 244.476 82.5819 243.256 82.5819 241.751V227.038C82.5819 225.98 82.1934 226.019 83.1508 225.57L102.741 216.858V206.797C102.741 205.292 102.961 204.072 104.466 204.072C105.972 204.072 106.192 205.292 106.192 206.797V217.591C106.192 218.648 106.58 218.61 105.623 219.058L86.0331 227.77V241.75C86.0331 243.256 85.8128 244.476 84.3075 244.476Z\" fill=\"#111111\"/>\n            <path id=\"Vector_10\" d=\"M173.699 244.476C172.194 244.476 171.974 243.256 171.974 241.75V227.771L152.376 219.059C151.418 218.611 151.806 218.648 151.806 217.591V206.798C151.806 205.292 152.027 204.072 153.532 204.072C155.037 204.072 155.257 205.292 155.257 206.798V216.858L174.856 225.57C175.813 226.018 175.425 225.981 175.425 227.038V241.751C175.425 243.256 175.205 244.476 173.699 244.476Z\" fill=\"#111111\"/>\n            <path id=\"Vector_11\" d=\"M128.999 236.406C127.494 236.406 127.273 235.186 127.273 233.681V208.646C127.273 207.141 127.494 205.92 128.999 205.92C130.504 205.92 130.724 207.141 130.724 208.646V233.681C130.724 235.187 130.504 236.406 128.999 236.406Z\" fill=\"#111111\"/>\n            <path id=\"Vector_12\" d=\"M51.2005 106.192H40.4071C39.3498 106.192 39.3875 106.58 38.9395 105.623L30.2283 86.0328H16.2471C14.7417 86.0328 13.5215 85.8126 13.5215 84.3072C13.5215 82.8019 14.7417 82.5816 16.2471 82.5816H30.9607C32.018 82.5816 31.9803 82.1931 32.4283 83.1505L41.1395 102.74H51.2005C52.7058 102.74 53.9261 102.961 53.9261 104.466C53.9261 105.971 52.7053 106.192 51.2005 106.192Z\" fill=\"#111111\"/>\n            <path id=\"Vector_13\" d=\"M30.9626 175.426H16.249C14.7437 175.426 13.5234 175.206 13.5234 173.7C13.5234 172.195 14.7437 171.975 16.249 171.975H30.2292L38.9404 152.377C39.3889 151.419 39.3512 151.807 40.4085 151.807H51.2019C52.7072 151.807 53.9275 152.027 53.9275 153.533C53.9275 155.038 52.7072 155.258 51.2019 155.258H41.142L32.4308 174.856C31.9822 175.814 32.02 175.426 30.9626 175.426Z\" fill=\"#111111\"/>\n            <path id=\"Vector_14\" d=\"M49.3562 130.721L24.3213 130.721C22.816 130.721 21.5957 130.501 21.5957 128.996C21.5957 127.492 22.816 127.271 24.3213 127.271H49.3562C50.8616 127.271 52.0818 127.491 52.0818 128.996C52.0818 130.502 50.861 130.721 49.3562 130.721Z\" fill=\"#111111\"/>\n            <path id=\"Vector_15\" d=\"M128.999 211.371C127.494 211.371 127.273 210.151 127.273 208.646V50.6331C127.273 49.1277 127.494 47.9075 128.999 47.9075C130.504 47.9075 130.725 49.1277 130.725 50.6331V208.646C130.725 210.152 130.504 211.371 128.999 211.371Z\" fill=\"#111111\"/>\n            <path id=\"Vector_16\" d=\"M129.002 176.42C107.267 176.42 86.7926 171.647 71.3508 162.981C55.4099 154.036 46.6309 141.968 46.6309 129C46.6309 116.033 55.4099 103.965 71.3508 95.0191C86.7948 86.3525 107.27 81.5796 129.002 81.5796C150.735 81.5796 171.211 86.3525 186.653 95.0191C202.593 103.964 211.373 116.033 211.373 129C211.373 141.968 202.594 154.036 186.653 162.981C171.209 171.648 150.733 176.42 129.002 176.42ZM129.002 85.0335C108.186 85.0335 88.6591 89.5588 74.0172 97.7757C59.8711 105.714 50.081 118.094 50.081 129.003C50.081 139.912 59.8717 152.292 74.0172 160.23C88.6602 168.447 108.187 172.972 129.002 172.972C149.816 172.972 169.344 168.447 183.986 160.23C198.132 152.292 207.923 139.912 207.923 129.003C207.923 118.094 198.132 105.714 183.986 97.7757C169.343 89.5588 149.816 85.0335 129.002 85.0335Z\" fill=\"#111111\"/>\n            <path id=\"Vector_17\" d=\"M207.364 130.727H49.3506C47.8453 130.727 46.625 130.507 46.625 129.001C46.625 127.496 47.8453 127.276 49.3506 127.276H207.364C208.869 127.276 210.089 127.496 210.089 129.001C210.089 130.507 208.869 130.727 207.364 130.727Z\" fill=\"#111111\"/>\n            <circle id=\"Ellipse 21\" cx=\"8\" cy=\"84\" r=\"6.5\" stroke=\"black\" strokeWidth=\"3\"/>\n            </g>\n            <circle id=\"Ellipse 20\" cx=\"242\" cy=\"129\" r=\"6.5\" stroke=\"black\" strokeWidth=\"3\"/>\n            <circle id=\"Ellipse 23\" cx=\"16\" cy=\"129\" r=\"6.5\" stroke=\"black\" strokeWidth=\"3\"/>\n            <circle id=\"Ellipse 22\" cx=\"250\" cy=\"173\" r=\"6.5\" stroke=\"black\" strokeWidth=\"3\"/>\n            <circle id=\"Ellipse 25\" cx=\"129\" cy=\"242\" r=\"6.5\" stroke=\"black\" strokeWidth=\"3\"/>\n            <circle id=\"Ellipse 29\" cx=\"129\" cy=\"16\" r=\"6.5\" stroke=\"black\" strokeWidth=\"3\"/>\n            <circle id=\"Ellipse 26\" cx=\"174\" cy=\"250\" r=\"6.5\" stroke=\"black\" strokeWidth=\"3\"/>\n            <circle id=\"Ellipse 28\" cx=\"174\" cy=\"8\" r=\"6.5\" stroke=\"black\" strokeWidth=\"3\"/>\n            <circle id=\"Ellipse 27\" cx=\"85\" cy=\"250\" r=\"6.5\" stroke=\"black\" strokeWidth=\"3\"/>\n            <circle id=\"Ellipse 30\" cx=\"85\" cy=\"8\" r=\"6.5\" stroke=\"black\" strokeWidth=\"3\"/>\n            <circle id=\"Ellipse 24\" cx=\"8\" cy=\"173\" r=\"6.5\" stroke=\"black\" strokeWidth=\"3\"/>\n            <circle id=\"Ellipse 21_2\" cx=\"250\" cy=\"84\" r=\"6.5\" stroke=\"black\" strokeWidth=\"3\"/>\n            </g>\n            </g>\n        </svg>\n\n    )\n}\n\nexport default TelcoImage;","import * as React from 'react';\n\nconst QuantumImage = () => {\n    return (\n        <svg width=\"301\" height=\"297\" viewBox=\"0 0 301 297\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <g id=\"Quantum\">\n            <path id=\"Background\" d=\"M125 47L222.729 94.0638L246.866 199.815L179.235 284.621H70.7645L3.13401 199.815L27.2711 94.0638L125 47Z\" fill=\"#99FAE8\"/>\n            <g id=\"ForegroundQuantum\">\n            <path id=\"Vector\" d=\"M170.618 8.66068C170.618 8.67857 170.62 37.9739 170.639 38.0522C170.775 38.6177 177.106 44.6642 179.98 47.4692C188.856 38.6888 189.268 38.4447 189.288 37.8251C189.284 37.2402 189.12 9.32839 189.302 8.69424C192.087 7.2154 192.776 4.42905 191.202 1.79097C186.423 -3.38052 179.593 4.00323 184.986 8.07564C185.4 8.38791 185.888 8.59984 186.374 8.77181C186.387 35.2026 186.389 30.143 186.375 35.7789C186.369 37.3763 187.516 36.2149 180.067 43.3538C177.691 41.503 175.626 39.1455 173.522 36.9981L173.499 8.76597C174.855 8.20938 175.896 7.52786 176.473 6.10655C176.89 5.07901 176.899 3.6434 176.434 2.63337C175.942 1.56377 174.924 0.612192 173.797 0.235005C173.036 -0.0197228 172.324 -0.0224462 171.538 0.021366C167.625 1.14213 166.823 5.22884 169.067 7.56705C169.52 8.03915 170.047 8.35766 170.618 8.66049L170.618 8.66068ZM187.248 2.96008C188.58 2.79931 189.488 3.82762 189.117 4.96244C188.936 5.51582 188.494 5.72839 187.997 5.95968C187.651 5.96439 187.23 5.99752 186.906 5.85159C185.777 5.34202 185.534 3.44868 187.248 2.96008ZM171.808 2.96008C173.442 2.37494 174.991 4.68237 172.847 5.86937C172.564 5.92744 172.288 5.96545 171.998 5.94387C170.844 5.85799 170.031 4.0309 171.808 2.96008Z\" fill=\"black\"/>\n            <path id=\"Vector_2\" d=\"M291.513 151.895C287.391 151.555 285.042 154.767 284.741 154.85C284.383 154.949 285.84 154.92 263.365 154.966C263.346 154.947 239.203 130.546 239.015 130.408C207.408 130.335 209.447 130.353 209.158 130.263L209.153 126.609L242.529 126.509L259.939 143.974L269.63 143.967C272.382 148.889 277.433 147.114 278.415 143.154C278.95 140.993 277.456 138.383 275.103 137.792C273.915 137.494 272.69 137.631 271.641 138.272C270.517 138.957 270.044 139.833 269.529 140.993C260.423 141.003 261.236 141.065 261.102 141.003C260.858 140.889 243.997 123.755 243.621 123.616C243.51 123.575 245.228 123.584 209.22 123.557L209.217 119.766C246.285 119.751 243.538 119.773 243.691 119.735C244.23 119.6 246.66 116.919 247.194 116.382C248.655 114.912 260.664 102.627 261.042 102.553C261.27 102.508 269.514 102.512 269.764 102.512C270.15 103.72 270.782 104.837 271.912 105.415C276.162 107.592 279.99 103.287 278.328 99.4992C277.399 97.3838 274.635 96.0209 272.014 97.3743C271.076 97.8583 270.358 98.6565 269.755 99.5067L262.168 99.5512C261.627 99.5529 260.303 99.3947 259.824 99.6153C259.789 99.6314 245.623 113.677 242.571 116.873C207.136 116.804 209.463 116.852 209.22 116.727L209.207 113.025C240.771 113.029 238.702 113.048 239.08 112.98C264.998 86.6914 263.247 88.426 263.414 88.3459C263.603 88.2551 285.053 88.3196 285.203 88.3635C285.297 88.3909 285.574 88.6805 285.659 88.7523C291.773 93.8866 299.163 89.7282 299.068 82.984C298.959 75.8078 290.109 73.1134 285.927 77.6273C285.557 78.0265 285.254 78.4963 284.951 78.9471C256.662 78.9728 258.559 78.9524 258.452 78.9834C258.094 79.0872 259.552 77.6992 234.113 103.279C231.119 103.276 209.746 103.462 209.247 103.21L209.263 97.5012C209.266 95.8971 209.573 94.3424 208.329 93.0239C207.071 91.6907 204.4 92.0713 202.734 92.0681L198.05 92.0614C198.057 89.8228 197.913 66.8467 198.019 66.6307C198.255 66.1471 216.872 47.7834 216.891 47.7639C218.576 46.1083 220.538 44.5257 222.013 42.6864C221.95 17.1406 221.948 17.9436 221.998 17.8179C222.169 17.3852 225.003 15.4117 225.009 11.6534C225.012 9.54991 224.086 7.54774 222.587 6.10158C219.529 3.15047 214.557 3.37403 211.788 6.26138C208.465 9.72617 209.007 14.3672 211.725 16.9218L212.746 17.8036L212.704 38.033C190.353 59.7572 203.162 47.6482 189.839 60.3568C189.493 60.6846 188.527 61.3896 188.329 61.7832C188.277 61.8877 188.297 59.8729 188.312 92.0613L184.467 92.0657L184.467 58.6573C202.677 40.4619 201.045 42.2878 201.232 41.8902C201.301 41.7444 201.265 42.2067 201.293 31.5084C202.592 30.9696 203.629 30.1654 204.134 28.8225C205.733 24.5716 201.033 21.1725 197.537 23.2546C195.42 24.5152 194.589 27.4268 196.114 29.6206C196.686 30.4421 197.541 30.9793 198.396 31.4658C198.397 31.8697 198.432 40.3086 198.376 40.7348C197.16 41.9493 181.742 57.1587 181.634 57.4737C181.624 57.505 181.626 55.8642 181.643 92.0274L177.224 92.0127C177.215 61.2068 177.215 67.4815 177.219 59.2179C177.207 57.5051 177.566 57.8148 176.39 56.6453C159.726 40.0851 160.811 41.2439 160.288 40.5273L160.268 31.3738C166.817 28.0218 161.409 20.1916 156.208 23.1291C153.98 24.3882 153.357 27.2181 154.568 29.198C155.219 30.2614 156.287 30.8666 157.397 31.3616L157.431 39.3C157.433 39.8924 157.272 41.0966 157.438 41.6314C157.671 42.3836 174.245 58.431 174.368 58.7626C174.389 58.819 174.381 57.1815 174.375 92.0172L170.533 92.0022L170.464 61.7843L146.236 37.9328C146.25 16.2663 146.227 17.6169 146.237 17.5912C146.303 17.4093 146.846 16.958 146.999 16.7916C151.76 11.6166 148.276 3.59081 141.11 3.7248L139.985 3.80033C137.891 4.28493 136.009 5.29479 134.844 7.16229C133.78 8.86657 133.283 10.9589 133.741 12.9418C134.474 16.117 136.461 17.255 136.588 17.541C136.596 17.5588 136.592 24.5424 136.603 41.5376C136.605 42.697 136.272 42.2953 137.781 43.8177C147.786 53.8479 160.711 66.5735 160.735 66.673C160.765 66.7942 160.749 77.8713 160.736 92.0809L155.387 92.0677C154.422 92.0566 153.191 91.8629 152.259 92.0913C151.052 92.3868 150.035 93.6315 149.776 94.7698C149.584 95.6179 149.726 96.7863 149.732 97.6577L149.763 103.34C137.601 103.363 125.179 103.398 125.161 103.393C125.053 103.36 122.438 100.776 100.425 79.0814L74.4698 79.1488C71.3944 74.9046 66.5442 74.4197 63.1828 76.8504C59.4193 79.5722 58.9519 84.6582 61.5747 88.1254C64.1971 91.5929 69.2055 91.9819 72.4135 89.5018L73.623 88.3971L95.1337 88.3689C104.94 98.3094 100.787 94.0941 113.586 107.098C114.354 107.886 118.916 112.851 119.272 112.95C119.324 112.965 149.82 112.915 149.839 112.915L149.842 116.674L116.068 116.739C100.072 100.698 103.086 103.747 99.9525 100.501C99.819 100.356 99.3583 99.7309 99.2099 99.677C99.0812 99.63 88.7264 99.7589 88.5657 99.6512C88.4291 99.5596 88.1301 98.9026 88.0077 98.7262C86.3615 96.3531 82.9279 96.1817 81.177 97.9206C79.1881 99.8951 79.2844 103.169 81.2898 104.864C83.6585 106.867 87.6606 105.993 88.5895 102.558L97.961 102.563C98.0825 102.709 96.7907 101.393 114.84 119.659C151.831 119.691 148.968 119.649 149.775 119.812L149.811 123.631L114.927 123.688L97.734 141.018L88.7402 140.992C88.1706 139.586 87.4052 138.489 85.9762 137.906C84.9726 137.497 83.594 137.563 82.6155 137.994C80.2196 139.049 79.1015 141.902 80.35 144.298C80.9365 145.423 82.1418 146.375 83.3579 146.7C85.2252 147.199 87.4203 146.265 88.63 143.921L96.3769 143.915C97.035 143.917 98.2903 144.095 98.8928 143.924C98.9106 143.919 109.771 132.977 116.046 126.665L149.81 126.661L149.808 130.502L119.287 130.523L95.3689 154.914L73.8772 154.86C72.3794 153.249 70.6542 152.019 68.3623 151.933C60.4222 151.634 57.3865 160.64 62.0973 165.354C65.2123 168.47 70.3642 168.277 73.0245 165.561C73.3815 165.197 74.0617 164.104 74.5076 164.092C101.844 164.093 100.282 164.147 100.379 164.12C100.485 164.09 98.8008 165.735 124.377 140.264L149.759 140.314L149.753 145.709C149.756 147.532 149.475 148.911 150.879 150.383C152.868 152.472 155.44 151.06 160.681 151.58C160.783 173.592 160.767 169.117 160.774 174.56C160.774 176.58 161.115 175.987 159.619 177.498L139.522 197.796C139.029 198.3 136.995 200.014 136.843 200.477C136.813 200.57 136.845 217.457 136.854 226.064C134.972 227.92 133.641 229.731 133.627 232.496C133.605 236.808 137.422 240.198 141.418 240.138C146.043 240.065 149.185 236.414 149.074 232.294C149.009 229.861 147.794 228.092 146.207 226.359C146.21 219.628 146.209 205.432 146.216 205.411C146.384 204.91 170.394 181.413 170.537 180.966C170.543 180.945 170.566 151.486 170.566 151.467L174.193 151.476C174.283 186.995 174.3 184.534 174.256 184.624C174.169 184.805 175.065 183.881 157.528 201.283L157.547 212.147C156.264 212.747 155.235 213.483 154.706 214.853C153.825 217.134 154.889 219.989 157.492 220.8C160.396 221.704 162.907 220.084 163.531 217.499C164.047 215.363 162.929 212.95 160.424 212.22L160.377 204.895C160.374 204.313 160.222 203.108 160.391 202.578C160.437 202.432 159.918 202.979 171.959 191.073C176.76 186.258 176.734 186.325 177.175 185.681C177.161 185.493 177.157 188.152 177.284 151.478L181.401 151.496C181.429 187.598 181.392 185.084 181.494 185.278C181.612 185.503 198.326 202.87 198.327 202.87C198.466 203.221 198.32 204.411 198.318 204.833L198.294 212.221C193.727 214.25 194.76 219.529 198.274 220.744C200.557 221.533 203.515 220.227 204.227 217.455C204.662 215.764 203.881 213.536 202.196 212.572C202.024 212.473 201.302 212.228 201.227 212.127C201.181 212.064 201.286 201.863 201.193 201.68C201.124 201.543 184.553 184.254 184.37 183.821C184.339 183.748 184.416 185.955 184.371 151.505L188.143 151.503C188.331 152.281 188.213 181.779 188.257 181.863C188.322 181.985 212.707 205.268 212.833 205.607C212.84 205.625 212.831 214.992 212.831 220.928C212.832 222.513 213.03 224.347 212.778 225.887C211.237 226.965 209.986 228.529 209.649 230.427C208.828 235.049 211.606 238.935 216.649 239.633C224.378 239.774 227.507 231.197 222.687 226.528L222.137 226.012L222.07 200.452L198.18 176.479L198.179 151.471L203.656 151.48C205.511 151.48 206.988 151.758 208.297 150.447C209.582 149.162 209.278 147.071 209.277 145.41C209.265 140.285 209.2 140.587 209.339 140.244L234.238 140.238C234.954 141.254 249.492 155.748 253.074 159.335C257.034 163.397 257.192 163.664 258.016 164.091L284.273 164.055C289.179 170.508 297.995 167.312 298.747 161.018C299.347 155.967 295.898 152.256 291.513 151.895ZM273.516 140.804C273.786 140.765 274.073 140.718 274.342 140.786C275.799 141.156 276.015 143.142 274.361 143.76C274.029 143.815 273.602 143.821 273.276 143.725C272.405 143.466 271.544 141.549 273.516 140.804ZM273.855 99.8479C275.482 99.5719 276.079 101.131 275.565 102.081C275.317 102.54 274.964 102.696 274.481 102.823C274.155 102.853 273.755 102.871 273.445 102.744C272.34 102.292 272.016 100.392 273.855 99.8479ZM287.464 80.3763C288.797 78.3939 291.57 77.8661 293.49 78.8267C297.218 80.6933 297.255 86.7136 292.143 88.0297C287.419 88.43 285.333 83.5467 287.464 80.3763ZM235.578 106.03C236.312 105.504 232.774 108.799 259.576 81.9424L283.726 81.9258C283.721 83.1408 283.644 84.3504 283.899 85.5143C260.266 85.5981 261.935 85.5477 261.817 85.5974C261.799 85.6049 237.849 110.044 237.634 110.118C237.528 110.155 219.09 110.068 209.198 110.03L209.191 106.137L235.578 106.03ZM198.47 26.5107C198.679 26.0351 199.054 25.8388 199.51 25.6451C199.794 25.5979 200.077 25.5552 200.36 25.6321C201.728 26.0034 201.838 28.1707 200.264 28.799C200.001 28.8238 199.681 28.8469 199.421 28.7782C198.625 28.5679 198.048 27.4696 198.47 26.5107ZM158.939 28.6036C158.662 28.6233 158.357 28.6527 158.089 28.5638C157.336 28.3141 156.805 27.2331 157.191 26.3756C157.437 25.8291 157.908 25.6863 158.429 25.4784C159.139 25.533 159.826 25.6113 160.091 26.3076C160.418 27.1689 160.081 28.2274 158.939 28.6036ZM68.1713 88.1074C66.7994 88.144 65.7268 87.9908 64.6229 87.0825C62.4198 85.2705 62.4717 81.7996 64.1282 79.9175C65.0462 78.8741 66.154 78.5084 67.4904 78.3961C68.4452 78.4462 69.2631 78.5358 70.1112 79.0169C73.2427 80.7939 73.8527 86.8811 68.1713 88.1074ZM120.596 110.023L96.7453 85.6689C96.0524 85.5664 97.6381 85.5879 75.1181 85.5602L75.3049 82.0163C87.5174 81.9955 99.2172 81.9894 99.2482 81.9992C99.8016 82.1755 123.286 105.911 123.633 106.131C124.03 106.382 128.23 106.196 128.956 106.195L149.759 106.243L149.769 109.934L120.596 110.023ZM84.4862 102.847C84.1799 102.891 83.7893 102.878 83.5118 102.725C82.4666 102.147 82.2385 100.276 83.9395 99.8494C84.2288 99.8395 84.5778 99.8489 84.8455 99.9667C85.9346 100.446 86.3465 102.378 84.4862 102.847ZM85.7525 142.836C85.4944 143.338 85.0906 143.516 84.5821 143.697C84.3153 143.751 84.0154 143.762 83.7633 143.637C83.1098 143.312 82.612 142.317 83.0752 141.43C83.333 140.936 83.806 140.802 84.3091 140.685C85.7234 140.665 86.2424 141.884 85.7525 142.836ZM71.7692 162.548C69.7854 165.559 64.3301 165.46 63.0682 161.344C62.6892 160.169 62.7598 158.788 63.3088 157.674C64.0542 156.162 65.2461 155.384 66.7889 154.858C67.9454 154.821 69.0439 154.82 70.0677 155.452C72.6745 157.063 73.2564 160.292 71.7692 162.548ZM125.208 137.336C124.681 137.341 123.626 137.231 123.168 137.385C122.736 137.53 99.4959 161.041 99.0308 161.273C98.7919 161.392 87.7695 161.24 75.3749 161.263C75.4018 159.898 75.4086 159.071 75.2313 157.847C98.0267 157.811 96.3637 158.025 97.0799 157.402C97.6988 156.864 94.4889 160.04 120.383 133.482C147.779 133.452 141.645 133.463 149.821 133.437L149.825 137.343C128.524 137.326 134.352 137.326 125.208 137.336ZM160.416 217.229C160.179 217.733 159.814 217.932 159.304 218.091C158.361 218.21 157.895 217.883 157.591 217.314C157.125 216.436 157.424 215.437 158.622 214.889C158.918 214.832 159.127 214.807 159.427 214.9C160.443 215.215 160.805 216.401 160.416 217.229ZM199.362 214.95C199.687 214.924 200.054 214.881 200.37 214.978C201.584 215.353 201.894 217.31 200.268 218.025C199.522 218.17 198.937 218.112 198.46 217.446C198.195 217.074 198.097 216.599 198.189 216.154C198.312 215.562 198.878 215.215 199.362 214.95ZM212.596 12.7522C212.252 11.6179 212.506 10.3144 213.086 9.3094C213.901 7.89902 214.964 7.33505 216.475 6.93459C217.445 6.9006 218.192 6.90774 219.103 7.31259C220.322 7.85471 221.33 8.82172 221.762 10.1045C222.15 11.2558 222.087 12.7505 221.498 13.8179C220.769 15.138 219.662 15.8064 218.238 16.1857C217.05 16.2968 215.929 16.1914 214.861 15.6244C213.794 15.0583 212.942 13.8958 212.596 12.7522ZM191.22 63.1923L215.547 39.4481C215.624 38.8732 215.587 40.5942 215.63 19.0478C219.202 19.0137 218.738 19.0204 218.984 19.0102C219.305 19.4295 219 18.4122 219.197 41.416C194.363 66.054 195.36 65.0714 195.223 65.4438C195.127 65.7034 195.154 63.5071 195.159 92.043C191.281 92.0509 191.557 92.1156 191.195 91.8956L191.22 63.1923ZM137.363 8.67431C139.767 5.25341 145.127 6.13779 146.131 10.3758C146.429 11.6358 146.152 13.047 145.428 14.1118C144.574 15.3664 143.377 15.8948 141.949 16.184C140.732 16.2625 139.733 16.171 138.678 15.4871C136.411 14.0166 135.852 10.8246 137.363 8.67431ZM139.495 41.1837C139.487 41.1657 139.49 20.4814 139.489 18.9352L143.378 18.9465L143.436 39.0857L167.548 63.1561L167.576 92.0254C166.514 92.0609 163.819 92.149 163.679 92.0365C163.599 91.9766 163.623 65.6717 163.521 65.3761C163.213 64.4822 139.81 41.9342 139.495 41.1837ZM142.154 237.167C135.837 237.908 134.238 229.11 140.684 227.746C141.764 227.685 142.687 227.721 143.663 228.267C146.925 230.092 147.379 235.638 142.154 237.167ZM167.677 179.848L143.32 204.131L143.226 224.765C143.143 224.824 143.076 224.923 142.976 224.944C142.654 225.009 141.95 224.813 141.577 224.801C140.949 224.781 140.348 224.876 139.73 224.979C139.7 204.092 139.709 208.26 139.691 203.065C139.684 201.499 139.476 201.891 140.17 201.178C144.967 196.272 163.567 177.888 163.668 177.543C163.748 177.269 163.602 179.562 163.719 151.482L167.59 151.491C167.704 151.946 167.652 149.763 167.677 179.848ZM217.62 236.691C216.439 236.676 215.338 236.517 214.365 235.774C211.179 233.343 212.053 227.866 216.978 227.272C222.854 227.15 224.151 235.653 217.62 236.691ZM201.95 184.596L219.263 201.995L219.286 224.673C218.099 224.402 217.028 224.45 215.827 224.501L215.731 204.277L191.134 180.511L191.186 151.498L195.207 151.5C195.238 156.418 195.358 177.811 195.389 177.904C195.582 178.468 201.103 183.744 201.95 184.596ZM206.363 142.581C206.372 147.556 206.408 147.443 206.262 147.97C205.991 148.276 205.943 148.36 205.54 148.483L153.28 148.469C152.285 148.32 152.597 146.069 152.595 145.14C152.595 145.11 152.522 96.6436 152.678 95.8018C152.945 95.3699 153.217 95.228 153.661 94.9969C154.979 94.9229 204.513 94.9036 205.207 94.9442C205.725 94.9743 205.846 95.0656 206.224 95.3875C206.469 96.1646 206.306 92.4608 206.361 142.58L206.363 142.581ZM283.273 161.217L259.179 161.212C258.606 160.83 236.082 137.748 235.553 137.483C234.951 137.181 235.047 137.352 209.247 137.295L209.257 133.293L237.695 133.275C262.412 158.265 261.593 157.571 262.174 157.761C262.482 157.862 260.712 157.824 283.357 157.853L283.273 161.217ZM295.192 162.249C294.434 163.565 293.253 164.172 291.845 164.546C290.675 164.624 289.577 164.617 288.536 163.983C285.916 162.389 285.553 159.197 286.832 157.119C287.637 155.813 288.783 155.215 290.211 154.849C291.307 154.816 292.187 154.822 293.187 155.359C295.923 156.827 296.436 160.085 295.192 162.249Z\" fill=\"black\"/>\n            <path id=\"Vector_3\" d=\"M221.923 45.4232C220.159 46.911 220.205 48.5805 220.943 50.7235C219.039 53.0333 203.045 68.646 202.937 69.0618C202.797 69.6134 202.941 70.6263 202.942 71.2171L202.963 79.944C202.965 80.6765 203.137 81.8191 202.982 82.4954C202.948 82.6461 202.256 83.2457 202.116 83.4209C201.735 83.8964 201.598 84.2908 201.46 84.8265C200.528 88.8227 205.141 91.7714 208.501 89.2038C209.829 88.1887 210.258 86.5602 210.441 84.9781C238.97 56.6617 236.977 58.794 237.064 58.5878C237.137 58.4136 236.94 37.3783 237.24 36.9131C237.307 36.809 239.446 35.9364 240.405 35.2552C241.009 34.8259 241.457 34.2789 241.85 33.658L241.956 59.195L267.816 59.2362C266.015 60.5428 264.986 61.8094 264.451 64.036L241.918 64.0495C215.271 90.6926 219.415 86.5485 216.03 89.9368C215.82 90.1501 215.394 90.7147 215.146 90.843C215.027 90.9048 213.17 90.7557 211.725 92.5539C209.086 95.8402 212.492 100.366 216.305 99.4794C217.175 99.2774 217.988 98.7591 218.715 98.2604C230.602 98.2995 228.283 98.2913 231.01 98.3028C231.746 98.3008 231.44 98.4319 231.993 97.8858C233.816 96.0772 231.815 98.0885 244.084 85.7061C245.987 83.8322 248.167 82.0094 249.86 79.9623C254.307 81.4616 257.647 76.9313 255.256 73.3691C252.911 69.876 247.54 71.1676 247.095 75.2952C246.989 76.2761 247.229 77.1159 247.564 78.0202C247.475 78.5118 244.366 81.3136 243.83 81.8445C228.985 96.6698 231.208 94.5836 230.268 95.4089L219.559 95.3559C219.411 93.8648 219.012 93.0944 218.105 91.9142C244.565 65.6383 243.071 66.9807 243.246 66.9157C243.264 66.9089 263.276 66.9061 264.778 66.9054C267.641 76.3974 280.65 72.0912 278.159 62.9843L286.722 54.678C292.372 55.906 296.216 53.0463 297.048 48.811C297.98 44.0642 294.687 40.2781 290.79 39.5543C286.178 38.6972 280.52 42.2425 281.598 49.0201L274.295 56.3406L246.954 56.3213L279.044 24.2474C283.526 26.866 288.089 25.3442 290.226 21.6427C292.442 17.8039 290.954 12.8149 287.074 10.8355C282.728 8.6178 277.936 10.6107 276.222 14.2127C275.326 16.0947 275.082 18.1952 275.81 20.1762C276.084 20.9216 276.494 21.6092 276.915 22.2801L244.742 54.3433C244.736 52.3718 244.646 27.4911 244.665 27.4518C244.802 27.1703 250.852 21.3306 252.525 19.3095C254.96 19.4285 256.995 19.0201 258.862 17.3685C264.52 12.3647 260.452 4.06469 254.351 3.72314L252.644 3.75341C250.373 4.21876 248.47 5.2096 247.176 7.18732C246.192 8.68994 245.559 11.0455 245.927 12.8204L246.563 15.0369L238.229 23.3791C229.01 21.4215 226.308 31.9978 232.007 35.6355C232.91 36.2119 234.169 36.6486 234.201 36.6951C234.227 36.7336 234.227 42.9347 234.24 57.3995L208.601 82.5823C207.709 81.8117 207.1 81.6202 205.891 81.4763L205.844 72.3452C205.842 71.9333 205.695 70.5159 205.834 70.1973C205.842 70.1795 222.704 52.9783 223.251 52.8095C224.766 53.7194 227.758 52.978 228.867 50.7623C229.159 50.1792 229.249 49.742 229.344 49.1674C229.699 46.786 227.524 44.6556 225.449 44.4403C224.244 44.3156 222.852 44.638 221.922 45.4229L221.923 45.4232ZM250.041 75.3213C250.221 74.795 250.585 74.5686 251.062 74.3319C251.281 74.2922 251.489 74.2472 251.711 74.2872C253.12 74.5406 253.695 76.389 252.019 77.2211C251.709 77.3027 251.305 77.3641 250.991 77.2645C250.314 77.0491 249.748 76.1773 250.041 75.3213ZM216.508 96.0611C216.315 96.4128 216.059 96.5127 215.703 96.6505C214.886 96.7048 214.452 96.6013 213.872 95.6684C213.742 94.8844 213.873 94.4256 214.74 93.9544C215.065 93.8612 215.321 93.8123 215.656 93.9055C216.002 94.0021 216.384 94.3225 216.533 94.6523C216.699 95.0214 216.707 95.6985 216.508 96.0611ZM288.444 42.3935C289.549 42.3128 290.545 42.3812 291.558 42.8913C295.036 44.6429 295.804 50.4646 290.202 52.0956C289.069 52.1684 288.175 52.1691 287.142 51.624C283.281 49.5872 283.323 43.8834 288.444 42.3935ZM282.916 51.804C283.283 52.1943 283.803 52.6325 284.037 53.1123L276.919 60.2023C276.438 59.7803 275.916 59.4706 275.368 59.1463C278.11 57.0813 280.508 54.2473 282.916 51.8035L282.916 51.804ZM270.517 61.0583C271.336 60.9576 272.134 60.9449 272.913 61.2384C275.303 62.139 276.29 64.6647 275.203 67.05C274.692 68.1715 273.729 68.8057 272.6 69.2092C268.861 70.1119 266.512 66.2325 267.783 63.433C268.351 62.1834 269.287 61.5557 270.517 61.0581L270.517 61.0583ZM282.274 12.9006C283.389 12.7965 284.428 12.8423 285.451 13.342C286.636 13.9211 287.526 14.8735 287.933 16.1343C288.339 17.394 288.241 19.0574 287.583 20.2122C286.857 21.4881 285.655 22.1517 284.28 22.4953C283.288 22.6106 282.327 22.6036 281.404 22.1756C277.437 20.3363 277.195 14.4878 282.274 12.9004L282.274 12.9006ZM253.211 6.64742C257.383 6.35818 260 11.0389 257.746 14.2163C256.237 16.3447 253.358 16.8466 251.452 15.8723C247.68 13.9442 247.716 7.81295 253.211 6.64713L253.211 6.64742ZM248.5 17.1267C248.952 17.6294 249.311 17.93 249.773 18.2743L242.152 25.9625L241.848 26.1236L240.805 24.8444L248.499 17.1266L248.5 17.1267ZM232.655 27.7404C233.431 26.6004 234.488 26.1463 235.808 25.9195C236.547 25.9482 237.265 26.0551 237.925 26.409C240.839 27.9693 241.3 32.6937 236.249 34.0118C233.228 34.2306 230.617 30.7339 232.655 27.7403L232.655 27.7404ZM207.111 86.245C206.948 86.7246 206.588 86.9316 206.161 87.1557C204.622 87.6054 203.335 85.4636 205.283 84.5668C206.711 84.141 207.407 85.3716 207.111 86.245ZM226.318 49.1973C226.17 49.7484 225.842 49.9682 225.367 50.2395C224.66 50.3478 224.019 50.259 223.634 49.661C223.087 48.8119 223.472 47.9001 224.372 47.3689C224.626 47.3236 224.903 47.2617 225.158 47.3256C225.972 47.5282 226.528 48.4139 226.318 49.1973Z\" fill=\"black\"/>\n            <path id=\"Vector_4\" d=\"M64.1652 52.7116C66.5404 54.9811 69.3775 55.2033 72.4817 54.437L80.6308 62.6041C80.2681 65.0345 80.2845 67.085 81.8201 69.1441C84.8048 73.1459 91.1913 72.7816 93.6394 68.4326C93.7255 68.2794 94.3277 66.7962 94.3628 66.7742C94.417 66.7405 102.089 66.8501 115.298 66.7209C141.066 92.7782 139.2 90.5626 140.344 92.0303C139.418 93.137 139.226 94.03 138.977 95.51C128.407 95.5059 129.195 95.5883 129.023 95.5062C128.806 95.403 111.979 78.3955 111.488 77.6431C111.947 76.5238 112.151 75.2323 111.696 74.0684C110.026 69.7894 104.721 70.2919 103.415 74.0472C102.318 77.2017 104.882 80.6955 108.352 80.0477C108.518 80.0168 109.252 79.7662 109.357 79.7971C109.408 79.8123 109.656 80.1778 127.837 98.3993L140.406 98.3096C141.259 99.1619 141.954 99.5814 143.204 99.5922C147.229 99.6279 149.239 94.5321 146.414 91.9782C145.068 90.7611 143.619 90.916 143.306 90.7793C142.828 90.5715 116.52 63.8749 116.359 63.7986C116.341 63.7901 110.407 63.8206 94.4428 63.8206C94.323 63.7246 93.8978 62.1931 93.7651 61.8984C93.2581 60.7707 92.4829 59.9648 91.5633 59.1625C118.141 59.2268 116.24 59.2471 116.844 59.0194C117.323 58.4048 117.126 61.187 117.257 33.3529C118.458 34.8793 119.83 35.6571 121.699 36.118C122.003 36.1925 121.598 58.0347 121.928 58.7092C122.05 58.9581 148.782 85.3794 148.839 85.8479C149.143 88.3299 151.194 90.264 153.956 89.8107C156.994 89.3121 158.904 85.6227 156.514 82.6482C156.385 82.4866 156.025 82.1482 155.958 81.9671C155.808 81.5675 155.954 80.4033 155.953 79.9392L155.953 71.0976C155.954 70.7535 156.088 69.2295 155.963 68.9835C155.951 68.9602 156.661 69.7408 138.916 51.8475C138.676 51.6068 137.668 50.6476 137.764 50.4111C139.707 45.6228 134.995 43.094 131.942 44.5816C129.625 45.71 128.983 48.3624 130.096 50.3989C131.002 52.0578 132.773 52.8772 134.3 52.7871C134.537 52.7731 135.535 52.5254 135.665 52.5924C135.861 52.6942 136.21 53.1539 136.385 53.3338C139.065 56.0579 135.6 52.5341 153.107 70.342L153.058 81.2053C151.798 81.4928 150.891 81.7704 149.957 82.7327C123.76 56.481 124.766 57.4311 124.698 57.3145C124.645 57.2216 124.725 58.241 124.684 35.9975C126.66 35.4069 128.069 34.5806 129.092 32.7255C131.963 27.5181 127.527 21.3611 121.387 22.6208C121.222 22.6545 120.67 22.8395 120.538 22.8159C120.169 22.75 113.055 15.406 112.202 14.4496C112.818 12.2302 112.785 11.3026 112.586 9.98056C112.287 8.12073 110.924 6.16141 109.391 5.09151C107.711 3.91843 105.831 3.59393 103.82 3.76631C101.605 4.25105 99.7521 5.16484 98.4791 7.14141C95.8263 11.2612 97.4993 16.071 100.835 18.0689C103.288 19.538 105.948 18.938 106.234 19.0379C106.395 19.0942 105.617 18.397 114.339 27.1899L114.385 54.4033C81.436 21.5996 82.9355 23.195 81.8056 21.7536C82.9297 19.6306 83.3136 17.5195 82.625 15.1675C80.6478 8.41271 71.2854 7.89416 68.2239 14.046C65.1345 20.2536 71.3339 27.3344 77.8065 24.8505L79.6762 23.9242C114.18 58.2661 111.117 54.9954 112.183 56.3168L85.0519 56.327L77.444 48.6372C77.4794 45.8552 77.219 43.6251 75.1552 41.5539C73.5982 39.991 71.5257 39.2815 69.3508 39.2962C62.4354 39.3424 59.1019 47.8725 64.1657 52.7114L64.1652 52.7116ZM107.947 77.0505C107.665 77.0743 107.387 77.0538 107.104 77.0425C106.756 76.8602 106.438 76.7003 106.23 76.3513C105.981 75.9336 105.943 75.4346 106.102 74.9739C106.274 74.4735 106.729 74.1706 107.192 73.9802C107.501 73.9253 107.71 73.8992 108.008 74.0205C109.158 74.4892 109.749 76.3348 107.947 77.0505ZM141.98 94.7735C142.105 94.2685 142.504 93.9832 142.937 93.7567C143.195 93.7143 143.431 93.6697 143.689 93.7321C144.451 93.9154 145.025 94.7079 144.693 95.6355C144.466 96.2668 143.736 96.6187 143.211 96.5518C142.423 96.452 141.804 95.4834 141.98 94.7735ZM134.477 49.8623C132.996 50.2545 132.226 49.0225 132.587 47.8846C132.737 47.4131 133.131 47.1666 133.55 46.9681C135.055 46.5841 136.392 48.9087 134.477 49.8623ZM151.924 85.1009C152.126 84.6274 152.464 84.4157 152.922 84.2302C154.228 83.9571 154.799 85.1126 154.475 86.0695C154.314 86.5451 153.981 86.7113 153.552 86.9203C153.32 86.9435 153.089 86.978 152.86 86.9006C152.306 86.7125 151.564 85.9397 151.924 85.1009ZM122.424 25.3485C126.154 25.0806 127.993 28.6557 126.529 31.2897C125.899 32.4218 124.863 32.9586 123.678 33.3231C122.708 33.4157 121.942 33.4099 121.062 32.9015C118.182 31.2363 117.829 26.3518 122.424 25.3483V25.3485ZM105.937 16.209C101.963 16.9347 98.6501 12.941 100.586 9.27682C101.347 7.83557 102.48 7.1287 103.986 6.6588C104.899 6.55975 105.755 6.57003 106.619 6.91296C109.255 7.95862 110.432 10.9139 109.439 13.2017C108.738 14.8167 107.523 15.6224 105.937 16.2092L105.937 16.209ZM109.172 17.891L110.387 16.7175L118.084 24.4272L116.944 25.7291L109.172 17.891L109.172 17.891ZM75.9092 22.2852C74.8818 22.3281 73.9874 22.3122 73.0502 21.814C70.7316 20.5816 69.5824 17.448 71.1924 14.8546C72.012 13.5344 73.1084 13.0242 74.5617 12.684C81.0441 12.3468 81.982 20.8375 75.9092 22.2852L75.9092 22.2852ZM87.0709 60.7969C91.8865 60.4651 93.655 67.7063 87.9851 69.0957C87.1077 69.1106 86.2091 69.0253 85.4368 68.5675C82.2392 66.6733 82.5243 61.7233 87.0709 60.797V60.7969ZM76.0377 51.6691C76.1343 51.6691 76.2359 51.6382 76.3274 51.6691C76.7028 51.7958 80.8393 56.5591 83.6235 58.9482C82.0933 60.0373 82.2838 59.9185 82.075 60.0099L75.0034 52.9393L76.0375 51.6695L76.0377 51.6691ZM65.5895 44.0979C66.5705 42.8182 67.8969 42.337 69.4285 42.1274C70.5877 42.1737 71.536 42.3879 72.5009 43.0697C75.5274 45.2078 75.5892 51.1459 69.8634 51.9293C65.045 51.9207 63.4232 46.9241 65.5894 44.0976L65.5895 44.0979Z\" fill=\"black\"/>\n            <path id=\"Vector_5\" d=\"M74.7357 14.8991C73.9846 15.2675 73.4103 15.6068 73.0672 16.5556C72.6981 17.5765 72.8251 19.6948 74.3253 20.3076C74.7958 20.4999 75.2488 20.4889 75.7389 20.4622C76.491 20.0851 77.0861 19.6312 77.3966 18.6595C77.935 16.9747 77.0166 14.7534 74.7357 14.8991Z\" fill=\"black\"/>\n            <path id=\"Vector_6\" d=\"M282.532 20.4073C283.005 20.5301 283.568 20.4616 284.051 20.4198C284.887 20.0286 285.587 19.6496 285.897 18.721C286.135 18.0065 286.072 16.9159 285.706 16.2572C284.896 14.8014 283.831 14.8014 282.387 14.963C281.56 15.4157 280.901 15.866 280.607 16.8118C280.077 18.5139 280.966 19.9999 282.532 20.4073Z\" fill=\"black\"/>\n            <path id=\"Vector_7\" d=\"M123.423 31.6301C124.056 31.4477 124.526 31.0717 124.827 30.4981C125.479 29.256 124.345 27.8578 122.944 27.9255C122.343 28.0921 121.912 28.3096 121.591 28.85C120.672 30.3952 122.049 31.814 123.423 31.6301Z\" fill=\"black\"/>\n            <path id=\"Vector_8\" d=\"M237.377 31.4497C237.949 30.29 237.537 28.8033 236.608 28.2061C236.282 27.9965 235.937 27.9871 235.583 27.9231C234.928 28.2414 234.384 28.5551 234.08 29.3947C233.653 30.5712 234.082 31.908 235.119 32.3965C235.386 32.5222 235.677 32.5481 235.96 32.5769C236.588 32.3544 237.028 32.1582 237.377 31.4497Z\" fill=\"black\"/>\n            <path id=\"Vector_9\" d=\"M87.5002 67.0057C87.7623 67.035 88.0265 66.9902 88.3252 66.9663C88.8466 66.6672 89.3445 66.3756 89.5497 65.7673C89.8776 64.7956 89.3663 63.561 88.162 63.3279C87.8271 63.2629 87.49 63.2982 87.1555 63.3437C86.608 63.6519 86.166 63.992 85.9918 64.6326C85.6758 65.7949 86.5099 66.8958 87.5002 67.0057Z\" fill=\"black\"/>\n            <path id=\"Vector_10\" d=\"M272.405 66.9525C273.068 66.6529 273.605 66.3427 273.832 65.7214C274.266 64.5376 273.32 63.6211 272.041 63.3489C271.638 63.263 271.219 63.2939 270.808 63.3182C270.108 63.6547 269.569 63.9886 269.362 64.6671C269.22 65.1355 269.262 65.762 269.602 66.1701C270.479 67.2213 271.529 67.0246 272.405 66.9525Z\" fill=\"black\"/>\n            <path id=\"Vector_11\" d=\"M290.675 85.5033C291.136 85.6482 291.736 85.6414 292.224 85.617C293.124 85.3378 293.724 85.0385 294.145 84.3052C294.773 83.2079 294.315 81.727 292.661 81.146C292.16 80.9699 291.677 80.964 291.142 80.9857C290.295 81.22 289.612 81.485 289.179 82.1607C288.363 83.4347 289.023 84.9837 290.675 85.5033L290.675 85.5033Z\" fill=\"black\"/>\n            <path id=\"Vector_12\" d=\"M68.312 81.0238C67.8776 80.9403 67.4175 80.9819 66.9831 81.0416C66.3211 81.4285 65.7625 81.8529 65.5409 82.6198C65.1592 83.9402 65.9559 85.2777 67.3028 85.5781C67.686 85.6635 68.0309 85.6317 68.415 85.5754C69.1564 85.2285 69.7449 84.8396 70.0132 84.0252C70.1985 83.4629 70.0703 82.5874 69.7631 82.0803C69.4525 81.5677 68.9087 81.1384 68.3119 81.0237L68.312 81.0238Z\" fill=\"black\"/>\n            <path id=\"Vector_13\" d=\"M198.222 103.248C197.516 102.13 196.497 102.419 193.992 102.416C189.832 102.415 161.849 102.374 161.354 102.521C160.015 103.384 160.454 104.414 160.452 106.294C160.429 141.529 160.341 139.262 160.8 139.909C161.404 140.761 162.064 140.512 164.209 140.513C199.293 140.521 196.954 140.575 197.54 140.383C198.686 139.677 198.532 139.141 198.533 137.864C198.55 101.27 198.606 103.857 198.222 103.248L198.222 103.248ZM163.382 137.61L163.418 105.425L195.651 105.416L195.66 137.56L163.382 137.611L163.382 137.61Z\" fill=\"black\"/>\n            <path id=\"Vector_14\" d=\"M67.0901 130.892L97.1098 130.919L106.4 121.397C97.6566 112.464 98.1104 113.089 97.2948 111.952L67.0524 111.968C65.9036 109.941 64.5728 108.787 62.3063 108.909C57.4174 109.746 56.7722 115.182 59.959 117.47C62.3843 119.212 65.867 118.463 67.0958 114.916C98.0264 114.944 95.8598 114.925 95.9474 114.957C96.5115 115.16 101.594 120.551 102.473 121.407L97.1972 126.755C96.9715 126.986 96.1933 127.934 95.9742 127.994C95.66 128.08 67.1549 127.973 67.1363 127.973C66.4366 126.536 65.6662 125.332 64.1027 124.766C62.9539 124.35 61.7062 124.539 60.6308 125.092C59.6854 125.577 59.0792 126.322 58.5287 127.212C58.0122 128.495 57.8528 129.597 58.3886 130.877C59.9216 134.539 64.5351 135.586 67.0904 130.892L67.0901 130.892ZM63.2343 115.148C61.6049 115.616 60.8349 113.977 61.1468 113.05C61.3153 112.55 61.6552 112.276 62.089 112.018C64.1751 111.327 65.008 114 63.2343 115.148ZM61.4112 128.42C61.6905 127.945 62.029 127.801 62.5366 127.667C63.893 127.568 64.5531 128.995 63.9187 130.14C63.6552 130.616 63.2416 130.777 62.7485 130.919C62.482 130.913 62.1993 130.902 61.9615 130.765C61.3053 130.386 60.876 129.331 61.4112 128.42Z\" fill=\"black\"/>\n            <path id=\"Vector_15\" d=\"M300.02 126.474C296.659 122.738 293.124 124.903 291.982 127.977L263.905 127.977L257.588 121.308L263.781 114.873L291.887 114.971C292.646 116.414 293.567 117.689 295.176 118.172C299.081 119.344 302.381 114.901 300.257 111.121C299.66 110.061 298.612 109.303 297.464 109.017C296.819 108.857 296.076 108.884 295.422 108.962C293.795 109.519 292.931 110.411 292.043 111.885C260.467 111.927 262.684 111.897 262.567 111.945C262.142 112.121 262.84 111.557 253.461 121.272L262.558 130.863L292.089 130.9C292.734 132.217 293.561 133.341 294.994 133.795C299.258 135.147 302.617 130.411 300.019 126.474L300.02 126.474ZM295.931 111.971C296.257 111.872 296.53 111.907 296.86 111.94C297.204 112.149 297.462 112.333 297.644 112.713C297.879 113.203 297.882 113.782 297.692 114.288C297.517 114.755 297.168 114.954 296.74 115.127C296.515 115.166 296.248 115.187 296.021 115.149C294.723 114.934 294.353 112.818 295.931 111.971ZM297.577 130.364C297.337 130.779 297.005 130.897 296.57 131.001C296.32 130.997 296.079 130.995 295.84 130.905C294.664 130.46 294.336 128.413 296.152 127.788C297.66 127.528 298.316 129.085 297.577 130.364Z\" fill=\"black\"/>\n            <path id=\"Vector_16\" d=\"M135.717 196.793C139.252 195.442 138.599 191.724 138.68 191.536C138.804 191.249 155.915 174.44 155.983 174.254C155.991 174.232 155.982 160.437 155.995 160.413C156.16 160.113 156.65 159.773 156.878 159.474C157.764 158.313 157.781 156.361 157.172 155.078C155.356 151.249 148.947 151.851 148.752 157.353C146.254 159.905 122.289 183.368 122.079 184.069C122.074 184.088 122.089 203.32 122.089 203.34C122.086 206.176 122.199 205.758 121.917 205.818C120.655 206.087 119.176 206.718 118.217 207.599C117.897 207.892 117.614 208.313 117.255 208.544L117.148 183.771L93.6166 183.738C94.4971 182.182 95.1432 180.862 95.4146 179.085C117.417 179.082 116.394 179.122 116.412 179.117C116.945 178.967 143.286 152.174 143.366 152.135C143.657 151.994 144.503 152.109 144.889 152.026C147.908 151.371 149.544 147.252 146.772 144.565C145.893 143.712 144.783 143.278 143.372 143.345C141.152 143.732 140.808 144.848 140.474 145.032C140.264 145.146 130.904 145.047 129.784 145.045C129.153 145.044 127.786 144.867 127.223 145.076C126.829 145.22 109.188 163.157 108.993 163.094C107.794 162.707 106.641 162.714 105.506 163.297C104.411 163.86 103.49 164.924 103.12 166.094C102.333 168.579 104.003 171.163 106.311 171.732C108.903 172.372 111.278 170.991 111.842 168.165C112.063 167.06 111.734 165.997 111.253 165.008L128.505 147.891L139.336 147.875C139.604 149.012 139.966 149.647 140.656 150.685C138.443 153.276 135.889 155.644 133.476 158.054C114.47 177.109 115.293 176.264 114.974 176.297L95.1685 176.239C91.626 168.333 82.9855 170.531 81.0483 176.018C80.1289 178.622 80.9468 179.925 80.724 180.48C80.7167 180.498 81.1415 180.036 72.2693 188.697C63.1785 186.622 59.7086 195.124 62.8633 199.9C65.2348 203.488 70.0117 204.824 73.7871 202.28C75.3175 201.248 76.6158 199.404 76.9485 197.576C77.0416 197.064 77.028 194.911 77.1924 194.76L85.5297 186.424L112.273 186.553C78.9007 220.128 81.0061 218.021 80.0014 218.793C73.9712 214.341 66.674 219.735 67.6186 226.182C68.2343 230.382 71.8901 233.576 76.6973 232.82C80.6072 232.204 83.7525 228.441 82.8409 223.453C82.6898 222.627 82.3327 221.853 81.9722 221.099C91.2231 211.769 113.72 189.249 114.369 188.429L114.492 215.625C112.694 217.416 114.162 215.952 106.374 223.72C102.25 223.03 97.792 226.395 97.3183 230.927C96.9142 234.794 99.91 238.817 104.632 239.183C110.104 239.613 114.055 234.323 112.823 229.387C112.765 229.153 112.432 228.361 112.492 228.206C112.529 228.109 119.752 220.845 120.759 219.829C127.997 221.549 132.238 214.035 128.818 208.888C127.941 207.568 126.585 206.386 124.964 206.075L124.962 185.017L150.185 160.01C151.073 160.818 151.792 160.986 153.042 161.13C153.06 173.72 153.105 172.72 153.01 172.952C152.751 173.576 142.616 183.541 137.033 189.087C135.883 188.33 134.831 187.922 133.429 188.236C132.141 188.524 130.933 189.404 130.279 190.554C129.737 191.508 129.673 192.933 130.007 193.955C130.694 196.06 133.367 197.692 135.716 196.794L135.717 196.793ZM142.678 147.05C142.868 146.664 143.151 146.52 143.538 146.377C144.677 146.131 145.437 147.22 145.14 148.13C144.98 148.625 144.701 148.815 144.271 149.056C144.002 149.103 143.719 149.151 143.455 149.053C142.725 148.783 142.275 147.872 142.678 147.05ZM107.935 168.837C107.615 168.927 107.301 168.899 106.973 168.888C106.053 168.462 105.707 167.616 105.97 166.778C106.128 166.272 106.506 166.037 106.962 165.824C108.903 165.407 109.752 167.83 107.935 168.837L107.935 168.837ZM73.0138 198.965C72.0224 200.136 70.8854 200.514 69.4032 200.65C63.7502 200.286 62.553 192.131 69.5207 191.013C71.6099 190.97 73.9764 193.044 74.1682 195.133C74.2987 196.555 73.9463 197.863 73.0138 198.965L73.0138 198.965ZM76.0442 191.744L74.8878 190.391C80.6309 184.573 81.0692 184.098 82.1098 183.255C82.4864 183.643 82.7877 184.077 83.1024 184.515L76.0443 191.743L76.0442 191.744ZM88.8062 183.142C83.002 183.9 81.1599 175.806 87.4054 174.062C92.9653 173.61 94.9402 181.245 88.8062 183.142ZM76.1509 229.859C75.0992 229.945 74.0881 229.934 73.1249 229.455C69.4409 227.624 69.466 221.296 74.6741 220.16C75.6777 220.108 76.5088 220.18 77.4345 220.628C80.8304 222.27 81.4842 228.481 76.1509 229.859V229.859ZM109.463 233.83C108.687 235.23 107.49 235.864 106.001 236.256C99.9044 237.008 97.5943 228.566 104.478 226.646C108.611 226.143 111.438 230.267 109.463 233.83L109.463 233.83ZM110.746 225.877C110.263 225.503 109.792 225.199 109.26 224.902L116.933 217.137L118.26 218.485L110.746 225.878L110.746 225.877ZM127.147 212.336C127.326 213.415 126.976 214.363 126.367 215.239C125.555 216.408 124.549 216.901 123.187 217.159C117.664 217.077 116.609 209.562 122.872 208.546C125.248 208.676 126.87 210.67 127.147 212.337L127.147 212.336ZM152.735 158.298C152.192 158.174 151.648 157.468 151.877 156.687C152.039 156.139 152.34 155.883 152.829 155.622C153.092 155.575 153.376 155.51 153.638 155.594C154.421 155.843 154.768 156.888 154.514 157.495C154.317 157.966 153.994 158.149 153.536 158.317C153.269 158.341 152.998 158.358 152.735 158.298L152.735 158.298ZM133.639 194.107C132.819 193.734 132.579 192.511 132.993 191.813C133.333 191.239 134.11 191.043 134.616 191.144C136.125 191.445 136.326 193.479 134.526 194.154C134.202 194.218 133.949 194.248 133.639 194.107Z\" fill=\"black\"/>\n            <path id=\"Vector_17\" d=\"M289.913 187.844C287.926 187.759 286.9 188.445 286.386 188.274C286.358 188.264 278.854 180.821 278.377 180.3C278.832 177.887 278.779 175.836 277.343 173.748C273.76 168.539 266.367 170.193 264.814 175.805L243.339 175.842L218.314 150.534C219.013 149.413 219.139 148.683 219.381 147.405L230.012 147.41L247.273 164.757C246.765 166.137 246.53 167.272 247.18 168.672C249.041 172.681 254.347 171.962 255.59 167.96C256.345 165.528 254.677 162.869 252.565 162.276C251.402 161.95 250.476 162.335 249.339 162.434C249.306 162.437 249.268 162.457 249.24 162.439C248.949 162.246 248.613 161.765 248.359 161.5C242.266 155.321 241.507 154.789 232.647 145.818C232.285 145.45 231.629 144.605 231.175 144.395C230.872 144.254 229.571 144.359 229.187 144.355C217.088 144.414 218.18 144.461 217.947 144.303C216.902 143.593 215.959 143.266 214.676 143.352C210.078 144.122 209.416 149.434 212.713 151.636C213.419 152.107 214.409 152.48 215.266 152.307L215.555 152.239C215.751 152.461 213.684 150.378 241.9 178.701L264.69 178.712C265.283 180.444 266.114 182.129 267.503 183.315C241.68 183.408 241.994 183.331 241.63 183.558L241.63 209.174C240.331 207.65 238.819 206.792 236.87 206.325L236.867 187.668C236.85 183.303 237.249 184.433 235.85 183.019L210.076 157.263C210.1 155.851 209.932 154.832 208.893 153.767C205.932 150.729 201.258 152.937 201.339 157.012C201.363 158.221 201.924 159.055 202.564 160.025C202.559 173.031 202.562 170.508 202.552 173.116C202.548 173.829 202.336 173.528 203.435 174.66C220.774 192.139 219.995 191.193 219.912 191.696C219.707 192.934 219.747 194.363 220.531 195.41C222.161 197.588 225.234 197.759 227.077 196.339C230.511 193.693 228.31 187.425 223.036 188.663C222.834 188.711 222.089 189.029 221.961 189.01C221.668 188.966 207.17 174.125 205.5 172.381L205.494 160.854C208.101 160.654 207.536 160.307 208.571 160.059L233.895 185.33L233.913 206.586C229.801 207.977 228.243 211.959 229.371 215.212C230.37 218.093 232.963 219.817 235.63 219.826C237.241 219.833 237.759 219.533 237.899 219.592C238.464 219.825 245.339 227.058 246.371 228.077C246.444 228.333 246.453 228.21 246.373 228.422C245.628 230.396 245.581 232.553 246.465 234.492C249.583 241.326 258.901 240.444 261.115 233.705C262.557 229.316 259.862 224.921 255.704 223.772C254.212 223.36 252.875 223.69 252.687 223.631C252.389 223.536 244.513 215.664 244.503 215.644C244.423 215.483 244.428 202.153 244.446 188.468L276.877 220.64C274.115 224.858 275.513 229.744 279.165 231.922C283.211 234.335 288.114 232.81 290.229 229.07C293.836 222.694 287.519 215.654 281.41 217.473C280.535 217.733 279.906 218.293 279.093 218.588C278.53 218.145 246.56 186.278 246.538 186.256C273.816 186.316 271.313 186.351 272.018 186.253C272.164 186.057 272.477 185.525 272.692 185.476C275.201 187.109 277.309 189.634 279.414 191.75C280.098 192.437 281.221 193.31 281.681 194.141C281.431 196.499 281.622 198.673 283.195 200.59C286.047 204.066 291.161 204.29 294.361 201.615C298.158 198.442 297.877 193.48 295.16 190.487C293.849 189.042 291.892 187.928 289.913 187.843L289.913 187.844ZM250.987 165.242C251.159 165.233 251.339 165.217 251.51 165.244C252.344 165.375 253.078 166.245 252.732 167.144C252.51 167.722 252.066 167.948 251.519 168.159C249.63 168.45 248.776 165.772 250.987 165.242ZM215.372 149.113C215.105 149.141 214.802 149.189 214.542 149.099C213.873 148.868 213.426 147.987 213.726 147.257C213.925 146.774 214.299 146.576 214.765 146.399C216.404 146.145 217.059 148.333 215.372 149.113ZM223.759 191.332C224.055 191.277 224.438 191.217 224.73 191.306C226.085 191.721 226.262 193.855 224.712 194.46C224.437 194.514 224.263 194.547 223.981 194.497C222.71 194.273 221.992 192.246 223.759 191.332ZM206.899 157.149C206.776 157.522 206.475 157.705 206.154 157.891C205.907 157.958 205.717 157.968 205.464 157.951C205.085 157.925 204.855 157.784 204.618 157.485C204.299 157.082 204.326 156.661 204.402 156.183C204.633 155.805 204.774 155.679 205.159 155.458C206.388 155.078 207.264 156.054 206.899 157.149L206.899 157.149ZM236.614 216.966C235.738 217.036 234.907 216.969 234.123 216.535C231.213 214.927 230.956 210.274 235.326 209.166C236.147 209.139 236.811 209.149 237.581 209.492C240.582 210.832 241.212 215.548 236.614 216.966V216.966ZM252.737 226.56C257.585 225.989 259.559 230.527 257.996 233.519C256.071 237.202 250.751 237.21 249.064 233.046C248.587 231.867 248.682 230.512 249.215 229.367C249.921 227.851 251.221 227.081 252.737 226.56L252.737 226.56ZM249.538 224.683L248.487 225.521C248.366 225.577 248.25 225.609 248.123 225.646L240.662 218.238L241.792 216.852L249.538 224.683H249.538ZM283.026 220.29C289.332 220.173 290.234 228.685 283.93 230.055C277.494 230.411 276.211 221.738 283.026 220.29ZM272.799 181.588C271.87 181.719 271.019 181.78 270.126 181.402C268.042 180.522 267.072 177.884 267.946 175.87C268.467 174.672 269.388 174.112 270.55 173.653C271.537 173.599 272.449 173.561 273.352 174.031C275.415 175.103 276.219 178.012 275.162 179.869C274.636 180.795 273.8 181.297 272.799 181.587V181.588ZM282.895 191.102L275.606 183.995L276.65 182.841C278.638 184.379 280.53 186.449 282.286 188.26C282.783 188.773 283.58 189.431 283.913 190.054L282.895 191.102L282.895 191.102ZM289.439 200.567C288.511 200.497 287.741 200.403 286.923 199.909C283.083 197.59 283.408 191.845 289.199 190.827C295.113 190.947 296.425 199.561 289.439 200.567L289.439 200.567Z\" fill=\"black\"/>\n            <path id=\"Vector_18\" d=\"M292.129 157.576C291.752 157.395 291.309 157.348 290.897 157.3C290.106 157.53 289.53 157.833 289.132 158.566C288.312 160.078 289.182 162.062 291.5 161.949C294.44 161.001 293.639 158.299 292.129 157.576Z\" fill=\"black\"/>\n            <path id=\"Vector_19\" d=\"M68.6618 157.485C68.224 157.304 67.7868 157.284 67.323 157.308C66.5317 157.586 65.9926 157.937 65.6278 158.747C65.408 159.235 65.3793 159.957 65.5825 160.455C65.8235 161.047 66.4586 161.705 67.0678 161.878C67.4511 161.987 67.9249 161.948 68.3206 161.944C70.9624 160.858 70.3019 158.161 68.6618 157.485Z\" fill=\"black\"/>\n            <path id=\"Vector_20\" d=\"M271.576 175.952C271.201 175.891 270.768 175.904 270.403 176.008C269.908 176.264 269.508 176.561 269.356 177.127C269.042 178.29 269.816 179.409 270.894 179.619C271.197 179.678 271.517 179.591 271.892 179.522C272.432 179.168 272.871 178.811 272.983 178.137C273.059 177.679 272.965 177.11 272.687 176.731C272.441 176.395 271.999 176.02 271.576 175.952Z\" fill=\"black\"/>\n            <path id=\"Vector_21\" d=\"M87.7179 175.953C85.4541 176.758 85.3364 179.578 87.3438 180.426C87.7932 180.616 88.2829 180.572 88.7585 180.543C89.4866 180.217 90.1113 179.866 90.4141 179.098C91.1061 177.342 89.4875 175.638 87.7179 175.953Z\" fill=\"black\"/>\n            <path id=\"Vector_22\" d=\"M190.349 234.191C190.158 234.059 189.288 233.67 189.198 233.518C189.021 233.217 189.229 204.627 189.222 204.609C189.155 204.438 189.532 204.864 180.033 195.461L170.658 204.73C170.685 234.059 170.704 232.78 170.554 233.305C169.183 234.401 168.101 235.322 167.859 237.172C167.545 239.581 169.821 241.869 172.162 241.993C176.932 242.241 178.965 235.276 173.544 233.267C173.395 207.801 173.295 209.018 173.54 206.227C173.572 205.86 172.784 206.768 180.01 199.532C185.882 205.271 185.827 205.198 186.365 205.869L186.354 233.212C185.059 233.818 183.786 234.612 183.278 236.034C182.381 238.541 183.905 241.085 186.347 241.773C188.962 242.504 191.42 240.909 191.888 238.792C192.291 236.971 191.856 235.236 190.349 234.192L190.349 234.191ZM173.802 238.193C173.615 238.703 173.186 238.905 172.723 239.13C172.377 239.138 172.01 239.161 171.687 239.016C171.347 238.863 171.047 238.52 170.93 238.166C170.807 237.796 170.807 237.109 171.034 236.774C171.31 236.369 171.64 236.169 172.108 236.054C172.319 236.048 172.523 236.041 172.73 236.093C173.604 236.315 174.139 237.272 173.802 238.193ZM188.934 238.314C188.707 238.775 188.209 238.963 187.751 239.11C187.378 239.132 187.088 239.103 186.752 238.923C186.278 238.668 185.605 237.776 186.145 236.897C186.426 236.439 186.816 236.197 187.323 236.054C188.611 235.944 189.527 237.108 188.934 238.314Z\" fill=\"black\"/>\n            <path id=\"Vector_23\" d=\"M122.798 211.299C122.081 211.68 121.58 211.988 121.351 212.817C121.215 213.311 121.325 213.838 121.609 214.261C122.204 215.151 123.03 215.019 123.52 214.973C124.143 214.624 124.737 214.229 124.952 213.512C125.265 212.47 124.375 211.448 123.439 211.304C123.23 211.272 123.008 211.286 122.798 211.299Z\" fill=\"black\"/>\n            <path id=\"Vector_24\" d=\"M236.175 211.309C235.872 211.257 235.583 211.303 235.144 211.318C234.626 211.63 234.136 211.916 233.989 212.546C233.863 213.085 233.884 213.666 234.178 214.149C234.704 215.013 235.408 215.074 236.405 214.969C236.946 214.649 237.385 214.345 237.57 213.71C237.892 212.607 237.027 211.454 236.175 211.309L236.175 211.309Z\" fill=\"black\"/>\n            <path id=\"Vector_25\" d=\"M76.0275 222.556C75.6393 222.411 75.1631 222.458 74.7539 222.474C74.0299 222.764 73.3886 223.108 73.076 223.858C72.5966 225.009 73.0702 226.456 74.3398 226.953C74.771 227.122 75.236 227.106 75.6925 227.108C76.4085 226.837 76.994 226.499 77.3291 225.793C77.9181 224.551 77.2521 223.016 76.0274 222.556L76.0275 222.556Z\" fill=\"black\"/>\n            <path id=\"Vector_26\" d=\"M282.397 227.856C282.85 227.998 283.314 228.027 283.785 228.038C284.645 227.728 285.435 227.369 285.828 226.48C286.543 224.862 285.401 222.384 282.871 222.455C281.857 222.83 281.145 223.203 280.669 224.224C280.369 224.869 280.389 225.822 280.685 226.47C280.995 227.146 281.696 227.639 282.397 227.856Z\" fill=\"black\"/>\n            <path id=\"Vector_27\" d=\"M142.255 231.087C141.903 230.91 141.517 230.857 141.127 230.831C140.303 231.034 139.812 231.228 139.35 231.956C138.536 233.238 139.144 234.658 140.294 235.234C140.664 235.419 141.046 235.459 141.456 235.485C142.307 235.262 142.873 235.025 143.343 234.263C144.056 233.107 143.346 231.635 142.255 231.087Z\" fill=\"black\"/>\n            </g>\n            </g>\n        </svg>\n\n    )\n}\n\nexport default QuantumImage;","import * as React from 'react';\nimport { Waypoint } from 'react-waypoint';\nimport AiImage from '../images/ai';\nimport TelcoImage from '../images/telco';\nimport QuantumImage from '../images/quantum';\n\nconst SectorsSection = ({floatAnimation, useWndowWidth}) => {\n    return (\n        <div className=\"sectors\">\n            <div className=\"container\">\n                <Waypoint onEnter={() => floatAnimation(\"ForegroundAI\")} onLeave={() => floatAnimation(\"ForegroundAI\")} bottomOffset={useWndowWidth() > 767.20 ? 80 : 0}>\n                    <div className=\"row mb-5\">\n                        <div className=\"col-md-4\">\n                            <div className=\"sectors-first\">\n                                <AiImage />\n                            </div>\n                        </div>\n                        <div className=\"col-md-8 sectors-text\">\n                            <div className=\"sectors-text-container\">\n                                <h5 className='mb-5'>AI</h5>\n                                <p>AI (Artificial Intelligence) is a branch of computer science focused on creating systems or machines that can perform tasks that typically require human intelligence. These tasks include:</p>\n                                <ul>\n                                    <li>Understanding language</li>\n                                    <li>Recognizing images and sounds</li>\n                                    <li>Learning from experience</li>\n                                    <li>Making decisions</li>\n                                    <li>Solving problems</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                </Waypoint>\n                <Waypoint onEnter={() => floatAnimation(\"ForegroundTelco\")} onLeave={() => floatAnimation(\"ForegroundTelco\")} bottomOffset={useWndowWidth() > 767.20 ? 150 : 0}>\n                    <div className=\"row mt-5 mb-5\">\n                        <div className=\"col-md-4 order-md-2\">\n                            <div className=\"sectors-middle\">\n                                <TelcoImage />\n                            </div>\n                        </div>\n                        <div className=\"col-md-8 order-md-1 sectors-text\">\n                            <div className=\"sectors-text-container\">\n                                <h5 className='mb-5'>Telco / Computer Networking</h5>\n                                <p>Key disciplines and areas: SDN/ NFV, Containerisation OS systems/ Virtualization, Edge Computing/ Cloud Computing (Platforms with API capability) and 5G/ mmWave/ RAN/ Backhaul technology. We work with clients that sell network infrastructure, network software, network services and many more critical products to keep the world connected.</p>\n                                <p>Computer networking involves connecting devices to exchange data and share resources. These devices use communication protocols, like the Internet Protocol (IP), to transmit information over wired or wireless connections. Networking allows for various forms of communication and collaboration, including data sharing, resource sharing, and application sharing.</p>\n                            </div>\n                        </div>\n                    </div>\n                </Waypoint>\n                <Waypoint onEnter={() => floatAnimation(\"ForegroundQuantum\")} onLeave={() => floatAnimation(\"ForegroundQuantum\")} bottomOffset={useWndowWidth() > 767.20 ? 150 : 0}>\n                    <div className=\"row mt-5\">\n                        <div className=\"col-md-4\">\n                            <div className=\"sectors-last\">\n                                <QuantumImage />\n                            </div>\n                        </div>\n                        <div className=\"col-md-8 order-md-1 sectors-text\">\n                            <div className=\"sectors-text-container\">\n                                <h5 className='mb-5'>Quantum Computing</h5>\n                                <p>Quantum computing is an emergent field of cutting-edge computer science harnessing the unique qualities of quantum mechanics to solve problems beyond the ability of even the most powerful classical computers.</p>\n                                <p>The field of quantum computing contains a range of disciplines, including quantum hardware and quantum algorithms. While still in development, quantum technology will soon be able to solve complex problems that supercomputers can’t solve, or can’t solve fast enough. We hire Physicists, researchers and in general the whole engineering staff stack all the way from junior developer to CTO.</p>\n                            </div>\n                        </div>\n                    </div>\n                </Waypoint>\n            </div>\n        </div>\n    )\n}\n\nexport default SectorsSection;\n","import * as React from 'react';\nimport { Waypoint } from 'react-waypoint';\nimport SectorsSection from './sectors';\n\nconst AboutSection = ({highlightAnimation, floatAnimation, useWndowWidth}) => {\n    return (\n        <div id=\"about\" className=\"about-container\">\n            <Waypoint onEnter={() => highlightAnimation(\"highlight\")} onLeave={() => highlightAnimation(\"highlight\")}>\n                <div className=\"about-info\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-12 text-center\">\n                                <h2 className=\"highlight-heading\"><span id=\"highlight\"></span>About Us</h2>\n                                <p className=\"text-accent\">Osiris Resources is an industry specific expert consultancy delivering global hiring programs in three cutting edge technology areas. Artifical Intelligence (AI), Telecommunication and Quantum Computing.</p>\n                                <hr className=\"divider-small\"></hr>\n                                <p>What does industry specific mean? SDN / NFV, Containerisation OS systems / Virtualization, Edge Computing / Cloud Computing (Platforms with API capability) and 5G / mmWave / RAN / Backhaul technology.\n                                    We understand our technology space, the demographic of talent within our market and regularly deliver in what can be a challenging space to hire effectively and quickly.  We are confident we can drive the CAPEX and OPEX of your hiring programs down.</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Waypoint>\n            <SectorsSection floatAnimation={floatAnimation} useWndowWidth={useWndowWidth} />\n        </div>\n    )\n}\n\nexport default AboutSection;","import * as React from \"react\"\n\nconst Retain = () => {\n    return (\n        <svg width=\"110\" height=\"110\" viewBox=\"0 0 110 110\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <g id=\"Number_One\">\n            <path id=\"Green_Accent_One\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M92 51C92 30.5655 75.4345 14 55 14L55 51L92 51Z\" fill=\"#40F5D4\"/>\n            <g id=\"Circle_one\" filter=\"url(#filter0_d_178_3)\">\n            <circle cx=\"55\" cy=\"51\" r=\"32\" fill=\"url(#paint0_linear_178_3)\"/>\n            </g>\n            <path id=\"Vector\" d=\"M50.2188 37.2H59.7812C60.0734 37.2 60.3125 37.44 60.3125 37.7333V40.4H49.6875V37.7333C49.6875 37.44 49.9266 37.2 50.2188 37.2ZM46.5 37.7333V40.4H42.25C39.9059 40.4 38 42.3133 38 44.6667V51.0667H50.75H59.25H72V44.6667C72 42.3133 70.0941 40.4 67.75 40.4H63.5V37.7333C63.5 35.6733 61.8332 34 59.7812 34H50.2188C48.1668 34 46.5 35.6733 46.5 37.7333ZM72 53.2H59.25V55.3333C59.25 56.5133 58.3004 57.4667 57.125 57.4667H52.875C51.6996 57.4667 50.75 56.5133 50.75 55.3333V53.2H38V61.7333C38 64.0867 39.9059 66 42.25 66H67.75C70.0941 66 72 64.0867 72 61.7333V53.2Z\" fill=\"white\"/>\n            </g>\n            <defs>\n            <filter id=\"filter0_d_178_3\" x=\"0\" y=\"0\" width=\"110\" height=\"110\" filterUnits=\"userSpaceOnUse\" colorInterpolationFilters=\"sRGB\">\n            <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\"/>\n            <feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\"/>\n            <feMorphology radius=\"1\" operator=\"erode\" in=\"SourceAlpha\" result=\"effect1_dropShadow_178_3\"/>\n            <feOffset dy=\"4\"/>\n            <feGaussianBlur stdDeviation=\"12\"/>\n            <feComposite in2=\"hardAlpha\" operator=\"out\"/>\n            <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0.0588235 0 0 0 0 0.309804 0 0 0 0 0.886275 0 0 0 0.2 0\"/>\n            <feBlend mode=\"normal\" in2=\"BackgroundImageFix\" result=\"effect1_dropShadow_178_3\"/>\n            <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"effect1_dropShadow_178_3\" result=\"shape\"/>\n            </filter>\n            <linearGradient id=\"paint0_linear_178_3\" x1=\"34.8095\" y1=\"27.7619\" x2=\"87\" y2=\"76.1429\" gradientUnits=\"userSpaceOnUse\">\n            <stop stopColor=\"#B6B8BF\"/>\n            <stop offset=\"1\" stopColor=\"#54868B\"/>\n            </linearGradient>\n            </defs>\n        </svg>\n    )\n}\n\nexport default Retain;","import * as React from 'react';\n\nconst CaseStudy = () => {\n    return (\n        <svg width=\"110\" height=\"110\" viewBox=\"0 0 110 110\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <g id=\"Number_Two\">\n            <path id=\"Green_Accent_Two\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M55 87.9912C75.4345 87.9912 92 71.4257 92 50.9912L55 50.9912L55 87.9912Z\" fill=\"#40F5D4\"/>\n            <g id=\"Circle_Two\" filter=\"url(#filter0_d_186_14)\" data-figma-bg-blur-radius=\"24\">\n            <circle cx=\"55\" cy=\"51\" r=\"32\" fill=\"url(#paint0_linear_186_14)\"/>\n            </g>\n            <path id=\"Vector\" d=\"M45.6667 32C43.0927 32 41 34.074 41 36.625V64.375C41 66.926 43.0927 69 45.6667 69H64.3333C66.9073 69 69 66.926 69 64.375V43.5625H59.6667C58.376 43.5625 57.3333 42.5291 57.3333 41.25V32H45.6667ZM59.6667 32V41.25H69L59.6667 32ZM46.8333 36.625H51.5C52.1417 36.625 52.6667 37.1453 52.6667 37.7812C52.6667 38.4172 52.1417 38.9375 51.5 38.9375H46.8333C46.1917 38.9375 45.6667 38.4172 45.6667 37.7812C45.6667 37.1453 46.1917 36.625 46.8333 36.625ZM46.8333 41.25H51.5C52.1417 41.25 52.6667 41.7703 52.6667 42.4062C52.6667 43.0422 52.1417 43.5625 51.5 43.5625H46.8333C46.1917 43.5625 45.6667 43.0422 45.6667 42.4062C45.6667 41.7703 46.1917 41.25 46.8333 41.25ZM48 48.1875H62C63.2906 48.1875 64.3333 49.2209 64.3333 50.5V55.125C64.3333 56.4041 63.2906 57.4375 62 57.4375H48C46.7094 57.4375 45.6667 56.4041 45.6667 55.125V50.5C45.6667 49.2209 46.7094 48.1875 48 48.1875ZM48 50.5V55.125H62V50.5H48ZM58.5 62.0625H63.1667C63.8083 62.0625 64.3333 62.5828 64.3333 63.2188C64.3333 63.8547 63.8083 64.375 63.1667 64.375H58.5C57.8583 64.375 57.3333 63.8547 57.3333 63.2188C57.3333 62.5828 57.8583 62.0625 58.5 62.0625Z\" fill=\"white\"/>\n            </g>\n            <defs>\n            <filter id=\"filter0_d_186_14\" x=\"0\" y=\"0\" width=\"110\" height=\"110\" filterUnits=\"userSpaceOnUse\" colorInterpolationFilters=\"sRGB\">\n            <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\"/>\n            <feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\"/>\n            <feMorphology radius=\"1\" operator=\"erode\" in=\"SourceAlpha\" result=\"effect1_dropShadow_186_14\"/>\n            <feOffset dy=\"4\"/>\n            <feGaussianBlur stdDeviation=\"12\"/>\n            <feComposite in2=\"hardAlpha\" operator=\"out\"/>\n            <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0.0588235 0 0 0 0 0.309804 0 0 0 0 0.886275 0 0 0 0.2 0\"/>\n            <feBlend mode=\"normal\" in2=\"BackgroundImageFix\" result=\"effect1_dropShadow_186_14\"/>\n            <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"effect1_dropShadow_186_14\" result=\"shape\"/>\n            </filter>\n            <clipPath id=\"bgblur_0_186_14_clip_path\" transform=\"translate(0 0)\"><circle cx=\"55\" cy=\"51\" r=\"32\"/>\n            </clipPath><linearGradient id=\"paint0_linear_186_14\" x1=\"34.8095\" y1=\"27.7619\" x2=\"87\" y2=\"76.1429\" gradientUnits=\"userSpaceOnUse\">\n            <stop stopColor=\"#B6B7C0\"/>\n            <stop offset=\"1\" stopColor=\"#53707D\"/>\n            </linearGradient>\n            </defs>\n        </svg>\n    )\n}\n\nexport default CaseStudy;","import * as React from 'react';\n\nconst Hiring = () => {\n    return (\n        <svg width=\"110\" height=\"110\" viewBox=\"0 0 110 110\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <g id=\"Number_Three\">\n            <path id=\"Green_Accent_Three\" fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M18 51C18 71.4345 34.5655 88 55 88L55 51L18 51Z\" fill=\"#40F5D4\"/>\n            <g id=\"Circle_Three\" filter=\"url(#filter0_d_186_24)\" data-figma-bg-blur-radius=\"24\">\n            <circle cx=\"55\" cy=\"51\" r=\"32\" fill=\"url(#paint0_linear_186_24)\"/>\n            </g>\n            <path id=\"Vector\" d=\"M55.2178 40.3251L49.0166 45.2256C47.9852 46.0382 47.7866 47.5008 48.5681 48.5447C49.3945 49.6573 51.0025 49.876 52.1108 49.0322L58.4722 44.2068C58.9206 43.8692 59.5613 43.9442 59.9136 44.3818C60.2659 44.8193 60.1827 45.4444 59.7342 45.7882L58.3953 46.8008L69.7472 57.0017H72.425C74.1227 57.0017 75.5 55.6579 75.5 54.0014V46.0007C75.5 44.3443 74.1227 43.0004 72.425 43.0004H67.5562H67.3H67.2552L67.0053 42.8441L62.3544 39.9376C61.3742 39.325 60.2275 39 59.0616 39C57.665 39 56.3069 39.4688 55.2178 40.3251ZM56.6784 48.1009L53.3664 50.6136C51.3484 52.1513 48.4208 51.7512 46.9089 49.726C45.4867 47.8196 45.8455 45.1568 47.7225 43.6754L53.0525 39.4688C52.3094 39.1625 51.5086 39.0063 50.695 39.0063C49.4906 39 48.3183 39.35 47.3125 40.0001L42.7 43.0004H37.575C35.8773 43.0004 34.5 44.3443 34.5 46.0007V54.0014C34.5 55.6579 35.8773 57.0017 37.575 57.0017H44.5066L50.3619 62.2147C51.6175 63.3336 53.5586 63.2461 54.7053 62.021C55.0577 61.6397 55.2947 61.1959 55.4164 60.7333L56.5055 61.7084C57.7547 62.8273 59.7022 62.746 60.8489 61.5272C61.1372 61.2209 61.3486 60.8646 61.4831 60.4958C62.7259 61.3084 64.4172 61.1396 65.4614 60.027C66.6081 58.8082 66.5248 56.908 65.2756 55.7891L56.6784 48.1009Z\" fill=\"white\"/>\n            </g>\n            <defs>\n            <filter id=\"filter0_d_186_24\" x=\"0\" y=\"0\" width=\"110\" height=\"110\" filterUnits=\"userSpaceOnUse\" colorInterpolationFilters=\"sRGB\">\n            <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\"/>\n            <feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" result=\"hardAlpha\"/>\n            <feMorphology radius=\"1\" operator=\"erode\" in=\"SourceAlpha\" result=\"effect1_dropShadow_186_24\"/>\n            <feOffset dy=\"4\"/>\n            <feGaussianBlur stdDeviation=\"12\"/>\n            <feComposite in2=\"hardAlpha\" operator=\"out\"/>\n            <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0.0588235 0 0 0 0 0.309804 0 0 0 0 0.886275 0 0 0 0.2 0\"/>\n            <feBlend mode=\"normal\" in2=\"BackgroundImageFix\" result=\"effect1_dropShadow_186_24\"/>\n            <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"effect1_dropShadow_186_24\" result=\"shape\"/>\n            </filter>\n            <clipPath id=\"bgblur_0_186_24_clip_path\" transform=\"translate(0 0)\"><circle cx=\"55\" cy=\"51\" r=\"32\"/>\n            </clipPath><linearGradient id=\"paint0_linear_186_24\" x1=\"34.8095\" y1=\"27.7619\" x2=\"87\" y2=\"76.1429\" gradientUnits=\"userSpaceOnUse\">\n            <stop stopColor=\"#B6B8BF\"/>\n            <stop offset=\"1\" stopColor=\"#628D92\"/>\n            </linearGradient>\n            </defs>\n        </svg>\n    )\n}\n\nexport default Hiring;","import * as React from 'react';\nimport { Waypoint } from 'react-waypoint';\nimport Retain from '../images/retain';\nimport CaseStudy from '../images/casestudy';\nimport Hiring from '../images/hiring';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n    faCheck,\n    faGlobe,\n    faBuilding,\n    faMoneyCheckDollar,\n    faMicrochip,\n    faPersonCircleCheck,\n    faFlagUsa,\n  } from '@fortawesome/free-solid-svg-icons'\n\nconst ServicesSection = ({ highlightAnimation, numberAnimation }) => {\n    return (\n        <div id=\"services\" className=\"services-container\">\n            <Waypoint onEnter={() => highlightAnimation(\"highlightServices\")} onLeave={() => highlightAnimation(\"highlightServices\")}>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-12 text-center\">\n                            <h2 className=\"highlight-heading\"><span id=\"highlightServices\"></span>Services</h2>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <Waypoint onEnter={() => numberAnimation(\"Green_Accent_One\")} onLeave={() => numberAnimation(\"Green_Accent_One\")}>\n                            <div className=\"col-lg-4\">\n                                <div className=\"services-panel\">\n                                    <span className=\"panel-number\">\n                                        <Retain />\n                                    </span>\n                                    <h6>Retain Us</h6>\n                                    <p><span><FontAwesomeIcon icon={faCheck} /></span>Data driven recruitment</p>\n                                    <p><span><FontAwesomeIcon icon={faCheck} /></span>Monthly contracted hiring resources</p>\n                                    <p><span><FontAwesomeIcon icon={faCheck} /></span>Pipeline building and account management services</p>\n                                    <p><span><FontAwesomeIcon icon={faCheck} /></span>Successful LinkedIn campaigns</p>\n                                </div>\n                            </div>\n                        </Waypoint>\n                        <Waypoint onEnter={() => numberAnimation(\"Green_Accent_Two\")} onLeave={() => numberAnimation(\"Green_Accent_Two\")}>\n                            <div className=\"col-lg-4\">\n                                <div className=\"services-panel\">\n                                    <span className=\"panel-number\">\n                                        <CaseStudy />\n                                    </span>\n                                    <h6>Volta Networks Case Study</h6>\n                                    <p><span><FontAwesomeIcon icon={faGlobe} /></span>2019: 38 staff hired across 4 locations in 12 months - USA, Spain, Japan and UK</p>\n                                    <p><span><FontAwesomeIcon icon={faBuilding} /></span>Company entities created in the UK and an office in Madrid created in that time</p>\n                                    <p><span><FontAwesomeIcon icon={faMoneyCheckDollar} /></span>Company is now formerly known as IBM after acquisition</p>\n                                    <br/>\n                                    <h6>Alef Inc Case Study</h6>\n                                    <p><span><FontAwesomeIcon icon={faMicrochip} /></span>2022: 20 requirements to build a EMEA Engineering team in Spain and sales organisation in the USA</p>\n                                    <p><span><FontAwesomeIcon icon={faPersonCircleCheck} /></span>On track to deliver 15 headcount in the engineering team by late 2022</p>\n                                    <p><span><FontAwesomeIcon icon={faFlagUsa} /></span>Building a product development team in the USA</p>\n                                </div>\n                            </div>\n                        </Waypoint>\n                        <Waypoint onEnter={() => numberAnimation(\"Green_Accent_Three\")} onLeave={() => numberAnimation(\"Green_Accent_Three\")}>\n                            <div className=\"col-lg-4\">\n                                <div className=\"services-panel\">\n                                    <span className=\"panel-number\">\n                                        <Hiring />\n                                    </span>\n                                    <h6>Permanent & Contract Hiring Solutions</h6>\n                                    <p><span><FontAwesomeIcon icon={faCheck} /></span>Third party hiring model</p>\n                                    <p><span><FontAwesomeIcon icon={faCheck} /></span>Contract with agreed fees, terms & conditions</p>\n                                    <p><span><FontAwesomeIcon icon={faCheck} /></span>Bespoke database with large number of skilled contractors for hire</p>\n                                </div>\n                            </div>\n                        </Waypoint>\n                    </div>\n                </div>\n            </Waypoint>\n        </div>\n    )\n}\n\nexport default ServicesSection;","import * as React from \"react\"\nimport Layout from \"../components/layout\"\nimport { useState, useEffect } from 'react'\nimport TeamSection from \"../components/team\"\nimport FootprintSection from \"../components/footprint\"\nimport CtaSection from \"../components/cta\"\nimport ContactSection from \"../components/contact\"\nimport PartnersSection from \"../components/partners\"\nimport HeroSection from \"../components/hero\"\nimport AboutSection from \"../components/about\"\nimport ServicesSection from \"../components/services\"\n\nconst scrollTo = (e, sectionName) => {\n    const section = document.getElementById(sectionName)\n    e.preventDefault()\n    section && section.scrollIntoView({ behavior: \"smooth\", block: \"start\" })\n}\n\nconst highlightAnimation = (highlightId) => {\n    const highlight = document.getElementById(highlightId)\n    highlight.classList.toggle(\"animate-highlight\")\n}\n\nconst floatAnimation = (elementId) => {\n    const element = document.getElementById(elementId)\n    element.classList.toggle(\"sectors-animation\")\n}\n\nconst lineAnimation = (lineOneId, lineTwoId, animationTypeOne, animationTypeTwo) => {\n    const lineOne = document.getElementById(lineOneId)\n    const lineTwo = document.getElementById(lineTwoId)\n    lineOne.classList.toggle(animationTypeOne)\n    lineTwo.classList.toggle(animationTypeTwo)\n}\n\nconst numberAnimation = (numberId) => {\n    const numberEl = document.getElementById(numberId)\n    numberEl.classList.toggle(\"animate-number\")\n}\n\nconst useWndowWidth = () => {\n    const [windowWidth, setWindowWidth] = useState('undefined')\n    useEffect(() => {\n        const handleResize = () => {\n            setWindowWidth(window.innerWidth)\n        }\n\n        window.addEventListener(\"resize\", handleResize)\n\n        handleResize()\n\n        return () => window.removeEventListener(\"resize\", handleResize)\n    }, [])\n\n    return (windowWidth !== typeof 'undefined' ? windowWidth : 0)\n}\n\n\nconst IndexPage = () => {\n  const [isHero, setIsHero] = useState(false)\n  return (\n    <Layout isArticle={false} isHero={isHero} scrollTo={scrollTo}>\n        <HeroSection setIsHero={setIsHero} scrollTo={scrollTo} />\n        <PartnersSection />\n        <AboutSection highlightAnimation={highlightAnimation} floatAnimation={floatAnimation} useWndowWidth={useWndowWidth} />\n        <ServicesSection highlightAnimation={highlightAnimation} numberAnimation={numberAnimation} />\n        <TeamSection highlightAnimation={highlightAnimation} lineAnimation={lineAnimation} useWndowWidth={useWndowWidth} />\n        <FootprintSection highlightAnimation={highlightAnimation} />\n        <CtaSection highlightAnimation={highlightAnimation} />\n        <ContactSection highlightAnimation={highlightAnimation} />\n    </Layout>\n  )\n}\n\nexport default IndexPage\n"],"names":["camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","map","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","u","b","Symbol","for","c","d","e","f","g","h","k","l","n","p","q","t","v","a","r","$$typeof","type","isForwardRef","height","prototype","format","isLoading","isLoaded","images","loading","style","shouldLoad","opacity","placeholder","layout","width","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","fallbackImage","paddingTop","maxWidth","display","React","alt","role","src","children","props","Fragment","Sizer","H","P","srcSet","decoding","undefined","fallback","sizes","Image","media","key","propTypes","PropTypes","Picture","displayName","isRequired","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","image","altValidator","Set","onError","as","className","preactClass","class","onStartLoad","onLoad","overflow","getWrapperProps","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","getSizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","document","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ae","memo","warn","GatsbyImageHydrator","GatsbyImage","se","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__error","imageData","__imageData","console","StaticImage","CAN_USE_DOM","window","createElement","memoized","canUsePassiveEventListeners","defineProperty","supportsPassiveOption","opts","get","noop","testPassiveEventListeners","ensureCanMutateNextEventHandlers","eventHandlers","handlers","nextHandlers","TargetEventHandlers","target","this","events","getEventHandlers","eventName","normalizedEventOptions","String","capture","passive","once","handleEvent","event","forEach","handler","listener","_this","bind","push","isSubscribed","index","indexOf","splice","EVENT_HANDLERS_KEY","eventOptions","normalizeEventOptions","computeOffsetPixels","offset","contextHeight","str","pixelOffset","isNaN","parseFloat","isFinite","percentOffset","parseOffsetAsPercentage","ABOVE","INSIDE","BELOW","INVISIBLE","isDOMElement","Component","timeout","timeoutQueue","onNextTick","cb","item","shift","clearTimeout","hasWindow","defaultProps","debug","scrollableAncestor","topOffset","bottomOffset","horizontal","onEnter","onLeave","onPositionChange","fireOnRapidScroll","Waypoint","_React$PureComponent","call","refElement","_ref","_proto","componentDidMount","_this2","cancelOnNextTick","_this2$props","ensureRefIsProvidedByChild","_handleScroll","_findScrollableAncestor","scrollEventListenerUnsubscribe","resizeEventListenerUnsubscribe","componentDidUpdate","_this3","componentWillUnmount","_this$props","resolveScrollableAncestorProp","node","parentNode","body","getComputedStyle","getPropertyValue","bounds","_getBounds","currentPosition","viewportBottom","viewportTop","waypointTop","waypointBottom","getCurrentPosition","previousPosition","_previousPosition","_this$props2","callbackArg","contextScrollTop","_this$props3","_this$_ref$getBoundin","getBoundingClientRect","innerWidth","innerHeight","offsetWidth","offsetHeight","_this$props4","render","_this4","fontSize","innerRef","above","below","inside","invisible","highlightAnimation","lineAnimation","useWndowWidth","id","S","viewBox","fill","xmlns","fillOpacity","stroke","strokeOpacity","strokeWidth","icon","faShoePrints","faScaleBalanced","href","rel","faLinkedin","faTwitterSquare","setIsHero","scrollTo","onClick","autoPlay","muted","loop","cx","cy","floatAnimation","fillRule","clipRule","y","filterUnits","colorInterpolationFilters","floodOpacity","result","in","values","radius","operator","dy","stdDeviation","in2","mode","x1","y1","x2","y2","gradientUnits","stopColor","transform","numberAnimation","faCheck","faGlobe","faBuilding","faMoneyCheckDollar","faMicrochip","faPersonCircleCheck","faFlagUsa","sectionName","section","getElementById","preventDefault","scrollIntoView","behavior","block","highlightId","classList","toggle","elementId","lineOneId","lineTwoId","animationTypeOne","animationTypeTwo","lineOne","lineTwo","numberId","useState","windowWidth","setWindowWidth","handleResize","isHero","isArticle"],"sourceRoot":""}